Main page:

SigmaStamp - Timestamp your files and documents and proove their existence in the past.
---------------------

About:

SigmaStamp is a data notary service useful when you want to have a proof that you have known some information in the past.

For example, there's a John. John is a great songwriter. Unfortunately, in the past something bad happened to John - man called Fred has stolen his artwork (song lyrics) and pretended to be the original author of the song. Fred had even sued John. Such a sad story.

However, there's a solution for this problem - you are reading about it right now.

John can write his new lyrics together with his name into a file. John will backup this file to his backup hard-drive. Next, he will use SigmaStamp service to register the ownership of this file. SigmaStamp service will issue custom NFT tokens which's metadata contains cryptographic hash of the John's lyrics file. This token will be sent to the John's address. SigmaStamp service will also generate a certification file containing the hash of the file and the transaction ID for the needs of verification in the future. There's also an NIPoPoWs proof included, which can John use to prove his ownership to someone even offline.

If somebody tries to sue John in the future, John can just send his original lyrics file to the judge. Judge will upload this file to the SigmaStamp service and the service will automatically check whether was this file certificated by it and if it was, it will show the precise time where was the NFT creation transaction mined together with the information of the address of the current owner of this NFT.

Information about the ownership of NFT can be used in the future for use-cases such as transfer of right to the file from one user to the another.

---------------------

Proof of "today"

SigmaStamp service default function will prove that you have known some information before the stamping process. However, you cannot know where was the hash of the file calculated.

If you use proof of the "today" function, SigmaStamp service will generate a new zip file containing the file you had uploaded plus the certification of "today". This certification contains various data such as the hashes of the newest blocks from various blockchain and also the heading from huge foreign newspaper providers. This information will prove that the zip file was generated either today or sometime in future but not int the past.

Combination of this "proof of today" together with standard SigmaStamp certification could prove that you know the information about the newly generated zip file right in the moment of the generation.

This feature could be useful for specific use cases.

--------------------

SigmaStampingProcess

Upload your file (whether the original one or the one generated by the "proof of the today" step). File is only loaded into your browser's memory and will never leave your device. Once the upload process is completed, and payment address will be generated. You have to pay specified amount (it has to precise amount as shown) to the payment address. Once you do so, transaction will mint NFT and send it to your address. Certificate with transaction ID together with hash of your file will be generated and downloaded into your computer. This certification zip file will contain the original file, certificate and also NIPoPoW proof for offline verification.

--------------------

Verification page

Upload some file. SigmaStamp service will calculate its hash and will find whether was this file certified by this SigmaStamp service in the past. If it wasn't, an error message will be printed.

Otherwise, SigmaStamp service will show the file hash, the timestamp of the first certification of this file (you can certify the same file multiple times, however the first attempt found in the blockchain - the oldest one, will be taken as the original), together with the address of the current holder of NFT token - this token can be used not only for storage of file hash in the blockchain, but also for the transferring ownership right. This can be specified by the upcoming protocols.
