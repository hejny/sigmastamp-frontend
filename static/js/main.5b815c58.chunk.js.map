{"version":3,"sources":["components/Loader.tsx","components/AsyncContentComponent.tsx","components/QRCode.tsx","components/PaymentGate.tsx","components/PdfPage.tsx","components/UploadZone.tsx","utils/readFile.tsx","utils/getAsByteArray.tsx","utils/uint8ArrayToHex.tsx","hash/blake2b256.ts","oracles/_AbstractBlockcyptherOracle.ts","oracles/BitcoinOracle.ts","oracles/DateOracle.ts","oracles/EthereumOracle.ts","oracles/LitecoinOracle.ts","oracles/NytimesOracle.ts","config.ts","smartcontracts/compileErgoScript.ts","smartcontracts/createScript.ts","smartcontracts/getCurrentBlockchainHeight.ts","smartcontracts/isUserAddressCorrect.ts","smartcontracts/ergoFormat/hex/hexToErgoFormat.ts","smartcontracts/ergoFormat/url/urlToErgoFormat.ts","utils/convertToHex.ts","smartcontracts/sendFollowRequest.ts","smartcontracts/createSigmaStampNft.ts","App.tsx","utils/hexToBase64.ts","smartcontracts/validateFirstCertificate.ts","VerifyApp.tsx","index.tsx"],"names":["Loader","LoaderDiv","className","styled","div","AsyncContentComponent","loading","content","React","state","setState","a","factorable","QRCode","props","href","link","target","rel","ref","canvasElement","options","color","QRCodeGenerator","toCanvas","error","console","PaymentGate","amount","address","dueTime","URL","PaymentGateDiv","PdfPage","pageRef","useRef","createUi","createPdf","doc","jsPDF","text","current","innerText","output","PdfPageDiv","children","UploadZone","uploadClick","this","onFile","onFiles","onFileOver","onFilesOver","clickable","onFileOverMaybe","isFileOver","UploadZoneDiv","onClick","onDragEnter","event","stopPropagation","preventDefault","onDragOver","onDragExit","onDragEnd","onDrop","files","Array","from","dataTransfer","type","element","click","onChange","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsArrayBuffer","getAsByteArray","Uint8Array","uint8ArrayToHex","uint8Array","map","x","toString","padStart","join","blake2b256","input","context","blake2bInit","blake2bUpdate","hashUint8Array","blake2bFinal","hash","AbstractBlockcyptherOracle","name","title","dataTitles","ttl","fetch","toLowerCase","response","json","body","Error","BitcoinOracle","DateOracle","date","time","Date","getUTCFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","EthereumOracle","LitecoinOracle","NytimesOracle","firstTitle","rssParser","RssParser","parseURL","feed","items","VERSION","version","config","ConfigChecker","process","ERGO_ASSEMBLER_URL","get","url","required","value","BUILD_DETAILS_URL","BUILD_DATE","compileErgoScript","script","JSON","stringify","trim","split","method","headers","catch","compilerResponse","compilerResponseBody","success","detail","createScript","Object","entries","filter","key","scriptArray","length","match","param","substring","getCurrentBlockchainHeight","height","isUserAddressCorrect","userAddress","hexToErgoFormat","hex","urlToErgoFormat","str","i","charCodeAt","convertToHex","sendFollowRequest","compiledSmartContractAddress","sigmaStampProviderAddress","documentHashInHex","ergsSendTogetherWithNFT","ergsFeeForSigmaStampService","mintingFee","requestBody","returnTo","startWhen","erg","txSpec","requests","ergValue","decimals","description","registers","R7","R8","R9","fee","inputs","dataInputs","followResponse","followResponseBody","transactionId","id","isPayed","watchResponse","watchResponseBody","tx","log","createSigmaStampNft","documentHashInBase64","assetTypeValue","returnTransactionFee","sigmaStampAssemblerNodeAddr","refundHeightThreshold","ORACLES","App","useState","payment","setPayment","AppDiv","File","certificateFile","zip","JSZip","generateAsync","zipBlob","zipHash","btoa","String","fromCharCode","apply","replace","zipHashBase64","saveAs","prompt","oracle","getData","data","to","validateFirstCertificate","firstCertificate","item","additionalRegisters","getTransactionTime","txId","timestamp","tokenId","outputs","assets","getAssetHolders","VerifyApp","setFiles","verification","setVerification","currentHolder","VerifyAppDiv","droppedFiles","droppedFileVerification","alert","info","toISOString","history","createHashHistory","HeaderElement","header","ReactDOM","render","StrictMode","alt","src","exact","path","document","getElementById"],"mappings":"gbAGO,SAASA,IACZ,OACI,cAACC,EAAD,UAII,qBAAKC,UAAU,cAK3B,IAAMD,EAAYE,IAAOC,IAAV,0BC0BR,SAASC,EAAT,GAG0B,IAF7BC,EAE4B,EAF5BA,QACAC,EAC4B,EAD5BA,QAEA,EAA0BC,WAA4C,CAClED,QAASD,GAAW,cAACN,EAAD,MADxB,mBAAOS,EAAP,KAAcC,EAAd,KAcA,OAVAF,aAAgB,WAKZ,OAJA,sBAAC,sBAAAG,EAAA,kEACGD,EADH,SAvCqB,oBADJE,EAyCmBL,GAvC7BK,IAEDA,EAoCN,yBACcL,QADd,sDAxCF,IAAmBK,IAwCjB,MAAD,GAIO,eAGR,CAACL,IAEG,mCAAGE,EAAMF,U,wBCnDb,SAASM,EAAOC,GACnB,IAAMC,EAAOD,EAAME,KAAKD,KAExB,OACI,mBAASA,OAAQE,OAAO,SAASC,IAAI,sBAArC,SACI,wBACIC,IAAK,SAACC,GACF,GAAKA,EAAL,CAKA,IAAMC,EAA+B,eAAQP,UACrCO,EAAgBN,KACxBM,EAAQC,MAAQD,EAAQC,OAAS,GAEjCC,IAAgBC,SACZJ,EACAL,EACAM,GACA,SAACI,GACOA,GACAC,QAAQD,MAAMA,YCbvC,SAASE,EAAT,GAIgB,IAHnBC,EAGkB,EAHlBA,OACAC,EAEkB,EAFlBA,QACAC,EACkB,EADlBA,QAIMd,EAAO,IAAIe,IAAJ,oEACoDF,EADpD,mBAELD,EAAS,MAKjB,OACI,eAACI,EAAD,WACI,cAACnB,EAAD,CAAcG,SADlB,OAESY,EAAS,IAFlB,kBAE6C,IACzC,mBAAGb,KAAMC,EAAKD,KAAME,OAAO,SAASC,IAAI,sBAAxC,SACKW,IAJT,MAMQC,EANR,eAmBR,I,EAAME,EAAiB7B,IAAOC,IAAV,qE,SCtCb,SAAS6B,EAAQnB,GACpB,IAAMoB,EAAUC,iBAAO,MAEvB,OACI,gCACKrB,EAAMsB,SAAS,CACZC,UAAU,WAAD,4BAAE,4BAAA1B,EAAA,6DACD2B,EAAM,IAAIC,KAeZC,KAAMN,EAASO,QAAgBC,UAAW,GAAI,IAhB3C,kBAkBAJ,EAAIK,OAAO,SAlBX,2CAAF,kDAAC,KAqBd,cAACC,EAAD,CAAYzB,IAAKe,EAAjB,SAA2BpB,EAAM+B,cAK7C,I,EAAMD,EAAazC,IAAOC,IAAV,qJACH,IACC,K,gCCnCD0C,EAAb,4JACI,WACI,IAYIC,EAZJ,EAKIC,KAAKlC,MAJL+B,EADJ,EACIA,SACSI,EAFb,EAEIC,QACaC,EAHjB,EAGIC,YACAC,EAJJ,EAIIA,UAEEC,EAAkB,SAACC,GACjBJ,GACAA,EAAWI,IAMnB,OACI,eAACC,EAAD,CACIC,QAAS,WACDJ,GACAN,KAGRW,YAAa,SAACC,GACVA,EAAMC,kBACND,EAAME,kBAEVC,WAAY,SAACH,GACTA,EAAMC,kBACND,EAAME,iBACNP,GAAgB,IAEpBS,WAAY,SAACJ,GACTA,EAAMC,kBACND,EAAME,iBACNP,GAAgB,IAEpBU,UAAW,SAACL,GACRA,EAAMC,kBACND,EAAME,kBAEVI,OAAQ,SAACN,GACLA,EAAME,iBACNF,EAAMC,kBACNN,GAAgB,GAEhB,IAAMY,EAAQC,MAAMC,KAAKT,EAAMU,aAAaH,OAC5CjB,EAAOiB,IA9Bf,UAiCI,uBACII,KAAK,OACLnD,IAAK,SAACoD,GACEA,IACAxB,EAAc,WACVO,GAAgB,GACfiB,EAA6BC,WAI1CC,SAAU,SAACd,GACFA,GAAUA,EAAM1C,QAAW0C,EAAM1C,OAAOiD,OAE7CjB,EAAOkB,MAAMC,KAAKT,EAAM1C,OAAOiD,WAItCrB,SAnEjB,GAAgCrC,aAyE1BgD,EAAgBrD,IAAOC,IAAV,qKACN,IACC,K,QCtFP,SAASsE,EAASC,GACrB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,iBAAiB,WAAW,SAACtB,GAAD,OAC/BkB,EAAQlB,EAAM1C,OAAQiE,WAE1BH,EAAOE,iBAAiB,QAASH,GAEjCC,EAAOI,kBAAkBR,MCP1B,SAAeS,EAAtB,kC,4CAAO,WAA8BT,GAA9B,SAAAhE,EAAA,kEACQ0E,WADR,SACyBX,EAASC,GADlC,wG,mCCFA,SAASW,EAAgBC,GAC5B,OAAO,YAAIA,GAAYC,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,ICIrE,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,mBAAAnF,EAAA,6DACS,KACU,GAChBoF,EAAUC,sBADM,GADV,MADT,KAMHC,gBANG,KAMWF,EANX,SAM0BX,EAAeU,GANzC,8CASGI,EAAiBC,uBAAaJ,GAG9BK,EAAOd,EAAgBY,GAZ1B,kBAcIE,GAdJ,6C,sBCHA,I,EAAeC,EAAtB,iDAGoBC,UAHpB,OAIoBC,WAJpB,OAMWC,WAAa,CAAEJ,KAAM,sBANhC,KAOWK,KAAO,EAPlB,kFASI,wGAC2BC,MAAM,kCAAD,OACU1D,KAAKsD,KAAKK,cADpB,UADhC,cACUC,EADV,gBAMuBA,EAASC,OANhC,YAMUC,EANV,QAQarF,MARb,sBASc,IAAIsF,MAAMD,EAAKrF,OAT7B,cAYY2E,EAASU,EAATV,KAZZ,kBAaW,CAAEA,SAbb,iDATJ,6DCAaY,EAAb,4MACWV,KAAO,MADlB,EAEWC,MAAQ,UAFnB,YAAmCF,GCAtBY,GAAb,iDACWX,KAAO,OADlB,KAEWC,MAAQ,UAFnB,KAGWE,IAAM,EAHjB,KAKWD,WAAa,CAAEU,KAAM,OAAQC,KAAM,QAL9C,2CAOI,WACI,IAAMD,EAAO,IAAIE,KACjB,MAAO,CACHF,KAAK,GAAD,OAAKA,EAAKG,iBAAV,aAA+B,IAAMH,EAAKI,eAAeC,OACxD,GADD,aAEE,IAAML,EAAKM,cAAcD,OAAO,IACtCJ,KAAK,GAAD,QAAM,IAAMD,EAAKO,eAAeF,OAAO,GAAvC,aACA,IAAML,EAAKQ,iBACbH,OAAO,GAFL,aAEY,IAAML,EAAKS,iBAAiBJ,OAAO,SAf/D,KCAaK,GAAb,4MACWtB,KAAO,MADlB,EAEWC,MAAQ,WAFnB,YAAoCF,GCAvBwB,GAAb,4MACWvB,KAAO,MADlB,EAEWC,MAAQ,WAFnB,YAAoCF,G,qBCCvByB,GAAb,iDACWxB,KAAO,UADlB,KAEWC,MAAQ,qBAFnB,KAGWE,KAAO,EAHlB,KAKWD,WAAa,CAAEuB,WAAY,eALtC,kFAOI,6FACUC,EAAY,IAAIC,KAD1B,SAEuBD,EAAUE,SAAV,0DAFvB,cAEUC,EAFV,yBAQW,CACHJ,WAAYI,EAAKC,MAAM,GAAG7B,QATlC,2CAPJ,6D,UCEa8B,G,OAAUC,EAEjBC,GAASC,iBAAcpE,KAAKqE,kWAKrBC,GAAqBH,GAC7BI,IACG,gCAEHC,MAIAC,WAAWC,MAEHC,GAAoBR,GAC5BI,IACG,+BAEHC,MAAME,MAKEE,GAAaT,GACrBI,IACG,wBAEHzB,OAAO4B,MCzBL,SAAeG,GAAtB,mC,8CAAO,qCAAAtI,EAAA,6DACHuI,EADG,EACHA,OAIMpC,EAAOqC,KAAKC,UAAUF,EAAOG,QAE9BC,MAAM,OACN1D,KAAK,MACL0D,MAAM,QACN1D,KAAK,MAEJgD,EAZH,UAYYF,GAAmB3H,KAZ/B,oBAa4B2F,MAAMkC,EAAK,CACtCW,OAAQ,OACRzC,OACA0C,QAAS,CACL,eAAgB,sBAErBC,OAAM,WACL,MAAM,IAAI1C,MAAJ,8CAAiD6B,EAAjD,UApBP,cAaGc,EAbH,gBAuBgCA,EAAiB7C,OAvBjD,WAyBkC,KAF/B8C,EAvBH,QAyBsBC,QAzBtB,uBA0BO,IAAI7C,MAAJ,0CACiC4C,EAAqBE,SA3B7D,iCA+BIF,GA/BJ,6C,sBCRA,SAAeG,GAAtB,mC,8CAAO,WACHzI,GADG,+BAAAV,EAAA,sEAGoB+F,MAAMrF,EAAQ6H,QAHlC,cAGGtC,EAHH,gBAIgBA,EAASpE,OAJzB,OAIC0G,EAJD,qBAQwBa,OAAOC,QAAQ3I,GAAS4I,QAE/C,kBAAmB,WAAnB,wBAVD,qFAQSC,EART,KAQcpB,EARd,KAa4B,KADrBqB,EAAcjB,EAAOI,MAAP,WAAiBY,KACrBE,OAbjB,uBAcW,IAAIrD,MAAJ,gCACuBmD,EADvB,4BAC8C7I,EAAQ6H,OADtD,MAdX,QAkBCA,EAASiB,EAAYvE,KAAKkD,GAlB3B,oJAuBGuB,EAAQnB,EAAOmB,MAAM,oBAvBxB,uBAyBO,IAAItD,MAAJ,yBACgBsD,EACb7E,KAAI,SAAC8E,GAAD,iBAAeA,EAAMC,UAAU,GAA/B,QACJ3E,KAAK,MAHR,4BAGiCvE,EAAQ6H,OAHzC,OAzBP,iCAgCI,CAAEA,WAhCN,iE,sBCFA,SAAesB,KAAtB,gC,8CAAO,8BAAA7J,EAAA,sEAEoB+F,MAAM,oDAF1B,cAEGE,EAFH,gBAMgBA,EAASC,OANzB,cAMGC,EANH,yBAQIA,EAAK2D,QART,4C,sBCKA,SAAeC,GAAtB,mC,8CAAO,WACHC,GADG,SAAAhK,EAAA,gFAII,GAJJ,4C,sBCEA,SAASiK,GAAgBC,GAE5B,MAAM,OAAN,OAAcA,GCDX,SAASC,GAAgBlC,GAC5B,MAAM,KAAN,OAAYA,EAAIwB,OAAO1E,SAAS,KAAhC,OCNG,SAAsBqF,GAEzB,IADA,IAAIF,EAAM,GACDG,EAAI,EAAGA,EAAID,EAAIX,OAAQY,IAC5BH,GAAO,GAAKE,EAAIE,WAAWD,GAAGtF,SAAS,IAE3C,OAAOmF,EDC+BK,CAAatC,IEKhD,SAAeuC,GAAtB,mC,8CAAO,qDAAAxK,EAAA,6DACHyK,EADG,EACHA,6BACAT,EAFG,EAEHA,YACAU,EAHG,EAGHA,0BACAC,EAJG,EAIHA,kBACAC,EALG,EAKHA,wBACAC,EANG,EAMHA,4BACAC,EAPG,EAOHA,WAwBMC,EAAc,CAChB7J,QAASuJ,EACTO,SAAUhB,EACViB,UAAW,CAAEC,IANXjK,EACF2J,EAA0BC,EAA8BC,GAMxDK,OAAQ,CACJC,SAAU,CACN,CACIC,SAAUT,EACV1J,QAAS8I,EACTrE,KAAM,gBACN1E,OAAQ,EACRqK,SAAU,EACVC,YACI,kHACJC,UAAW,CACPC,GAAI,WACJC,GAAIzB,GAAgBU,GACpBgB,GAAIxB,GAAe,uGAM3B,CACIhC,MAAO0C,EACP3J,QAASwJ,IAGjBkB,IAAKd,EACLe,OAAQ,CAAC,YACTC,WAAY,KA7DjB,SAiE0B/F,MAAM,GAAD,OAAIgC,GAAmB3H,KAAvB,UAAqC,CACnEwI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB1C,KAAMqC,KAAKC,UAAUsC,KAtEtB,cAiEGgB,EAjEH,gBAyE8BA,EAAe7F,OAzE7C,cAyEG8F,EAzEH,OA0ESC,EAA2BD,EAA/BE,GAAmB/K,EAAY6K,EAAZ7K,QA1ExB,kBA4EI,CACHF,SACAE,UACMgL,QAHH,WAGc,OAAD,uHAENC,EAAgBrG,MAAM,GAAD,OACpBgC,GAAmB3H,KADC,kBACa6L,IAH5B,SAKoBF,EAAe7F,OALnC,UAKNmG,EALM,OAOAC,EAERN,EAFQM,GACRpD,EACA8C,EADA9C,OAGJnI,QAAQwL,IAAI,CAAEH,gBAAeC,oBAAmBC,OAEjC,YAAXpD,EAbQ,0CAgBD,GAhBC,iCAmBL,GAnBK,gDA/EjB,6C,sBCIA,SAAesD,GAAtB,mC,8CAAO,iEAAAxM,EAAA,6DACHgK,EADG,EACHA,YACAyC,EAFG,EAEHA,qBACA9B,EAHG,EAGHA,kBAHG,SAUSZ,GAAqBC,GAV9B,uCAWO,IAAI5D,MAAJ,wBAA2B4D,EAA3B,sBAXP,cAcGc,EAAa,IACbF,EAA0B,IAC1BC,EAA8B,IAC9BH,EACF,uDACEgC,EAAiB,OACjBC,EAAuB,IAKvBC,EACF,uDA1BD,UA2BkC/C,KA3BlC,2BA2BGgD,EA3BH,KA2BkE,GAErE9L,QAAQwL,IACJ/D,KAAKC,UAAU,CACXmC,0BACAZ,cACAa,8BACAH,4BACAgC,iBACAD,uBACAE,uBACAC,8BACAC,2BAvCL,UA2CsB1D,GAAa,CAClCZ,OAAQ,gCAGRqC,0BACAZ,cACAa,8BACAH,4BACAgC,iBACAD,uBACAE,uBACAC,8BACAC,0BAvDD,wBA2CKtE,EA3CL,EA2CKA,OA3CL,UA0DqDD,GAAkB,CACtEC,WA3DD,wBA0DckC,EA1Dd,EA0DKvJ,QA1DL,UA8DwCsJ,GAAkB,CACzDC,+BACAT,cACAU,4BACAC,oBACAC,0BACAC,8BACAC,eArED,wBA8DK7J,EA9DL,EA8DKA,OAAQE,EA9Db,EA8DaA,QAASgL,EA9DtB,EA8DsBA,QA9DtB,kBAwEI,CACHlL,SACAC,QAASuJ,EACTtJ,UACAgL,YA5ED,6C,sBCCP,IAAMW,GAAU,CACZ,IAAIzG,EACJ,IAAIY,GACJ,IAAIC,GACJ,IAAIZ,GACJ,IAAIa,IAOD,SAAS4F,KACZ,MAA0BC,mBAAoB,CAAEzJ,MAAO,KAAvD,mBAAOzD,EAAP,KAAcC,EAAd,KACA,EAA8BiN,mBAAmC,MAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,OAAKD,EAgKM,cAACjM,EAAD,eAAiBiM,IA9JpB,eAACE,GAAD,WAS4B,IAAvBrN,EAAMyD,MAAMkG,OACT,cAAC,EAAD,CACIlH,QAAO,uCAAE,WAAOgB,GAAP,SAAAvD,EAAA,sDACLD,EAAS,CAAEwD,UADN,2CAAF,sDAmBPb,WAAS,EApBb,uCAyBA,eAACpB,EAAD,CACIG,SAAU,YAAoB,IAAjBC,EAAgB,EAAhBA,UACT,OACI,wBACIoB,QAAO,sBAAE,4CAAA9C,EAAA,kEACuBoN,KADvB,SAEM1L,IAFN,+BACC2L,EADD,cAGD,oBAKEC,EAAM,IAAIC,IARX,cASczN,EAAMyD,OATpB,IASL,2BAAWS,EAAqB,QAC5BsJ,EAAItJ,KAAKA,EAAK2B,KAAM3B,GAVnB,qCAYLsJ,EAAItJ,KACAqJ,EAAgB1H,KAChB0H,GAdC,UAiBiBC,EAAIE,cACtB,CAAE7J,KAAM,SAlBP,eAiBC8J,EAjBD,iBAsBKvI,EAAWuI,GAtBhB,eAqBCC,EArBD,iBC1EjBtD,EDmGkCsD,EClGnDC,KACHC,OAAOC,aAAaC,MAChB,KAEA1D,EACK2D,QAAQ,SAAU,IAClBA,QAAQ,qBAAsB,SAC9BA,QAAQ,MAAO,IACfpF,MAAM,ODiEsB,WAwBCqF,EAxBD,OA2BLC,iBACIR,EADE,uBAEcC,EAAQ9D,UACpB,EACA,GAJF,SASAI,EAAckE,OAChB,gCACA,wDAtCC,+DA4CLhB,EA5CK,UA6CKV,GAAoB,CACtBxC,cACAyC,qBAAsBuB,EACtBrD,kBAAmB+C,IAhDtB,qEC1EtC,IAAqBtD,ID0EiB,OADb,uCAHZ,UA8DKtK,EAAMyD,MAAMsB,KAAI,SAACb,GAAD,OACb,cAACtE,EAAD,CAEIE,QAAO,sBAAE,4BAAAI,EAAA,sEACckF,EAAWlB,GADzB,cACCyB,EADD,yBAGD,qCACI,yCAAYzB,EAAK2B,QADrB,OACmCF,MAJlC,4CADJzB,EAAK2B,SAYjBmH,GAAQjI,KAAI,SAACsJ,GAAD,OACT,8BACI,cAACzO,EAAD,CACIE,QAAO,sBAAE,4BAAAI,EAAA,sEACcmO,EAAOC,UADrB,cACCC,EADD,yBAID,mCACKjF,OAAOC,QAAQgF,GAAMxJ,KAClB,mCAAE0E,EAAF,KAAOpB,EAAP,YACI,gCACI,8BAEKgG,EAAOvI,MAGAuI,EAECtI,WACD0D,GARZ,OAaCpB,IAdKoB,SAPrB,8CAFP4E,EAAOxI,YAoC7B,cAAC,IAAD,CAAM2I,GAAG,UAAUhO,OAAQ,SAA3B,6CAIA,cAAC,IAAD,CAAMgO,GAAG,SAAT,+HAUhB,I,GAAMnB,GAAS3N,IAAOC,IAAV,6F,OErML,SAAe8O,GAAtB,mC,8CAAO,WAAwCC,GAAxC,yBAAAxO,EAAA,sEAqBoB+F,MAAM,mEArB1B,cAqBGE,EArBH,gBAwBgBA,EAASC,OAxBzB,cAwBGC,EAxBH,gBA0BgBjB,EAAWsJ,GA1B3B,OA0BG/I,EA1BH,qBA4BgBU,EAAKsB,OA5BrB,+DA4BQgH,EA5BR,SA6BUC,oBAAoBhD,KAAzB,cAAuCjG,GA7B5C,0CA8BYgJ,GA9BZ,0KAmCI,MAnCJ,kE,sBAsCA,SAAeE,GAAtB,mC,8CAAO,WAAkCC,GAAlC,qBAAA5O,EAAA,sEAEoB+F,MAAM,4DAAD,OACoC6I,IAH7D,cAEG3I,EAFH,gBAKgBA,EAASC,OALzB,cAKGC,EALH,OAMHpF,QAAQwL,IAAI,qBAAsBpG,GAC5B0I,EAAY1I,EAAK0I,UACjBC,EAAU3I,EAAK4I,QAAQ,GAAGC,OAAO,GAAGF,QARvC,kBAUI,CAAED,YAAWC,YAVjB,6C,sBAaA,SAAeG,GAAtB,mC,8CAAO,WAA+BH,GAA/B,iBAAA9O,EAAA,sEAUoB+F,MAAM,sEAAD,OAC8C+I,IAXvE,cAUG7I,EAVH,gBAagBA,EAASC,OAbzB,cAaGC,EAbH,OAcHpF,QAAQwL,IAAI,kBAAmBpG,GAd5B,kBAeIA,GAfJ,4C,sBCxCA,SAAS+I,KACZ,MAA0BlC,mBAAc,IAAxC,mBAAOzJ,EAAP,KAAc4L,EAAd,KACA,EAAwCnC,mBAAc,MAAtD,mBAAOoC,EAAP,KAAqBC,EAArB,KAEA,OAAKD,EA8CG,eAAC9N,EAAD,CACIG,SAAU,YAAoB,IAAjBC,EAAgB,EAAhBA,UACT,OACI,wBACIoB,QAAO,sBAAE,wCAAA9C,EAAA,kEACuBoN,KADvB,SAEM1L,IAFN,+BACC2L,EADD,cAGD,oBAKEC,EAAM,IAAIC,IARX,cASchK,GATd,IASL,2BAAWS,EAAe,QACtBsJ,EAAItJ,KAAKA,EAAK2B,KAAM3B,GAVnB,qCAYLsJ,EAAItJ,KAAKqJ,EAAgB1H,KAAM0H,GAZ1B,UAciBC,EAAIE,cAAc,CACpC7J,KAAM,SAfL,eAcC8J,EAdD,iBAkBiBvI,EAAWuI,GAlB5B,QAkBCC,EAlBD,OAmBLO,OACIR,EADE,uBAEcC,EAAQ9D,UACpB,EACA,GAJF,SAnBD,4CADb,uCAHZ,UAqCI,sCArCJ,IAqCkBwF,EAAaR,KAC3B,uBACA,2CAvCJ,IAuCuBQ,EAAaP,UAChC,uBACA,yCAzCJ,IAyCqBO,EAAaN,QAC9B,uBACA,gDA3CJ,IA2C4BM,EAAaE,cAAcrK,KAAK,SAvF5D,eAACsK,GAAD,WACI,cAAC,EAAD,CACIhN,QAAO,uCAAE,WAAOiN,GAAP,2BAAAxP,EAAA,6DACCwO,EAAmBgB,EAAa,GACtCL,EAAS,CAACK,EAAa,KAFlB,SAIiCjB,GAClCC,GALC,cAICiB,EAJD,SASDC,MAAM,wEAOFd,EAASa,EAATb,KAhBH,SAkBgCD,GACjCC,GAnBC,uBAkBGC,EAlBH,EAkBGA,UAAWC,EAlBd,EAkBcA,QAlBd,UAqBuBG,GAAgBH,GArBvC,QAqBCQ,EArBD,OAuBLD,EAAgB,2BACTI,GADQ,IAEXZ,YACAC,UACAQ,mBAEJvO,QAAQwL,IAAIkD,GA7BP,4CAAF,sDA+BP/M,WAAS,EAhCb,0CAoCA,cAAC,IAAD,CAAM4L,GAAG,IAAIhO,OAAQ,SAArB,gDAwDhB,I,GAAMiP,GAAe/P,IAAOC,IAAV,+FCtGlBsB,QAAQ4O,KACJ,4CAA2BjI,KACrBW,GAAD,oBAAgCA,GAAWuH,eAA3C,KACCxH,GAAD,8BAE4BA,GAAkBhI,MAF9C,IAHT,6GASA,IAAMyP,GAAUC,cAEVC,GAAgBvQ,IAAOwQ,OAAV,wEAMnBC,IAASC,OACL,eAAC,IAAMC,WAAP,WACI,cAACJ,GAAD,UACI,sBAAK7D,GAAG,yBAAR,UACI,qBAAK3M,UAAU,WAAW6Q,IAAI,kBAAkBC,IAAI,wBACpD,iDAGR,cAAC,IAAD,CAAcR,WAAd,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAlB,SACI,cAACxD,GAAD,MAEJ,cAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,UAAlB,SACI,cAACrB,GAAD,cAKhBsB,SAASC,eAAe,W","file":"static/js/main.5b815c58.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nexport function Loader() {\n    return (\n        <LoaderDiv>\n            {/* TODO: Please @roseckyj  loader that would cover only its area not the whole modal, */}\n            {/* TODO: Please @roseckyj make it universal to use it in every layout type - small icon, fullscreen, modal, etc,... */}\n            {/* TODO: Please @roseckyj untite with LoaderInline */}\n            <div className=\"spinner\"></div>\n        </LoaderDiv>\n    );\n}\n\nconst LoaderDiv = styled.div``;\n","import * as React from 'react';\nimport { Loader } from './Loader';\n\nexport type IAwaitable<T> = T | Promise<T>;\n\nexport type IFactory<T> = () => T;\n\nexport type IFactorable<T> = T | IFactory<T>;\n\nexport function factor<T>(factorable: IFactorable<T>): T {\n    if (typeof factorable === 'function') {\n        return (factorable as any)();\n    } else {\n        return factorable;\n    }\n}\n\ninterface IAsyncContentComponentProps {\n    /**\n     * Component to be rendered before the content is loaded\n     *\n     * If not set, default loading is used\n     */\n    loading?: JSX.Element;\n\n    /**\n     * The async content to be rendered\n     */\n    content: IFactorable<IAwaitable<JSX.Element>>;\n}\n\ninterface IAsyncContentComponentState {\n    content: JSX.Element;\n}\n\n/**\n * Utility for mounting RxJS observable content\n *\n * @collboard-modules-sdk\n */\nexport function AsyncContentComponent({\n    loading,\n    content,\n}: IAsyncContentComponentProps) {\n    const [state, setState] = React.useState<IAsyncContentComponentState>({\n        content: loading || <Loader />,\n    });\n\n    React.useEffect(() => {\n        (async () => {\n            setState({ content: await factor(content) });\n        })();\n\n        return () => {\n            /* TODO: Can here be some reasonable teardown logic? */\n        };\n    }, [content]);\n\n    return <>{state.content}</>;\n}\n","import QRCodeGenerator, { QRCodeRenderersOptions } from 'qrcode';\nimport * as React from 'react';\n\ninterface IQRCodeProps extends QRCodeRenderersOptions {\n    link: URL;\n}\n\nexport function QRCode(props: IQRCodeProps) {\n    const href = props.link.href;\n\n    return (\n        <a {...{ href }} target=\"_blank\" rel=\"noopener noreferrer\">\n            <canvas\n                ref={(canvasElement) => {\n                    if (!canvasElement) {\n                        return;\n                    }\n\n                    // Note: Making some manipulation (probbably) due to internal errors of qrcode library\n                    const options: QRCodeRenderersOptions = { ...props };\n                    delete (options as any).href;\n                    options.color = options.color || {};\n\n                    QRCodeGenerator.toCanvas(\n                        canvasElement,\n                        href,\n                        options,\n                        (error) => {\n                            if (error) {\n                                console.error(error);\n                            }\n                            // console.log('success!');\n                        },\n                    );\n                }}\n            />\n        </a>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport {\n    ergo_wallet_address,\n    nanoerg,\n    seconds,\n} from '../interfaces/stringTypes';\nimport { QRCode } from './QRCode';\n\nexport interface IPaymentGateProps {\n    amount: nanoerg;\n    address: ergo_wallet_address;\n    dueTime: seconds /* TODOL Date */;\n    //getStatus: () => Promise<boolean /* full status in future */>;\n}\n\nexport function PaymentGate({\n    amount,\n    address,\n    dueTime /*, getStatus*/,\n}: IPaymentGateProps) {\n    // TODO: !!! Deal up in design in superlong addreses like UegztxGAXchyKXtaZYFkGWxDnCpMD329qSNk4YVrc8wrwitM58WVocMT59rPSasNZJwezshytQ74pq9JF8uUGGYHJW64hbooxY54dDCRZnFVqFvXGcj1jUhkXpuYuVaDY1b6LcXq9zRCZCiXZ36Gswg2TqcgZRE1B5ZxUrKSd19XykEfsgx5eWW3k7MDiLxvisPqMxqpZtP8UHvgwucJxZ4Bg86xWC3v4kXVC6o9mkg7z64MqiQy1FrqHvY65mr7UgG1vK8q37mDcgZPkDc7BKmsKSLynXgDNsqT8yirvxmsCU9o5wMsF8BoFPxUnjPGLAp7yBwnqtvXowq3o4pYnc4h93irPEHqbTySBgLSEwFzgRgbVrXtE8FaL1q2LVyg7rbHJHzvjVfJMyQDSGQwecG6iWybNUv9sP7SKanHegS4wn8xKaBGrSmqTNk4aPpRXvGTr6rikYxmTYDmQru6tJSebRUf7mhsbtp3xTngEgFtPVCMQTnuuNtszbtHnMHGxfPntz8gEqfKFjHrM1LSCkWxuiYx92Nj7EHFY5vnM7\n\n    const link = new URL(\n        `https://explorer.ergoplatform.com/payment-request?address=${address}&amount=${\n            amount / 1000000000\n        }`,\n    );\n\n    // TODO: !!! Countdown and show minutes\n    return (\n        <PaymentGateDiv>\n            <QRCode {...{ link }} />\n            Pay {amount / 1000000000} ERG to address{' '}\n            <a href={link.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                {address}\n            </a>\n            in {dueTime} seconds.\n            {/*<button\n                onClick={async () => {\n                    const status = await getStatus();\n                    if (status) {\n                        alert(`Payed`)!;\n                    }\n                }}\n            ></button>*/}\n        </PaymentGateDiv>\n    );\n}\n\nconst PaymentGateDiv = styled.div`\n    font-size: 11px;\n    width: 500px;\n`;\n","import { jsPDF } from 'jspdf';\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { IAwaitable } from './AsyncContentComponent';\n//import html2canvas from 'html2canvas';\n\ninterface IPdfPageProps extends React.PropsWithChildren<{}> {\n    createUi: (options: {\n        createPdf: () => Promise<Blob>;\n    }) => IAwaitable<JSX.Element | JSX.Element[]>;\n}\n\nexport function PdfPage(props: IPdfPageProps) {\n    const pageRef = useRef(null);\n\n    return (\n        <div>\n            {props.createUi({\n                createPdf: async () => {\n                    const doc = new jsPDF();\n\n                    // TODO: !!! Through nice html2canvas\n\n                    //const canvas = await html2canvas(pageRef!.current!);\n                    //const image = canvas.toDataURL();\n\n                    // !!! document.body.appendChild(canvas);\n\n                    //doc.addImage(image, 'JPEG', 0, 0, 210, 297);\n                    //doc.html((pageRef!.current as any).innerHTML, { x: 10, y: 10 });\n\n                    //console.log(pageRef!.current as any);\n                    //console.log((pageRef!.current as any).innerText);\n                    //doc.html((pageRef!.current as any).innerHTML, { x: 10, y: 10 });\n                    doc.text((pageRef!.current as any).innerText, 10, 10);\n\n                    return doc.output('blob');\n                },\n            })}\n            <PdfPageDiv ref={pageRef}>{props.children}</PdfPageDiv>\n        </div>\n    );\n}\n\nconst PdfPageDiv = styled.div`\n    width: ${210 * 2}px;\n    height: ${297 * 2}px;\n    border: 2px solid #009edf;\n\n    background-color: white;\n    color: black;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nexport type IUploadZoneProps = React.PropsWithChildren<{\n    clickable?: boolean;\n    onFilesOver?: (isFileOver: boolean) => void;\n    onFiles: (droppedFiles: File[]) => void;\n}>;\n\n// TODO: !!! Use hooks and functional coponent ONLY in whole project\n\nexport class UploadZone extends React.Component<IUploadZoneProps> {\n    render() {\n        const {\n            children,\n            onFiles: onFile,\n            onFilesOver: onFileOver,\n            clickable,\n        } = this.props;\n        const onFileOverMaybe = (isFileOver: boolean) => {\n            if (onFileOver) {\n                onFileOver(isFileOver);\n            }\n        };\n\n        let uploadClick: () => void;\n\n        return (\n            <UploadZoneDiv\n                onClick={() => {\n                    if (clickable) {\n                        uploadClick();\n                    }\n                }}\n                onDragEnter={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDragOver={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(true);\n                }}\n                onDragExit={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(false);\n                }}\n                onDragEnd={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDrop={(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    onFileOverMaybe(false);\n\n                    const files = Array.from(event.dataTransfer.files); // TODO: Maybe there should be event.dataTransfer.items handler\n                    onFile(files);\n                }}\n            >\n                <input\n                    type=\"file\"\n                    ref={(element) => {\n                        if (element) {\n                            uploadClick = () => {\n                                onFileOverMaybe(true);\n                                (element as HTMLInputElement).click();\n                            };\n                        }\n                    }}\n                    onChange={(event) => {\n                        if (!event || !event.target || !event.target.files)\n                            return;\n                        onFile(Array.from(event.target.files));\n                    }}\n                />\n\n                {children}\n            </UploadZoneDiv>\n        );\n    }\n}\n\nconst UploadZoneDiv = styled.div`\n    width: ${210}px;\n    height: ${297}px;\n    padding: 10px;\n    border: 5px dashed #009edf;\n\n    input {\n        display: none;\n    }\n`;\n","export function readFile(file: File | Blob): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', (event) =>\n            resolve(event.target!.result as ArrayBuffer),\n        );\n        reader.addEventListener('error', reject);\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n","import { readFile } from './readFile';\n\nexport async function getAsByteArray(file: File | Blob): Promise<Uint8Array> {\n    return new Uint8Array(await readFile(file));\n}\n","export function uint8ArrayToHex(uint8Array: Uint8Array) {\n    return [...uint8Array].map((x) => x.toString(16).padStart(2, '0')).join('');\n}\n","// @ts-ignore: no typings\nimport { blake2bFinal, blake2bInit, blake2bUpdate } from 'blakejs';\nimport { getAsByteArray } from '../utils/getAsByteArray';\nimport { uint8ArrayToHex } from '../utils/uint8ArrayToHex';\n\nexport async function blake2b256(input: File | Blob): Promise<string> {\n    const KEY = null; // optional key\n    const OUTPUT_LENGTH = 32; // bytes\n    const context = blake2bInit(OUTPUT_LENGTH, KEY);\n\n    // each time you get a byte array from the stream:\n    blake2bUpdate(context, await getAsByteArray(input));\n\n    // finally, once the stream has been exhausted\n    const hashUint8Array = blake2bFinal(context);\n    // returns a 64-byte hash, as a Uint8Array\n\n    const hash = uint8ArrayToHex(hashUint8Array);\n\n    return hash;\n}\n","import { IOracle } from './_IOracle';\n\nexport abstract class AbstractBlockcyptherOracle\n    implements IOracle<{ hash: string }>\n{\n    public abstract name: string;\n    public abstract title: string;\n\n    public dataTitles = { hash: 'Current block hash' };\n    public ttl = -1;\n\n    public async getData() {\n        const response = await fetch(\n            `https://api.blockcypher.com/v1/${this.name.toLowerCase()}/main` /*`https://blockchain.info/latestblock`*/,\n            /*{ mode: 'no-cors' }*/\n        );\n        // console.log({ response });\n        const body = await response.json();\n\n        if (body.error) {\n            throw new Error(body.error);\n        }\n\n        const { hash } = body;\n        return { hash };\n    }\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class BitcoinOracle extends AbstractBlockcyptherOracle {\n    public name = 'BTC';\n    public title = 'Bitcoin';\n}\n","import { IOracle } from './_IOracle';\n\nexport class DateOracle implements IOracle<{ date: string; time: string }> {\n    public name = 'DATE';\n    public title = 'Current';\n    public ttl = 1;\n\n    public dataTitles = { date: 'date', time: 'time' };\n\n    public getData() {\n        const date = new Date();\n        return {\n            date: `${date.getUTCFullYear()}-${('0' + date.getUTCMonth()).slice(\n                -2,\n            )}-${('0' + date.getUTCDate()).slice(-2)}`,\n            time: `${('0' + date.getUTCHours()).slice(-2)}:${(\n                '0' + date.getUTCMinutes()\n            ).slice(-2)}:${('0' + date.getUTCSeconds()).slice(-2)}`,\n        };\n    }\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class EthereumOracle extends AbstractBlockcyptherOracle {\n    public name = 'ETH';\n    public title = 'Ethereum';\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class LitecoinOracle extends AbstractBlockcyptherOracle {\n    public name = 'LTC';\n    public title = 'Litecoin';\n}\n","import RssParser from 'rss-parser';\nimport { IOracle } from './_IOracle';\n\nexport class NytimesOracle implements IOracle<{ firstTitle: string }> {\n    public name = 'NYTIMES';\n    public title = 'The New York Times';\n    public ttl = -1;\n\n    public dataTitles = { firstTitle: 'first title' };\n\n    public async getData() {\n        const rssParser = new RssParser();\n        const feed = await rssParser.parseURL(\n            `https://rss.nytimes.com/services/xml/rss/nyt/World.xml`,\n        );\n\n        // console.log({ feed });\n\n        return {\n            firstTitle: feed.items[0].title as string,\n        };\n    }\n}\n","import { ConfigChecker } from 'configchecker';\n///* tslint:disable:no-var-requires */\n//const packageJson = require('../package.json');\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n\nconst config = ConfigChecker.from(process.env);\n\n// TODO - add testnet/mainnet switch\n// TODO - add config for ergo explorer url and subdomains for testnet/mainnet variant\n\nexport const ERGO_ASSEMBLER_URL = config\n    .get(\n        'REACT_APP_ERGO_ASSEMBLER_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url()\n    // TODO: .checkHttps()\n    // TODO: .checkNativePort()\n    // TODO: universal .check() in configchecker\n    .required().value!;\n\nexport const BUILD_DETAILS_URL = config\n    .get(\n        'REACT_APP_BUILD_DETAILS_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url().value;\n\n/**\n * TODO: This is not working with GitHub actions.\n */\nexport const BUILD_DATE = config\n    .get(\n        'REACT_APP_BUILD_DATE' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .date().value;\n","import { ERGO_ASSEMBLER_URL } from '../config';\nimport {\n    ergo_scala_script,\n    ergo_script_address,\n} from '../interfaces/stringTypes';\n\n/**\n * Copiles source in scala to Ergo3 adress format\n * @param source in scala\n */\nexport async function compileErgoScript({\n    script,\n}: {\n    script: ergo_scala_script;\n}): Promise<{ address: ergo_script_address }> {\n    const body = JSON.stringify(script.trim())\n        // TODO: !!! Is this required\n        .split('^\\n')\n        .join('\\n')\n        .split('\\n\\n')\n        .join('\\n');\n\n    const url = `${ERGO_ASSEMBLER_URL.href}compile`;\n    const compilerResponse = await fetch(url, {\n        method: 'POST',\n        body,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }).catch(() => {\n        throw new Error(`Failed to fetch compile service on \"${url}\".`);\n    });\n\n    const compilerResponseBody = await compilerResponse.json();\n\n    if (compilerResponseBody.success === false) {\n        throw new Error(\n            `Failed to compile Ergo script:\\n${compilerResponseBody.detail}`,\n        );\n    }\n\n    return compilerResponseBody;\n}\n","import { ergo_scala_script, string_href } from '../interfaces/stringTypes';\n\nexport async function createScript<T extends { script: string_href }>(\n    options: T,\n): Promise<{ script: ergo_scala_script }> {\n    const response = await fetch(options.script);\n    let script = await response.text();\n\n    // console.log({ script });\n\n    for (const [key, value] of Object.entries(options).filter(\n        // tslint:disable-next-line:no-shadowed-variable\n        ([key]) => key !== 'script',\n    )) {\n        const scriptArray = script.split(`$${key}`);\n        if (scriptArray.length === 1) {\n            throw new Error(\n                `Could not find param \"${key}\" in the script \"${options.script}\"`,\n            );\n        }\n        script = scriptArray.join(value);\n    }\n\n    // TODO: Probbably extract function replaceParams\n\n    const match = script.match(/\\$[a-zA-Z0-9]+/g);\n    if (match) {\n        throw new Error(\n            `Missing params ${match\n                .map((param) => `\"${param.substring(1)}\"`)\n                .join(', ')} for the script \"${options.script}\".`,\n        );\n    }\n\n    return { script };\n}\n","export async function getCurrentBlockchainHeight(): Promise<number> {\n\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/info`,\n    );\n\n    const body = await response.json();\n\n    return body.height;\n}\n","import { ergo_wallet_address } from '../interfaces/stringTypes';\n\n/**\n * TODO: !!! Rename to valid and add ergo\n */\nexport async function isUserAddressCorrect(\n    userAddress: ergo_wallet_address,\n): Promise<boolean> {\n    // TODO: !!! Implement, value is hardcoded\n    return true;\n}\n","import { ergo_format, string_hex } from '../../../interfaces/stringTypes';\n\n/**\n *\n * @param hex string\n * @returns ergo format string used for example in R8\n */\nexport function hexToErgoFormat(hex: string_hex): ergo_format {\n    // TODO: !!! Unhardcode length of ergo format string\n    return `0e20${hex}`;\n}\n","import { ergo_format, string_url } from '../../../interfaces/stringTypes';\nimport { convertToHex } from '../../../utils/convertToHex';\n\n/**\n *\n * @param url string\n * @returns ergo format string used for example in R8\n */\nexport function urlToErgoFormat(url: string_url): ergo_format {\n    return `0e${url.length.toString(16)}${convertToHex(url)}`;\n}\n","import { string_hex } from \"../interfaces/stringTypes\";\n\n\nexport function convertToHex(str: string): string_hex {\n    let hex = '';\n    for (let i = 0; i < str.length; i++) {\n        hex += '' + str.charCodeAt(i).toString(16);\n    }\n    return hex;\n}\n","import { ERGO_ASSEMBLER_URL } from '../config';\nimport {\n    ergo_script_address,\n    ergo_wallet_address,\n    nanoerg,\n    seconds,\n    string_hex,\n} from '../interfaces/stringTypes';\nimport { hexToErgoFormat } from './ergoFormat/hex/hexToErgoFormat';\nimport { urlToErgoFormat } from './ergoFormat/url/urlToErgoFormat';\n\n/**\n * TODO: !!! Probbably rename to something like followPaymentRequest\n */\nexport async function sendFollowRequest({\n    compiledSmartContractAddress,\n    userAddress,\n    sigmaStampProviderAddress,\n    documentHashInHex,\n    ergsSendTogetherWithNFT,\n    ergsFeeForSigmaStampService,\n    mintingFee,\n}: {\n    compiledSmartContractAddress: ergo_script_address;\n    userAddress: ergo_wallet_address;\n    /**\n     * TODO: !!! Is it ergo_script_address OR ergo_wallet_address\n     */\n    sigmaStampProviderAddress: ergo_script_address;\n    documentHashInHex: string_hex;\n    ergsSendTogetherWithNFT: nanoerg;\n    ergsFeeForSigmaStampService: nanoerg;\n    mintingFee: nanoerg;\n}): Promise<{\n    amount: nanoerg;\n    dueTime: seconds /* TODO: is it really seconds */;\n\n    /**\n     * TODO: !!! Probbably do with some RxJS array to the consumer\n     */\n    isPayed(): Promise<boolean>;\n}> {\n    const amount: nanoerg =\n        ergsSendTogetherWithNFT + ergsFeeForSigmaStampService + mintingFee;\n\n    const requestBody = {\n        address: compiledSmartContractAddress,\n        returnTo: userAddress,\n        startWhen: { erg: amount },\n        txSpec: {\n            requests: [\n                {\n                    ergValue: ergsSendTogetherWithNFT,\n                    address: userAddress,\n                    name: 'SigmaStampNFT',\n                    amount: 1,\n                    decimals: 0,\n                    description:\n                        'Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.',\n                    registers: {\n                        R7: '0e0201de',\n                        R8: hexToErgoFormat(documentHashInHex),\n                        R9: urlToErgoFormat(\n                            // TODO: !!! unhardcode address (What hash there should be Is it documentHashInHex)\n                            `http://sigmastamp.ml/verify?hash=a16d5705c031866f5c5dd1ba39e43538193b45718af5a50a115e1c8d67c209cd`,\n                        ),\n                    },\n                },\n                {\n                    value: ergsFeeForSigmaStampService,\n                    address: sigmaStampProviderAddress,\n                },\n            ],\n            fee: mintingFee,\n            inputs: ['$userIns'],\n            dataInputs: [],\n        },\n    };\n\n    const followResponse = await fetch(`${ERGO_ASSEMBLER_URL.href}follow`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n    });\n\n    const followResponseBody = await followResponse.json();\n    const { id: transactionId, dueTime } = followResponseBody;\n\n    return {\n        amount,\n        dueTime,\n        async isPayed() {\n            // Loop\n            const watchResponse = fetch(\n                `${ERGO_ASSEMBLER_URL.href}result/${transactionId}`,\n            );\n            const watchResponseBody = await followResponse.json();\n            const {\n                /*id,*/ tx,\n                detail /* pending, returning, mined, success, timeout, returnFailed */,\n            } = followResponseBody;\n\n            console.log({ watchResponse, watchResponseBody, tx });\n\n            if (detail === 'success') {\n                // !!! And now take tx and create big certificate\n\n                return true;\n            }\n\n            return false;\n        },\n    };\n}\n\n/*\nTODO: Instructions from Martin how to fix a follow request\n\n\nR9 nema vyzera tak ako vyzera\nAni R8\n\n---\n\nMajme Blake2b-256 bitovy hash v HEX formate napriklad:\n4d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\n\nR8 bude obsahovat TYP_DAT---DLZKU_DAT_V_HEX---DATA_V_HEX (pricom miesto --- tam nie je nic, len to ide za sebou)\nTyp dat je 0e\nDlzka dat je 20 [hexa] (kedze to je 20hex == 32 dec -> 32 * 8 (pretoze 1byte = 8bit) = 256 a nas hash je prave 256bitovy)\nNo a samotne data budu ten hash cize: 4d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\n\nCize v R8 bude:\n\"R8\": \"0e204d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\"\nKedze je dlzka hashu stabilna a aj typ dat tak to mozes zobrat jednoducho tak ze pred hex prezentaciu hashu tj napr \"4d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\" vlozis \"0e20\"\nCize to tam hardcodnes\n\n----\n\nR9 bude obsahovat rovnakym sposobom encodovane data v ktorych bude URL\nCize 0e na zaciatok ako typ\nPotom XY kde XY je hexa hodnota urcuju kolko bytov dat bude nasledovat\nA nasledne ascii znaky url prevedene na hexa\nNa to som si vtedy pre seba napisal jednoduchy skript s nazvom \"string_to_ergobytes.py\"\n\n```\n#!/usr/bin/env python3\n\nimport sys\nimport base58\nimport hashlib\n\ndef print_usage(binary_name):\n\tprint(\"python ./\" + binary_name + \" todo\")\n\tprint(\"\\tWhere todo\")\n\nif len(sys.argv) != 2:\n\tprint_usage(sys.argv[0])\n\tsys.exit(1)\n\ninput = sys.argv[1]\n\n\ninput_len = len(input)\n\nresult = \"0e\" + '{:02x}'.format(input_len) + input.encode(\"utf-8\").hex()\n\nprint(result)\n\nsys.exit(0)\n```\n\n\ntie includes na base58 a aj hashlib mozes vyhodit, tie mi tam ostali z ineho ergopython toolu, ktory som vyrabal...\n\na spustis to len ako\n\npython ./string_to_ergobytes.py \"https://www.sigmastamp.ml/verify/blabla...\"\n\nTym si odskusat ako ma ta url vyzerat encodovana aby si mohol napisal JS ekvivalent toho\n\nPotom by to uz vsetko malo ist :)\n\n*/\n","import {\n    ergo_script_address,\n    ergo_wallet_address,\n    nanoerg,\n    seconds,\n} from '../interfaces/stringTypes';\nimport { compileErgoScript } from './compileErgoScript';\nimport { createScript } from './createScript';\nimport { getCurrentBlockchainHeight } from './getCurrentBlockchainHeight';\nimport { isUserAddressCorrect } from './isUserAddressCorrect';\nimport { sendFollowRequest } from './sendFollowRequest';\n\ninterface ICreateSigmaStampNft {\n    documentHashInBase64: string;\n    documentHashInHex: string;\n    userAddress: ergo_wallet_address;\n}\n\nexport async function createSigmaStampNft({\n    userAddress,\n    documentHashInBase64,\n    documentHashInHex,\n}: ICreateSigmaStampNft): Promise<{\n    amount: nanoerg;\n    address: ergo_script_address;\n    dueTime: seconds;\n    isPayed(): Promise<boolean>;\n}> {\n    if (!(await isUserAddressCorrect(userAddress))) {\n        throw new Error(`User address \"${userAddress}\" is not correct.`);\n    }\n\n    const mintingFee = 20000000; /* TODO: User settable */\n    const ergsSendTogetherWithNFT = 100000000; /* TODO: User settable */\n    const ergsFeeForSigmaStampService = 100000000; /* Our fee */\n    const sigmaStampProviderAddress =\n        '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV';\n    const assetTypeValue = 'Ad4=';\n    const returnTransactionFee = 10000000;\n\n    /**\n     * TODO: !!! unhardcode address\n     */\n    const sigmaStampAssemblerNodeAddr =\n        '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV';\n    const refundHeightThreshold = (await getCurrentBlockchainHeight()) + 10;\n\n    console.log(\n        JSON.stringify({\n            ergsSendTogetherWithNFT,\n            userAddress,\n            ergsFeeForSigmaStampService,\n            sigmaStampProviderAddress,\n            assetTypeValue,\n            documentHashInBase64,\n            returnTransactionFee,\n            sigmaStampAssemblerNodeAddr,\n            refundHeightThreshold,\n        }),\n    );\n\n    const { script } = await createScript({\n        script: '/scripts/sigmastamp-nft.scala',\n\n        // TODO: Better names for variabiles below (replace everywhere in scala script + here):\n        ergsSendTogetherWithNFT,\n        userAddress,\n        ergsFeeForSigmaStampService,\n        sigmaStampProviderAddress,\n        assetTypeValue,\n        documentHashInBase64,\n        returnTransactionFee,\n        sigmaStampAssemblerNodeAddr,\n        refundHeightThreshold,\n    });\n\n    const { address: compiledSmartContractAddress } = await compileErgoScript({\n        script,\n    });\n\n    const { amount, dueTime, isPayed } = await sendFollowRequest({\n        compiledSmartContractAddress,\n        userAddress,\n        sigmaStampProviderAddress,\n        documentHashInHex,\n        ergsSendTogetherWithNFT,\n        ergsFeeForSigmaStampService,\n        mintingFee,\n    });\n\n    return {\n        amount,\n        address: compiledSmartContractAddress,\n        dueTime,\n        isPayed,\n    };\n}\n","import { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { AsyncContentComponent } from './components/AsyncContentComponent';\nimport { IPaymentGateProps, PaymentGate } from './components/PaymentGate';\nimport { PdfPage } from './components/PdfPage';\nimport { UploadZone } from './components/UploadZone';\nimport { blake2b256 } from './hash/blake2b256';\nimport { string_base64, string_hex } from './interfaces/stringTypes';\nimport { BitcoinOracle } from './oracles/BitcoinOracle';\nimport { DateOracle } from './oracles/DateOracle';\nimport { EthereumOracle } from './oracles/EthereumOracle';\nimport { LitecoinOracle } from './oracles/LitecoinOracle';\nimport { NytimesOracle } from './oracles/NytimesOracle';\nimport { createSigmaStampNft } from './smartcontracts/createSigmaStampNft';\nimport { hexToBase64 } from './utils/hexToBase64';\n\nconst ORACLES = [\n    new BitcoinOracle(),\n    new EthereumOracle(),\n    new LitecoinOracle(),\n    new DateOracle(),\n    new NytimesOracle(),\n];\n\ninterface IAppState {\n    files: File[];\n}\n\nexport function App() {\n    const [state, setState] = useState<IAppState>({ files: [] });\n    const [payment, setPayment] = useState<null | IPaymentGateProps>(null);\n\n    if (!payment) {\n        return (\n            <AppDiv>\n                {/*\n        <button\n          onClick={() => { console.log('test'); createCertificate() }}\n        >\n          Create document\n        </button>\n            <h1>Sigmastamp</h1>*/}\n\n                {state.files.length === 0 ? (\n                    <UploadZone\n                        onFiles={async (files) => {\n                            setState({ files });\n                            /*\n                    const file = files[0];\n\n                    const hash = await blake2b256(file);\n\n                    console.log({ files, file, hash });\n\n                    const certificateFile = createCertificate({ certificateFilename: 'certificate.pdf', hash });\n\n                    const zip = new JSZip();\n                    zip.file(file.name, file);\n                    zip.file(certificateFile.name, certificateFile);\n\n                    const zipFile = await zip.generateAsync({ type: 'blob' });\n                    saveAs(zipFile, 'certificate.zip');\n                    */\n                        }}\n                        clickable\n                    >\n                        Upload your file(s) here!\n                    </UploadZone>\n                ) : (\n                    <PdfPage\n                        createUi={({ createPdf }) => {\n                            return (\n                                <button\n                                    onClick={async () => {\n                                        const certificateFile = new File(\n                                            [await createPdf()],\n                                            'certificate1.pdf' /* TODO: Maybe add current {lastModified: 1534584790000}*/,\n                                        );\n\n                                        //saveAs(certificateFile);\n\n                                        const zip = new JSZip();\n                                        for (const file of state.files) {\n                                            zip.file(file.name, file);\n                                        }\n                                        zip.file(\n                                            certificateFile.name,\n                                            certificateFile,\n                                        );\n\n                                        const zipBlob = await zip.generateAsync(\n                                            { type: 'blob' },\n                                        );\n\n                                        const zipHash: string_hex =\n                                            await blake2b256(zipBlob);\n\n                                        const zipHashBase64: string_base64 =\n                                            await hexToBase64(zipHash);\n\n                                        saveAs(\n                                            zipBlob,\n                                            `certificate1.${zipHash.substring(\n                                                0,\n                                                5,\n                                            )}.zip`,\n                                        );\n\n                                        // TODO: !!! Nicer user input than prompt\n                                        const userAddress = prompt(\n                                            'Please fill your Ergo address',\n                                            '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV' /* !!! Unhardocde */,\n                                        );\n                                        if (!userAddress) {\n                                            return;\n                                        }\n\n                                        setPayment(\n                                            await createSigmaStampNft({\n                                                userAddress,\n                                                documentHashInBase64: zipHashBase64,\n                                                documentHashInHex: zipHash,\n                                            }),\n                                        );\n                                    }}\n                                >\n                                    Download 1st certificate\n                                </button>\n                            );\n                        }}\n                    >\n                        {state.files.map((file) => (\n                            <AsyncContentComponent\n                                key={file.name}\n                                content={async () => {\n                                    const hash = await blake2b256(file);\n                                    return (\n                                        <>\n                                            <b>Hash of {file.name}</b> is {hash}\n                                        </>\n                                    );\n                                }}\n                            />\n                        ))}\n\n                        {ORACLES.map((oracle) => (\n                            <div key={oracle.name}>\n                                <AsyncContentComponent\n                                    content={async () => {\n                                        const data = await oracle.getData();\n\n                                        return (\n                                            <>\n                                                {Object.entries(data).map(\n                                                    ([key, value]) => (\n                                                        <div key={key}>\n                                                            <b>\n                                                                {/* @ts-ignore: Object.entries is dummy and cannot pass propper index signature type */}\n                                                                {oracle.title}\n                                                                {\n                                                                    (\n                                                                        oracle as any\n                                                                    )\n                                                                        .dataTitles[\n                                                                        key\n                                                                    ]\n                                                                }\n                                                                :\n                                                            </b>\n                                                            {value}\n                                                        </div>\n                                                    ),\n                                                )}\n                                            </>\n                                        );\n                                    }}\n                                />\n                            </div>\n                        ))}\n                    </PdfPage>\n                )}\n\n                <Link to=\"/verify\" target={'_blank'}>\n                    Or verify your 1st certificate.\n                </Link>\n\n                <Link to=\"/about\">\n                    TODO: !!! Short information about Sigmastamp, version and the build (leading to the more detailed information)\n                </Link>\n            </AppDiv>\n        );\n    } else {\n        return <PaymentGate {...payment} />;\n    }\n}\n\nconst AppDiv = styled.div`\n    a {\n        color: #555;\n        font-size: 0.7em;\n    }\n`;\n","import { string_base64, string_hex } from '../interfaces/stringTypes';\n\nexport function hexToBase64(str: string_hex): string_base64 {\n    return btoa(\n        String.fromCharCode.apply(\n            null,\n            // @ts-ignore:\n            str\n                .replace(/\\r|\\n/g, '')\n                .replace(/([\\da-fA-F]{2}) ?/g, '0x$1 ')\n                .replace(/ +$/, '')\n                .split(' '),\n        ),\n    );\n}\n","import { blake2b256 } from '../hash/blake2b256';\n\nexport async function validateFirstCertificate(firstCertificate: File) {\n\n    //FIXME TODO!!! do not use this issuingBoxes endpoint - it's not working as it should\n    //It does not return all issuedBoxes so it cannot be used even in testnet not in production\n    //look into doc (https://api.ergoplatform.com/api/v1/docs/) and find replacement...\n    //\n    //use (https://api-testnet.ergoplatform.com/api/v1/tokens/search?query=SigmaStampNFT) to find UTXO boxes\n    //example result:\n    //{\"items\":[{\"id\":\"72349d20ccc448b76dce62b07b1467d674263ac08c27b3bfddcb800b710e36f3\",\"boxId\":\"6e0f329fb4d24111e9ce6d73cd6d20ecb16187d7418d40c37fa7edbb4b5f9b71\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"6b1d854d400c9c4ea2fcabdf89a3bf6a45119629269aabe69e4455a83941e213\",\"boxId\":\"f66f34b2eec994e12c13795f4bd55d0b6ceda8bc6133553581842c1a246c9a2e\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"6044f43afaacc3e32de17b9b3f67dcb19b30e43c01061d69e8430ece95f96a61\",\"boxId\":\"b2c7db24a7797a4188156e1e25775c2e61a9af8273a871eafa62424015499cea\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"6806a0f60358d1801a411602393396979f424b4122e8f178d20c363715bb494f\",\"boxId\":\"2e2c13ede2ecc1c82c674e7915f8cba1c45e5e837cf6805e3a8adf90906de41a\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"4ec483383f02146d9ccc5fbdd9a055da737172a29a87625b78a9656a74afcfd0\",\"boxId\":\"c73a67bb9da3c72a0fe29c6e7eebcd3d73cccc9e5f081b55e0ae3e4c4b9a0a16\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"2625c49fd0563d74c2a75aa12fe4e88e42648e09cd176aee131f3f5f7f6c8f7a\",\"boxId\":\"92c31ad6eba826a5c5216c1f3334c0f9ea4f480b65580a3e7cd35ce2eeaa89a9\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"31dbef164bf00db5a7168ad3b5e2fbfbba05c9d4317f9dafd58f9191ed7811d9\",\"boxId\":\"5246b1127b5ff31fad464560ec84b3e6025c67f5c9baabeb54cc7299b8392cb1\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0},{\"id\":\"0231807a412aa0271eafe454a5efd97f311098b0081be3d81bc9a20dd714c131\",\"boxId\":\"c42ed1ce4e61a1037adc3f3ad8c4c8d6148da93d971d034e59bd465ae4eec2f2\",\"emissionAmount\":1,\"name\":\"SigmaStampNFT\",\"description\":\"Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.\",\"type\":\"EIP-004\",\"decimals\":0}],\"total\":8}\n    //\n    //next for each token use its boxId and request this endpoint:\n    //(https://api-testnet.ergoplatform.com/api/v1/boxes/boxId) [replace boxId with value]\n    //example result:\n    //{\"boxId\":\"c42ed1ce4e61a1037adc3f3ad8c4c8d6148da93d971d034e59bd465ae4eec2f2\",\"transactionId\":\"d49e45663c10f736417d4cafef3645694e2b7ee18df52597129e730ffe295a3c\",\"blockId\":\"d9c3e34b80d88497f755d561fb79e405ec08fd05c9326303e9c5105c0cb9673a\",\"value\":100000000,\"index\":0,\"globalIndex\":191862,\"creationHeight\":89132,\"settlementHeight\":89134,\"ergoTree\":\"0008cd024fb96e9f0f72939a55aa7de00bb2d9c27940a4bc2131115f6197d14be2fbfb49\",\"address\":\"3WwDKYmby1UP6BhnfHqcyi9RwBRuaPt6cfXi7eHSiPuqjgWCDd5h\",\"assets\":[{\"tokenId\":\"0231807a412aa0271eafe454a5efd97f311098b0081be3d81bc9a20dd714c131\",\"index\":0,\"amount\":1,\"name\":\"SigmaStampNFT\",\"decimals\":0,\"type\":\"EIP-004\"}],\"additionalRegisters\":{\"R5\":{\"serializedValue\":\"0e6f50726f6f66206f66206578697374656e6365206f6620646f63756d656e74207769746820426c616b6532622d32353620686173682073706563696669656420696e20523820726567697374657220647572696e67206d696e74696e67206f662074686973204e465420746f6b656e2e\",\"sigmaType\":\"Coll[SByte]\",\"renderedValue\":\"50726f6f66206f66206578697374656e6365206f6620646f63756d656e74207769746820426c616b6532622d32353620686173682073706563696669656420696e20523820726567697374657220647572696e67206d696e74696e67206f662074686973204e465420746f6b656e2e\"},\"R6\":{\"serializedValue\":\"0e0130\",\"sigmaType\":\"Coll[SByte]\",\"renderedValue\":\"30\"},\"R8\":{\"serializedValue\":\"0e203bc9e07fbfc401fd8c11cd860ece87d19f34d2bec2ad4934a068ae862c1e7d4a\",\"sigmaType\":\"Coll[SByte]\",\"renderedValue\":\"3bc9e07fbfc401fd8c11cd860ece87d19f34d2bec2ad4934a068ae862c1e7d4a\"},\"R7\":{\"serializedValue\":\"0e0201de\",\"sigmaType\":\"Coll[SByte]\",\"renderedValue\":\"01de\"},\"R9\":{\"serializedValue\":\"0e61687474703a2f2f7369676d617374616d702e6d6c2f7665726966793f686173683d61313664353730356330333138363666356335646431626133396534333533383139336234353731386166356135306131313565316338643637633230396364\",\"sigmaType\":\"Coll[SByte]\",\"renderedValue\":\"687474703a2f2f7369676d617374616d702e6d6c2f7665726966793f686173683d61313664353730356330333138363666356335646431626133396534333533383139336234353731386166356135306131313565316338643637633230396364\"},\"R4\":{\"serializedValue\":\"0e0d5369676d615374616d704e4654\",\"sigmaType\":\"Coll[SByte]\",\"renderedValue\":\"5369676d615374616d704e4654\"}},\"spentTransactionId\":null,\"mainChain\":true}\n    //\n    //check whether R8 value is equal to our hash if it is make sure it's the first NFT with this hash in the blockchain\n    //(this would mean that we had to ensure for example by asking explorer devs on discord or checking explorer code, that the first tokens/search endpoint is returning data ordered from oldest to newest)\n    //otherwise skip this box and continue searching\n    //be aware that transaction id property name has changed in the api v1 result compared to v0 result !!!\n    //\n    // TODO also check emissionAmount == 1 (so we take into consideration only NFT tokens)\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v0/assets/issuingBoxes`,\n    );\n    const body = await response.json();\n\n    const hash = await blake2b256(firstCertificate);\n\n    for (const item of body.items) {\n        if (item.additionalRegisters.R8 === `0e20${hash}`) {\n            return item;\n            // TODO: probbably last not first\n        }\n    }\n\n    return null;\n}\n\nexport async function getTransactionTime(txId: string) {\n\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/transactions/${txId}`,\n    );\n    const body = await response.json();\n    console.log('getTransactionTime', body);\n    const timestamp = body.timestamp;\n    const tokenId = body.outputs[0].assets[0].tokenId;\n\n    return { timestamp, tokenId };\n}\n\nexport async function getAssetHolders(tokenId: string) {\n    // TODO FIXME!!! find api v1 equivalent !!!\n    // possible replacement is to use:\n    // (https://api-testnet.ergoplatform.com/api/v1/assets/search/byTokenId?query=tokenId)\n    // this will return all boxes (even spent ones) which has holded or still hold tokenId\n    // because we use NFT it means that the last box will be box of current holder\n    // than use this api endpoint:\n    // (https://api-testnet.ergoplatform.com/api/v1/boxes/boxId)\n    // to retrieve address of current NFT holder\n    // todo - ask on discord whether there is a better way or we can stay with v0 endpoint\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v0/addresses/assetHolders/${tokenId}`,\n    );\n    const body = await response.json();\n    console.log('getAssetHolders', body);\n    return body;\n}\n","import JSZip from 'jszip';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { PdfPage } from './components/PdfPage';\nimport { UploadZone } from './components/UploadZone';\nimport { blake2b256 } from './hash/blake2b256';\nimport {\n    getAssetHolders,\n    getTransactionTime,\n    validateFirstCertificate,\n} from './smartcontracts/validateFirstCertificate';\n\nexport function VerifyApp() {\n    const [files, setFiles] = useState<any>([]);\n    const [verification, setVerification] = useState<any>(null);\n\n    if (!verification) {\n        return (\n            <VerifyAppDiv>\n                <UploadZone\n                    onFiles={async (droppedFiles) => {\n                        const firstCertificate = droppedFiles[0];\n                        setFiles([droppedFiles[0]]);\n\n                        const droppedFileVerification = await validateFirstCertificate(\n                            firstCertificate,\n                        );\n\n                        if (!droppedFileVerification) {\n                            alert(\n                                `Your 1st certificate is still not validated through Ergo blockchain.`,\n                            );\n                            // TODO - consider skipping the rest because extraction of txId from null in\n                            // the following statements will result in error\n                        }\n\n                        const { txId } = droppedFileVerification;\n\n                        const { timestamp, tokenId } = await getTransactionTime(\n                            txId,\n                        );\n                        const currentHolder = await getAssetHolders(tokenId);\n\n                        setVerification({\n                            ...droppedFileVerification,\n                            timestamp,\n                            tokenId,\n                            currentHolder,\n                        });\n                        console.log(droppedFileVerification);\n                    }}\n                    clickable\n                >\n                    Upload your 1st certificate.\n                </UploadZone>\n                <Link to=\"/\" target={'_blank'}>\n                    Or create your 1st certificate.\n                </Link>\n            </VerifyAppDiv>\n        );\n    } else {\n        return (\n            <PdfPage\n                createUi={({ createPdf }) => {\n                    return (\n                        <button\n                            onClick={async () => {\n                                const certificateFile = new File(\n                                    [await createPdf()],\n                                    'certificate2.pdf' /* TODO: Maybe add current {lastModified: 1534584790000}*/,\n                                );\n\n                                //saveAs(certificateFile);\n\n                                const zip = new JSZip();\n                                for (const file of files) {\n                                    zip.file(file.name, file);\n                                }\n                                zip.file(certificateFile.name, certificateFile);\n\n                                const zipBlob = await zip.generateAsync({\n                                    type: 'blob',\n                                });\n\n                                const zipHash = await blake2b256(zipBlob);\n                                saveAs(\n                                    zipBlob,\n                                    `certificate2.${zipHash.substring(\n                                        0,\n                                        5,\n                                    )}.zip`,\n                                );\n                            }}\n                        >\n                            Download 2nd certificate\n                        </button>\n                    );\n                }}\n            >\n                <b>txId:</b> {verification.txId}\n                <br />\n                <b>timestamp:</b> {verification.timestamp}\n                <br />\n                <b>tokenId:</b> {verification.tokenId}\n                <br />\n                <b>current holder:</b> {verification.currentHolder.join(', ')}\n            </PdfPage>\n        );\n    }\n}\n\nconst VerifyAppDiv = styled.div`\n    a {\n        color: #555;\n        font-size: 0.7em;\n    }\n`;\n","import { createHashHistory } from 'history';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { App } from './App';\nimport { BUILD_DATE, BUILD_DETAILS_URL, VERSION } from './config';\nimport './index.css';\nimport { VerifyApp } from './VerifyApp';\n\nconsole.info(\n    `%c📜 Sigmastamp version ${VERSION}` +\n        (!BUILD_DATE ? `` : ` build at ${BUILD_DATE.toISOString()}`) +\n        (!BUILD_DETAILS_URL\n            ? ``\n            : ` view build details ${BUILD_DETAILS_URL.href}`),\n    `background: #009EDD; color: white; font-size: 1.1em; font-weight: bold; padding: 5px; border-radius: 3px;`,\n);\n\nconst history = createHashHistory();\n\nconst HeaderElement = styled.header`\n    h1 {\n        font-size: 1em;\n    }\n`;\n\nReactDOM.render(\n    <React.StrictMode>\n        <HeaderElement>\n            <div id=\"sigmastamp_heading_div\">\n                <img className=\"logo_img\" alt=\"sigmastamp logo\" src=\"sigmastamp_logo.svg\"/>\n                <h1>SigmaStamp</h1>\n            </div>\n        </HeaderElement>\n        <Router {...{ history }}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <App />\n                </Route>\n                <Route exact path=\"/verify\">\n                    <VerifyApp />\n                </Route>\n            </Switch>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}