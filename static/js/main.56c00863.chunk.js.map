{"version":3,"sources":["components/Loader.tsx","components/AsyncContentComponent.tsx","components/QRCode.tsx","components/PaymentGate.tsx","components/PdfPage.tsx","components/UploadZone.tsx","utils/readFile.tsx","utils/getAsByteArray.tsx","utils/uint8ArrayToHex.tsx","hash/blake2b256.ts","oracles/_AbstractBlockcyptherOracle.ts","oracles/BitcoinOracle.ts","oracles/DateOracle.ts","oracles/EthereumOracle.ts","oracles/LitecoinOracle.ts","oracles/NytimesOracle.ts","config.ts","smartcontracts/compileErgoScript.ts","smartcontracts/createScript.ts","smartcontracts/getCurrentBlockchainHeight.ts","smartcontracts/isUserAddressCorrect.ts","smartcontracts/createSigmaStampNft.ts","App.tsx","smartcontracts/validateFirstCertificate.ts","VerifyApp.tsx","index.tsx"],"names":["Loader","LoaderDiv","className","styled","div","AsyncContentComponent","loading","content","React","state","setState","a","factorable","QRCode","props","href","link","target","rel","ref","canvasElement","options","color","QRCodeGenerator","toCanvas","error","console","PaymentGate","amount","address","dueTime","URL","PaymentGateDiv","PdfPage","pageRef","useRef","createUi","createPdf","doc","jsPDF","text","current","innerText","output","PdfPageDiv","children","UploadZone","uploadClick","this","onFile","onFiles","onFileOver","onFilesOver","clickable","onFileOverMaybe","isFileOver","UploadZoneDiv","onClick","onDragEnter","event","stopPropagation","preventDefault","onDragOver","onDragExit","onDragEnd","onDrop","files","Array","from","dataTransfer","type","element","click","onChange","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsArrayBuffer","getAsByteArray","Uint8Array","uint8ArrayToHex","uint8Array","map","x","toString","padStart","join","blake2b256","input","context","blake2bInit","blake2bUpdate","hashUint8Array","blake2bFinal","hash","AbstractBlockcyptherOracle","name","title","dataTitles","ttl","fetch","toLowerCase","response","json","body","Error","BitcoinOracle","DateOracle","date","time","Date","getUTCFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","EthereumOracle","LitecoinOracle","NytimesOracle","firstTitle","rssParser","RssParser","parseURL","feed","items","VERSION","version","config","ConfigChecker","process","ERGO_ASSEMBLER_URL","get","url","required","value","BUILD_DETAILS_URL","BUILD_DATE","compileErgoScript","script","JSON","stringify","trim","split","method","headers","catch","compilerResponse","compilerResponseBody","success","detail","createScript","Object","entries","filter","key","scriptArray","length","match","param","substring","getCurrentBlockchainHeight","isUserAddressCorrect","userAddress","createSigmaStampNft","documentHashInBase64","documentHashInHex","mintingFee","ergsSendTogetherWithNFT","ergsFeeForSigmaStampService","sigmaStampProviderAddress","assetTypeValue","returnTransactionFee","sigmaStampAssemblerNodeAddr","refundHeightThreshold","log","compiledSmartContractAddress","ergoAmountRequired","documentHashInErgoFormat","verifyLinkInErgoFormat","requestBody","returnTo","startWhen","erg","txSpec","requests","ergValue","decimals","description","registers","R7","R8","R9","fee","inputs","dataInputs","followResponse","followResponseBody","id","getStatus","watchResponse","watchResponseBody","tx","ORACLES","App","useState","payment","setPayment","AppDiv","File","certificateFile","zip","JSZip","generateAsync","zipBlob","zipHash","saveAs","prompt","oracle","getData","data","to","validateFirstCertificate","firstCertificate","item","additionalRegisters","getTransactionTime","txId","timestamp","summary","tokenId","outputs","assets","getAssetHolders","VerifyApp","setFiles","verification","setVerification","hodlers","VerifyAppDiv","droppedFiles","droppedFileVerification","alert","info","toISOString","history","createHashHistory","HeaderElement","header","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"gbAGO,SAASA,IACZ,OACI,cAACC,EAAD,UAII,qBAAKC,UAAU,cAK3B,IAAMD,EAAYE,IAAOC,IAAV,0BC0BR,SAASC,EAAT,GAG0B,IAF7BC,EAE4B,EAF5BA,QACAC,EAC4B,EAD5BA,QAEA,EAA0BC,WAA4C,CAClED,QAASD,GAAW,cAACN,EAAD,MADxB,mBAAOS,EAAP,KAAcC,EAAd,KAcA,OAVAF,aAAgB,WAKZ,OAJA,sBAAC,sBAAAG,EAAA,kEACGD,EADH,SAvCqB,oBADJE,EAyCmBL,GAvC7BK,IAEDA,EAoCN,yBACcL,QADd,sDAxCF,IAAmBK,IAwCjB,MAAD,GAIO,eAGR,CAACL,IAEG,mCAAGE,EAAMF,U,wBCnDb,SAASM,EAAOC,GACnB,IAAMC,EAAOD,EAAME,KAAKD,KAExB,OACI,mBAASA,OAAQE,OAAO,SAASC,IAAI,sBAArC,SACI,wBACIC,IAAK,SAACC,GACF,GAAKA,EAAL,CAKA,IAAMC,EAA+B,eAAQP,UACrCO,EAAgBN,KACxBM,EAAQC,MAAQD,EAAQC,OAAS,GAEjCC,IAAgBC,SACZJ,EACAL,EACAM,GACA,SAACI,GACOA,GACAC,QAAQD,MAAMA,YClBvC,SAASE,EAAT,GAIgB,IAHnBC,EAGkB,EAHlBA,OACAC,EAEkB,EAFlBA,QACAC,EACkB,EADlBA,QAIMd,EAAO,IAAIe,IAAJ,oEACoDF,EADpD,mBACsED,IAInF,OACI,eAACI,EAAD,WACI,cAACnB,EAAD,CAAcG,SADlB,OAESY,EAFT,kBAEgC,IAC5B,mBAAGb,KAAMC,EAAKD,KAAME,OAAO,SAASC,IAAI,sBAAxC,SACKW,IAJT,MAMQC,EANR,eAmBR,I,EAAME,EAAiB7B,IAAOC,IAAV,qE,SC/Bb,SAAS6B,EAAQnB,GACpB,IAAMoB,EAAUC,iBAAO,MAEvB,OACI,gCACKrB,EAAMsB,SAAS,CACZC,UAAU,WAAD,4BAAE,4BAAA1B,EAAA,6DACD2B,EAAM,IAAIC,KAeZC,KAAMN,EAASO,QAAgBC,UAAW,GAAI,IAhB3C,kBAkBAJ,EAAIK,OAAO,SAlBX,2CAAF,kDAAC,KAqBd,cAACC,EAAD,CAAYzB,IAAKe,EAAjB,SAA2BpB,EAAM+B,cAK7C,I,EAAMD,EAAazC,IAAOC,IAAV,qJACH,IACC,K,gCCnCD0C,EAAb,4JACI,WACI,IAYIC,EAZJ,EAKIC,KAAKlC,MAJL+B,EADJ,EACIA,SACSI,EAFb,EAEIC,QACaC,EAHjB,EAGIC,YACAC,EAJJ,EAIIA,UAEEC,EAAkB,SAACC,GACjBJ,GACAA,EAAWI,IAMnB,OACI,eAACC,EAAD,CACIC,QAAS,WACDJ,GACAN,KAGRW,YAAa,SAACC,GACVA,EAAMC,kBACND,EAAME,kBAEVC,WAAY,SAACH,GACTA,EAAMC,kBACND,EAAME,iBACNP,GAAgB,IAEpBS,WAAY,SAACJ,GACTA,EAAMC,kBACND,EAAME,iBACNP,GAAgB,IAEpBU,UAAW,SAACL,GACRA,EAAMC,kBACND,EAAME,kBAEVI,OAAQ,SAACN,GACLA,EAAME,iBACNF,EAAMC,kBACNN,GAAgB,GAEhB,IAAMY,EAAQC,MAAMC,KAAKT,EAAMU,aAAaH,OAC5CjB,EAAOiB,IA9Bf,UAiCI,uBACII,KAAK,OACLnD,IAAK,SAACoD,GACEA,IACAxB,EAAc,WACVO,GAAgB,GACfiB,EAA6BC,WAI1CC,SAAU,SAACd,GACFA,GAAUA,EAAM1C,QAAW0C,EAAM1C,OAAOiD,OAE7CjB,EAAOkB,MAAMC,KAAKT,EAAM1C,OAAOiD,WAItCrB,SAnEjB,GAAgCrC,aAyE1BgD,EAAgBrD,IAAOC,IAAV,qKACN,IACC,K,QCtFP,SAASsE,EAASC,GACrB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,iBAAiB,WAAW,SAACtB,GAAD,OAC/BkB,EAAQlB,EAAM1C,OAAQiE,WAE1BH,EAAOE,iBAAiB,QAASH,GAEjCC,EAAOI,kBAAkBR,MCP1B,SAAeS,EAAtB,kC,4CAAO,WAA8BT,GAA9B,SAAAhE,EAAA,kEACQ0E,WADR,SACyBX,EAASC,GADlC,wG,mCCFA,SAASW,EAAgBC,GAC5B,OAAO,YAAIA,GAAYC,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,ICIrE,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,mBAAAnF,EAAA,6DACS,KACU,GAChBoF,EAAUC,sBADM,GADV,MADT,KAMHC,gBANG,KAMWF,EANX,SAM0BX,EAAeU,GANzC,8CASGI,EAAiBC,uBAAaJ,GAG9BK,EAAOd,EAAgBY,GAZ1B,kBAcIE,GAdJ,6C,sBCHA,I,EAAeC,EAAtB,iDAGoBC,UAHpB,OAIoBC,WAJpB,OAMWC,WAAa,CAAEJ,KAAM,sBANhC,KAOWK,KAAO,EAPlB,kFASI,wGAC2BC,MAAM,kCAAD,OACU1D,KAAKsD,KAAKK,cADpB,UADhC,cACUC,EADV,gBAMuBA,EAASC,OANhC,YAMUC,EANV,QAQarF,MARb,sBASc,IAAIsF,MAAMD,EAAKrF,OAT7B,cAYY2E,EAASU,EAATV,KAZZ,kBAaW,CAAEA,SAbb,iDATJ,6DCAaY,EAAb,4MACWV,KAAO,MADlB,EAEWC,MAAQ,UAFnB,YAAmCF,GCAtBY,GAAb,iDACWX,KAAO,OADlB,KAEWC,MAAQ,UAFnB,KAGWE,IAAM,EAHjB,KAKWD,WAAa,CAAEU,KAAM,OAAQC,KAAM,QAL9C,2CAOI,WACI,IAAMD,EAAO,IAAIE,KACjB,MAAO,CACHF,KAAK,GAAD,OAAKA,EAAKG,iBAAV,aAA+B,IAAMH,EAAKI,eAAeC,OACxD,GADD,aAEE,IAAML,EAAKM,cAAcD,OAAO,IACtCJ,KAAK,GAAD,QAAM,IAAMD,EAAKO,eAAeF,OAAO,GAAvC,aACA,IAAML,EAAKQ,iBACbH,OAAO,GAFL,aAEY,IAAML,EAAKS,iBAAiBJ,OAAO,SAf/D,KCAaK,GAAb,4MACWtB,KAAO,MADlB,EAEWC,MAAQ,WAFnB,YAAoCF,GCAvBwB,GAAb,4MACWvB,KAAO,MADlB,EAEWC,MAAQ,WAFnB,YAAoCF,G,qBCCvByB,GAAb,iDACWxB,KAAO,UADlB,KAEWC,MAAQ,qBAFnB,KAGWE,KAAO,EAHlB,KAKWD,WAAa,CAAEuB,WAAY,eALtC,kFAOI,6FACUC,EAAY,IAAIC,KAD1B,SAEuBD,EAAUE,SAAV,0DAFvB,cAEUC,EAFV,yBAQW,CACHJ,WAAYI,EAAKC,MAAM,GAAG7B,QATlC,2CAPJ,6D,UCEa8B,G,OAAUC,EAEjBC,GAASC,iBAAcpE,KAAKqE,kWAErBC,GAAqBH,GAC7BI,IACG,gCAEHC,MAIAC,WAAWC,MAEHC,GAAoBR,GAC5BI,IACG,+BAEHC,MAAME,MAKEE,GAAaT,GACrBI,IACG,wBAEHzB,OAAO4B,MCtBL,SAAeG,GAAtB,mC,8CAAO,qCAAAtI,EAAA,6DACHuI,EADG,EACHA,OAIMpC,EAAOqC,KAAKC,UAAUF,EAAOG,QAE9BC,MAAM,OACN1D,KAAK,MACL0D,MAAM,QACN1D,KAAK,MAEJgD,EAZH,UAYYF,GAAmB3H,KAZ/B,oBAa4B2F,MAAMkC,EAAK,CACtCW,OAAQ,OACRzC,OACA0C,QAAS,CACL,eAAgB,sBAErBC,OAAM,WACL,MAAM,IAAI1C,MAAJ,8CAAiD6B,EAAjD,UApBP,cAaGc,EAbH,gBAuBgCA,EAAiB7C,OAvBjD,WAyBkC,KAF/B8C,EAvBH,QAyBsBC,QAzBtB,uBA0BO,IAAI7C,MAAJ,0CACiC4C,EAAqBE,SA3B7D,iCA+BIF,GA/BJ,6C,sBCRA,SAAeG,GAAtB,mC,8CAAO,WACHzI,GADG,+BAAAV,EAAA,sEAGoB+F,MAAMrF,EAAQ6H,QAHlC,cAGGtC,EAHH,gBAIgBA,EAASpE,OAJzB,OAIC0G,EAJD,qBAQwBa,OAAOC,QAAQ3I,GAAS4I,QAE/C,kBAAmB,WAAnB,wBAVD,qFAQSC,EART,KAQcpB,EARd,KAa4B,KADrBqB,EAAcjB,EAAOI,MAAP,WAAiBY,KACrBE,OAbjB,uBAcW,IAAIrD,MAAJ,gCACuBmD,EADvB,4BAC8C7I,EAAQ6H,OADtD,MAdX,QAkBCA,EAASiB,EAAYvE,KAAKkD,GAlB3B,oJAuBGuB,EAAQnB,EAAOmB,MAAM,oBAvBxB,uBAyBO,IAAItD,MAAJ,yBACgBsD,EACb7E,KAAI,SAAC8E,GAAD,iBAAeA,EAAMC,UAAU,GAA/B,QACJ3E,KAAK,MAHR,4BAGiCvE,EAAQ6H,OAHzC,OAzBP,iCAgCI,CAAEA,WAhCN,iE,sBCFA,SAAesB,KAAtB,gC,8CAAO,sBAAA7J,EAAA,+EAEI,GAFJ,4C,sBCKA,SAAe8J,GAAtB,mC,8CAAO,WACHC,GADG,SAAA/J,EAAA,gFAII,GAJJ,4C,sBCYA,SAAegK,GAAtB,mC,8CAAO,yEAAAhK,EAAA,6DACH+J,EADG,EACHA,YACAE,EAFG,EAEHA,qBACAC,EAHG,EAGHA,kBAHG,SAKSJ,GAAqBC,GAL9B,uCAMO,IAAI3D,MAAJ,wBAA2B2D,EAA3B,sBANP,cASGI,EAAa,IACbC,EAA0B,IAC1BC,EAA8B,IAC9BC,EACF,uDACEC,EAAiB,OACjBC,EAAuB,IAKvBC,EACF,uDArBD,UAsBkCZ,KAtBlC,2BAsBGa,EAtBH,KAsBkE,GAErE3J,QAAQ4J,IACJnC,KAAKC,UAAU,CACX2B,0BACAL,cACAM,8BACAC,4BACAC,iBACAN,uBACAO,uBACAC,8BACAC,2BAlCL,UAsCsBvB,GAAa,CAClCZ,OAAQ,gCAGR6B,0BACAL,cACAM,8BACAC,4BACAC,iBACAN,uBACAO,uBACAC,8BACAC,0BAlDD,wBAsCKnC,EAtCL,EAsCKA,OAtCL,UAsDqDD,GAAkB,CACtEC,WAvDD,wBAsDcqC,EAtDd,EAsDK1J,QAIF2J,EACFT,EAA0BC,EAA8BF,EACtDW,EA5DH,aA4DoCZ,GACjCa,EA7DH,mHAmEGC,EAAc,CAChB9J,QAAS0J,EACTK,SAAUlB,EACVmB,UAAW,CAAEC,IAAKN,GAClBO,OAAQ,CACJC,SAAU,CACN,CACIC,SAAUlB,EACVlJ,QAAS6I,EACTpE,KAAM,gBACN1E,OAAQ,EACRsK,SAAU,EACVC,YACI,kHACJC,UAAW,CACPC,GAAI,WACJC,GAAIb,EACJc,GAAIb,IAGZ,CACI5C,MAAOkC,EACPnJ,QAASoJ,IAGjBuB,IAAK1B,EACL2B,OAAQ,CAAC,YACTC,WAAY,KA9FjB,UAkG0BhG,MAAM,GAAD,OAAIgC,GAAmB3H,KAAvB,UAAqC,CACnEwI,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB1C,KAAMqC,KAAKC,UAAUuC,KAvGtB,eAkGGgB,EAlGH,iBA0G8BA,EAAe9F,OA1G7C,eA0GG+F,EA1GH,OA2GKC,EAAgBD,EAAhBC,GAAI/K,EAAY8K,EAAZ9K,QA3GT,kBA6GI,CACHF,OAAQ4J,EAAqB,IAC7B3J,QAAS0J,EACTzJ,UACMgL,UAJH,WAIgB,OAAD,uHAERC,EAAgBrG,MAAM,GAAD,OACpBgC,GAAmB3H,KADC,kBACa8L,IAH1B,SAKkBF,EAAe9F,OALjC,UAKRmG,EALQ,OAOFC,EAERL,EAFQK,GACRpD,EACA+C,EADA/C,OAGJnI,QAAQ4J,IAAI,CAAEyB,gBAAeC,oBAAmBC,OAEjC,YAAXpD,EAbU,0CAgBH,GAhBG,iCAmBP,GAnBO,gDAjHnB,6C,sBCAP,IAAMqD,GAAU,CACZ,IAAIlG,EACJ,IAAIY,GACJ,IAAIC,GACJ,IAAIZ,GACJ,IAAIa,IAOD,SAASqF,KACZ,MAA0BC,mBAAoB,CAAElJ,MAAO,KAAvD,mBAAOzD,EAAP,KAAcC,EAAd,KACA,EAA8B0M,mBAAmC,MAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,OAAKD,EAyJM,cAAC1L,EAAD,eAAiB0L,IAvJpB,eAACE,GAAD,WAS4B,IAAvB9M,EAAMyD,MAAMkG,OACT,cAAC,EAAD,CACIlH,QAAO,uCAAE,WAAOgB,GAAP,SAAAvD,EAAA,sDACLD,EAAS,CAAEwD,UADN,2CAAF,sDAmBPb,WAAS,EApBb,uCAyBA,eAACpB,EAAD,CACIG,SAAU,YAAoB,IAAjBC,EAAgB,EAAhBA,UACT,OACI,wBACIoB,QAAO,sBAAE,0CAAA9C,EAAA,kEACuB6M,KADvB,SAEMnL,IAFN,+BACCoL,EADD,cAGD,oBAKEC,EAAM,IAAIC,IARX,cASclN,EAAMyD,OATpB,IASL,2BAAWS,EAAqB,QAC5B+I,EAAI/I,KAAKA,EAAK2B,KAAM3B,GAVnB,qCAYL+I,EAAI/I,KACA8I,EAAgBnH,KAChBmH,GAdC,UAiBiBC,EAAIE,cACtB,CAAEtJ,KAAM,SAlBP,eAiBCuJ,EAjBD,iBAqBiBhI,EAClBgI,GAtBC,WAqBCC,EArBD,OAwBLC,iBACIF,EADE,uBAEcC,EAAQvD,UACpB,EACA,GAJF,SASAG,EAAcsD,OAChB,gCACA,wDAnCC,+DAyCLV,EAzCK,UA0CK3C,GAAoB,CACtBD,cACAE,qBAAsBkD,EACtBjD,kBAAmBiD,IA7CtB,+EADb,uCAHZ,UA2DKrN,EAAMyD,MAAMsB,KAAI,SAACb,GAAD,OACb,cAACtE,EAAD,CAEIE,QAAO,sBAAE,4BAAAI,EAAA,sEACckF,EAAWlB,GADzB,cACCyB,EADD,yBAGD,qCACI,yCAAYzB,EAAK2B,QADrB,OACmCF,MAJlC,4CADJzB,EAAK2B,SAYjB4G,GAAQ1H,KAAI,SAACyI,GAAD,OACT,8BACI,cAAC5N,EAAD,CACIE,QAAO,sBAAE,4BAAAI,EAAA,sEACcsN,EAAOC,UADrB,cACCC,EADD,yBAID,mCACKpE,OAAOC,QAAQmE,GAAM3I,KAClB,mCAAE0E,EAAF,KAAOpB,EAAP,YACI,gCACI,8BAEKmF,EAAO1H,MAGA0H,EAECzH,WACD0D,GARZ,OAaCpB,IAdKoB,SAPrB,8CAFP+D,EAAO3H,YAoC7B,cAAC,IAAD,CAAM8H,GAAG,UAAUnN,OAAQ,SAA3B,gDAUhB,I,GAAMsM,GAASpN,IAAOC,IAAV,6F,OC5LL,SAAeiO,GAAtB,mC,8CAAO,WAAwCC,GAAxC,yBAAA3N,EAAA,sEACoB+F,MAAM,mEAD1B,cACGE,EADH,gBAIgBA,EAASC,OAJzB,cAIGC,EAJH,gBAMgBjB,EAAWyI,GAN3B,OAMGlI,EANH,qBAQgBU,EAAKsB,OARrB,+DAQQmG,EARR,SASUC,oBAAoBlC,KAAzB,cAAuClG,GAT5C,0CAUYmI,GAVZ,0KAeI,MAfJ,kE,sBAkBA,SAAeE,GAAtB,mC,8CAAO,WAAkCC,GAAlC,qBAAA/N,EAAA,sEACoB+F,MAAM,4DAAD,OACoCgI,IAF7D,cACG9H,EADH,gBAIgBA,EAASC,OAJzB,cAIGC,EAJH,OAKHpF,QAAQ4J,IAAI,qBAAsBxE,GAC5B6H,EAAY7H,EAAK8H,QAAQD,UACzBE,EAAU/H,EAAKgI,QAAQ,GAAGC,OAAO,GAAGF,QAPvC,kBASI,CAAEF,YAAWE,YATjB,6C,sBAYA,SAAeG,GAAtB,mC,8CAAO,WAA+BH,GAA/B,iBAAAlO,EAAA,sEACoB+F,MAAM,sEAAD,OAC8CmI,IAFvE,cACGjI,EADH,gBAIgBA,EAASC,OAJzB,cAIGC,EAJH,OAKHpF,QAAQ4J,IAAI,kBAAmBxE,GAL5B,kBAMIA,GANJ,4C,sBCnBA,SAASmI,KACZ,MAA0B7B,mBAAc,IAAxC,mBAAOlJ,EAAP,KAAcgL,EAAd,KACA,EAAwC9B,mBAAc,MAAtD,mBAAO+B,EAAP,KAAqBC,EAArB,KAEA,OAAKD,EA4CG,eAAClN,EAAD,CACIG,SAAU,YAAoB,IAAjBC,EAAgB,EAAhBA,UACT,OACI,wBACIoB,QAAO,sBAAE,wCAAA9C,EAAA,kEACuB6M,KADvB,SAEMnL,IAFN,+BACCoL,EADD,cAGD,oBAKEC,EAAM,IAAIC,IARX,cASczJ,GATd,IASL,2BAAWS,EAAe,QACtB+I,EAAI/I,KAAKA,EAAK2B,KAAM3B,GAVnB,qCAYL+I,EAAI/I,KAAK8I,EAAgBnH,KAAMmH,GAZ1B,UAciBC,EAAIE,cAAc,CACpCtJ,KAAM,SAfL,eAcCuJ,EAdD,iBAkBiBhI,EAAWgI,GAlB5B,QAkBCC,EAlBD,OAmBLC,OACIF,EADE,uBAEcC,EAAQvD,UACpB,EACA,GAJF,SAnBD,4CADb,uCAHZ,UAqCI,sCArCJ,IAqCkB4E,EAAaT,KAC3B,uBACA,2CAvCJ,IAuCuBS,EAAaR,UAChC,uBACA,yCAzCJ,IAyCqBQ,EAAaN,QAC9B,uBACA,yCA3CJ,IA2CqBM,EAAaE,QAAQzJ,KAAK,SArF/C,eAAC0J,GAAD,WACI,cAAC,EAAD,CACIpM,QAAO,uCAAE,WAAOqM,GAAP,2BAAA5O,EAAA,6DACC2N,EAAmBiB,EAAa,GACtCL,EAAS,CAACK,EAAa,KAFlB,SAIiClB,GAClCC,GALC,cAICkB,EAJD,SASDC,MAAM,wEAKFf,EAASc,EAATd,KAdH,SAgBgCD,GACjCC,GAjBC,uBAgBGC,EAhBH,EAgBGA,UAAWE,EAhBd,EAgBcA,QAhBd,UAmBiBG,GAAgBH,GAnBjC,QAmBCQ,EAnBD,OAqBLD,EAAgB,2BACTI,GADQ,IAEXb,YACAE,UACAQ,aAEJ3N,QAAQ4J,IAAIkE,GA3BP,4CAAF,sDA6BPnM,WAAS,EA9Bb,0CAkCA,cAAC,IAAD,CAAM+K,GAAG,IAAInN,OAAQ,SAArB,gDAwDhB,I,GAAMqO,GAAenP,IAAOC,IAAV,+FCpGlBsB,QAAQgO,KACJ,4CAA2BrH,KACrBW,GAAD,oBAAgCA,GAAW2G,eAA3C,KACC5G,GAAD,8BAE4BA,GAAkBhI,MAF9C,IAHT,6GASA,IAAM6O,GAAUC,cAEVC,GAAgB3P,IAAO4P,OAAV,wEAMnBC,IAASC,OACL,eAAC,IAAMC,WAAP,WACI,cAACJ,GAAD,UACI,2DAEJ,cAAC,IAAD,CAAcF,WAAd,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACI,cAACjD,GAAD,MAEJ,cAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,UAAlB,SACI,cAACnB,GAAD,cAKhBoB,SAASC,eAAe,W","file":"static/js/main.56c00863.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nexport function Loader() {\n    return (\n        <LoaderDiv>\n            {/* TODO: Please @roseckyj  loader that would cover only its area not the whole modal, */}\n            {/* TODO: Please @roseckyj make it universal to use it in every layout type - small icon, fullscreen, modal, etc,... */}\n            {/* TODO: Please @roseckyj untite with LoaderInline */}\n            <div className=\"spinner\"></div>\n        </LoaderDiv>\n    );\n}\n\nconst LoaderDiv = styled.div``;\n","import * as React from 'react';\nimport { Loader } from './Loader';\n\nexport type IAwaitable<T> = T | Promise<T>;\n\nexport type IFactory<T> = () => T;\n\nexport type IFactorable<T> = T | IFactory<T>;\n\nexport function factor<T>(factorable: IFactorable<T>): T {\n    if (typeof factorable === 'function') {\n        return (factorable as any)();\n    } else {\n        return factorable;\n    }\n}\n\ninterface IAsyncContentComponentProps {\n    /**\n     * Component to be rendered before the content is loaded\n     *\n     * If not set, default loading is used\n     */\n    loading?: JSX.Element;\n\n    /**\n     * The async content to be rendered\n     */\n    content: IFactorable<IAwaitable<JSX.Element>>;\n}\n\ninterface IAsyncContentComponentState {\n    content: JSX.Element;\n}\n\n/**\n * Utility for mounting RxJS observable content\n *\n * @collboard-modules-sdk\n */\nexport function AsyncContentComponent({\n    loading,\n    content,\n}: IAsyncContentComponentProps) {\n    const [state, setState] = React.useState<IAsyncContentComponentState>({\n        content: loading || <Loader />,\n    });\n\n    React.useEffect(() => {\n        (async () => {\n            setState({ content: await factor(content) });\n        })();\n\n        return () => {\n            /* TODO: Can here be some reasonable teardown logic? */\n        };\n    }, [content]);\n\n    return <>{state.content}</>;\n}\n","import QRCodeGenerator, { QRCodeRenderersOptions } from 'qrcode';\nimport * as React from 'react';\n\ninterface IQRCodeProps extends QRCodeRenderersOptions {\n    link: URL;\n}\n\nexport function QRCode(props: IQRCodeProps) {\n    const href = props.link.href;\n\n    return (\n        <a {...{ href }} target=\"_blank\" rel=\"noopener noreferrer\">\n            <canvas\n                ref={(canvasElement) => {\n                    if (!canvasElement) {\n                        return;\n                    }\n\n                    // Note: Making some manipulation (probbably) due to internal errors of qrcode library\n                    const options: QRCodeRenderersOptions = { ...props };\n                    delete (options as any).href;\n                    options.color = options.color || {};\n\n                    QRCodeGenerator.toCanvas(\n                        canvasElement,\n                        href,\n                        options,\n                        (error) => {\n                            if (error) {\n                                console.error(error);\n                            }\n                            // console.log('success!');\n                        },\n                    );\n                }}\n            />\n        </a>\n    );\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { QRCode } from './QRCode';\n\nexport interface IPaymentGateProps {\n    amount: number;\n    address: string;\n    dueTime: number /* TODOL Date */;\n    //getStatus: () => Promise<boolean /* full status in future */>;\n}\n\nexport function PaymentGate({\n    amount,\n    address,\n    dueTime /*, getStatus*/,\n}: IPaymentGateProps) {\n    // TODO: !!! Deal up in design in superlong addreses like UegztxGAXchyKXtaZYFkGWxDnCpMD329qSNk4YVrc8wrwitM58WVocMT59rPSasNZJwezshytQ74pq9JF8uUGGYHJW64hbooxY54dDCRZnFVqFvXGcj1jUhkXpuYuVaDY1b6LcXq9zRCZCiXZ36Gswg2TqcgZRE1B5ZxUrKSd19XykEfsgx5eWW3k7MDiLxvisPqMxqpZtP8UHvgwucJxZ4Bg86xWC3v4kXVC6o9mkg7z64MqiQy1FrqHvY65mr7UgG1vK8q37mDcgZPkDc7BKmsKSLynXgDNsqT8yirvxmsCU9o5wMsF8BoFPxUnjPGLAp7yBwnqtvXowq3o4pYnc4h93irPEHqbTySBgLSEwFzgRgbVrXtE8FaL1q2LVyg7rbHJHzvjVfJMyQDSGQwecG6iWybNUv9sP7SKanHegS4wn8xKaBGrSmqTNk4aPpRXvGTr6rikYxmTYDmQru6tJSebRUf7mhsbtp3xTngEgFtPVCMQTnuuNtszbtHnMHGxfPntz8gEqfKFjHrM1LSCkWxuiYx92Nj7EHFY5vnM7\n\n    const link = new URL(\n        `https://explorer.ergoplatform.com/payment-request?address=${address}&amount=${amount}`,\n    );\n\n    // TODO: !!! Countdown and show minutes\n    return (\n        <PaymentGateDiv>\n            <QRCode {...{ link }} />\n            Pay {amount} ERG to address{' '}\n            <a href={link.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                {address}\n            </a>\n            in {dueTime} seconds.\n            {/*<button\n                onClick={async () => {\n                    const status = await getStatus();\n                    if (status) {\n                        alert(`Payed`)!;\n                    }\n                }}\n            ></button>*/}\n        </PaymentGateDiv>\n    );\n}\n\nconst PaymentGateDiv = styled.div`\n    font-size: 11px;\n    width: 500px;\n`;\n","import { jsPDF } from 'jspdf';\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { IAwaitable } from './AsyncContentComponent';\n//import html2canvas from 'html2canvas';\n\ninterface IPdfPageProps extends React.PropsWithChildren<{}> {\n    createUi: (options: {\n        createPdf: () => Promise<Blob>;\n    }) => IAwaitable<JSX.Element | JSX.Element[]>;\n}\n\nexport function PdfPage(props: IPdfPageProps) {\n    const pageRef = useRef(null);\n\n    return (\n        <div>\n            {props.createUi({\n                createPdf: async () => {\n                    const doc = new jsPDF();\n\n                    // TODO: !!! Through nice html2canvas\n\n                    //const canvas = await html2canvas(pageRef!.current!);\n                    //const image = canvas.toDataURL();\n\n                    // !!! document.body.appendChild(canvas);\n\n                    //doc.addImage(image, 'JPEG', 0, 0, 210, 297);\n                    //doc.html((pageRef!.current as any).innerHTML, { x: 10, y: 10 });\n\n                    //console.log(pageRef!.current as any);\n                    //console.log((pageRef!.current as any).innerText);\n                    //doc.html((pageRef!.current as any).innerHTML, { x: 10, y: 10 });\n                    doc.text((pageRef!.current as any).innerText, 10, 10);\n\n                    return doc.output('blob');\n                },\n            })}\n            <PdfPageDiv ref={pageRef}>{props.children}</PdfPageDiv>\n        </div>\n    );\n}\n\nconst PdfPageDiv = styled.div`\n    width: ${210 * 2}px;\n    height: ${297 * 2}px;\n    border: 2px solid #009edf;\n\n    background-color: white;\n    color: black;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nexport type IUploadZoneProps = React.PropsWithChildren<{\n    clickable?: boolean;\n    onFilesOver?: (isFileOver: boolean) => void;\n    onFiles: (droppedFiles: File[]) => void;\n}>;\n\n// TODO: !!! Use hooks and functional coponent ONLY in whole project\n\nexport class UploadZone extends React.Component<IUploadZoneProps> {\n    render() {\n        const {\n            children,\n            onFiles: onFile,\n            onFilesOver: onFileOver,\n            clickable,\n        } = this.props;\n        const onFileOverMaybe = (isFileOver: boolean) => {\n            if (onFileOver) {\n                onFileOver(isFileOver);\n            }\n        };\n\n        let uploadClick: () => void;\n\n        return (\n            <UploadZoneDiv\n                onClick={() => {\n                    if (clickable) {\n                        uploadClick();\n                    }\n                }}\n                onDragEnter={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDragOver={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(true);\n                }}\n                onDragExit={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(false);\n                }}\n                onDragEnd={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDrop={(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    onFileOverMaybe(false);\n\n                    const files = Array.from(event.dataTransfer.files); // TODO: Maybe there should be event.dataTransfer.items handler\n                    onFile(files);\n                }}\n            >\n                <input\n                    type=\"file\"\n                    ref={(element) => {\n                        if (element) {\n                            uploadClick = () => {\n                                onFileOverMaybe(true);\n                                (element as HTMLInputElement).click();\n                            };\n                        }\n                    }}\n                    onChange={(event) => {\n                        if (!event || !event.target || !event.target.files)\n                            return;\n                        onFile(Array.from(event.target.files));\n                    }}\n                />\n\n                {children}\n            </UploadZoneDiv>\n        );\n    }\n}\n\nconst UploadZoneDiv = styled.div`\n    width: ${210}px;\n    height: ${297}px;\n    padding: 10px;\n    border: 5px dashed #009edf;\n\n    input {\n        display: none;\n    }\n`;\n","export function readFile(file: File | Blob): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', (event) =>\n            resolve(event.target!.result as ArrayBuffer),\n        );\n        reader.addEventListener('error', reject);\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n","import { readFile } from './readFile';\n\nexport async function getAsByteArray(file: File | Blob): Promise<Uint8Array> {\n    return new Uint8Array(await readFile(file));\n}\n","export function uint8ArrayToHex(uint8Array: Uint8Array) {\n    return [...uint8Array].map((x) => x.toString(16).padStart(2, '0')).join('');\n}\n","// @ts-ignore: no typings\nimport { blake2bFinal, blake2bInit, blake2bUpdate } from 'blakejs';\nimport { getAsByteArray } from '../utils/getAsByteArray';\nimport { uint8ArrayToHex } from '../utils/uint8ArrayToHex';\n\nexport async function blake2b256(input: File | Blob): Promise<string> {\n    const KEY = null; // optional key\n    const OUTPUT_LENGTH = 32; // bytes\n    const context = blake2bInit(OUTPUT_LENGTH, KEY);\n\n    // each time you get a byte array from the stream:\n    blake2bUpdate(context, await getAsByteArray(input));\n\n    // finally, once the stream has been exhausted\n    const hashUint8Array = blake2bFinal(context);\n    // returns a 64-byte hash, as a Uint8Array\n\n    const hash = uint8ArrayToHex(hashUint8Array);\n\n    return hash;\n}\n","import { IOracle } from './_IOracle';\n\nexport abstract class AbstractBlockcyptherOracle\n    implements IOracle<{ hash: string }>\n{\n    public abstract name: string;\n    public abstract title: string;\n\n    public dataTitles = { hash: 'Current block hash' };\n    public ttl = -1;\n\n    public async getData() {\n        const response = await fetch(\n            `https://api.blockcypher.com/v1/${this.name.toLowerCase()}/main` /*`https://blockchain.info/latestblock`*/,\n            /*{ mode: 'no-cors' }*/\n        );\n        // console.log({ response });\n        const body = await response.json();\n\n        if (body.error) {\n            throw new Error(body.error);\n        }\n\n        const { hash } = body;\n        return { hash };\n    }\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class BitcoinOracle extends AbstractBlockcyptherOracle {\n    public name = 'BTC';\n    public title = 'Bitcoin';\n}\n","import { IOracle } from './_IOracle';\n\nexport class DateOracle implements IOracle<{ date: string; time: string }> {\n    public name = 'DATE';\n    public title = 'Current';\n    public ttl = 1;\n\n    public dataTitles = { date: 'date', time: 'time' };\n\n    public getData() {\n        const date = new Date();\n        return {\n            date: `${date.getUTCFullYear()}-${('0' + date.getUTCMonth()).slice(\n                -2,\n            )}-${('0' + date.getUTCDate()).slice(-2)}`,\n            time: `${('0' + date.getUTCHours()).slice(-2)}:${(\n                '0' + date.getUTCMinutes()\n            ).slice(-2)}:${('0' + date.getUTCSeconds()).slice(-2)}`,\n        };\n    }\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class EthereumOracle extends AbstractBlockcyptherOracle {\n    public name = 'ETH';\n    public title = 'Ethereum';\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class LitecoinOracle extends AbstractBlockcyptherOracle {\n    public name = 'LTC';\n    public title = 'Litecoin';\n}\n","import RssParser from 'rss-parser';\nimport { IOracle } from './_IOracle';\n\nexport class NytimesOracle implements IOracle<{ firstTitle: string }> {\n    public name = 'NYTIMES';\n    public title = 'The New York Times';\n    public ttl = -1;\n\n    public dataTitles = { firstTitle: 'first title' };\n\n    public async getData() {\n        const rssParser = new RssParser();\n        const feed = await rssParser.parseURL(\n            `https://rss.nytimes.com/services/xml/rss/nyt/World.xml`,\n        );\n\n        // console.log({ feed });\n\n        return {\n            firstTitle: feed.items[0].title as string,\n        };\n    }\n}\n","import { ConfigChecker } from 'configchecker';\n///* tslint:disable:no-var-requires */\n//const packageJson = require('../package.json');\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n\nconst config = ConfigChecker.from(process.env);\n\nexport const ERGO_ASSEMBLER_URL = config\n    .get(\n        'REACT_APP_ERGO_ASSEMBLER_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url()\n    // TODO: .checkHttps()\n    // TODO: .checkNativePort()\n    // TODO: universal .check() in configchecker\n    .required().value!;\n\nexport const BUILD_DETAILS_URL = config\n    .get(\n        'REACT_APP_BUILD_DETAILS_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url().value;\n\n/**\n * TODO: This is not working with GitHub actions.\n */\nexport const BUILD_DATE = config\n    .get(\n        'REACT_APP_BUILD_DATE' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .date().value;\n","import { ERGO_ASSEMBLER_URL } from '../config';\nimport {\n    ergo_scala_script,\n    ergo_script_address,\n} from '../interfaces/stringTypes';\n\n/**\n * Copiles source in scala to Ergo3 adress format\n * @param source in scala\n */\nexport async function compileErgoScript({\n    script,\n}: {\n    script: ergo_scala_script;\n}): Promise<{ address: ergo_script_address }> {\n    const body = JSON.stringify(script.trim())\n        // TODO: !!! Is this required\n        .split('^\\n')\n        .join('\\n')\n        .split('\\n\\n')\n        .join('\\n');\n\n    const url = `${ERGO_ASSEMBLER_URL.href}compile`;\n    const compilerResponse = await fetch(url, {\n        method: 'POST',\n        body,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }).catch(() => {\n        throw new Error(`Failed to fetch compile service on \"${url}\".`);\n    });\n\n    const compilerResponseBody = await compilerResponse.json();\n\n    if (compilerResponseBody.success === false) {\n        throw new Error(\n            `Failed to compile Ergo script:\\n${compilerResponseBody.detail}`,\n        );\n    }\n\n    return compilerResponseBody;\n}\n","import { ergo_scala_script, string_href } from '../interfaces/stringTypes';\n\nexport async function createScript<T extends { script: string_href }>(\n    options: T,\n): Promise<{ script: ergo_scala_script }> {\n    const response = await fetch(options.script);\n    let script = await response.text();\n\n    // console.log({ script });\n\n    for (const [key, value] of Object.entries(options).filter(\n        // tslint:disable-next-line:no-shadowed-variable\n        ([key]) => key !== 'script',\n    )) {\n        const scriptArray = script.split(`$${key}`);\n        if (scriptArray.length === 1) {\n            throw new Error(\n                `Could not find param \"${key}\" in the script \"${options.script}\"`,\n            );\n        }\n        script = scriptArray.join(value);\n    }\n\n    // TODO: Probbably extract function replaceParams\n\n    const match = script.match(/\\$[a-zA-Z0-9]+/g);\n    if (match) {\n        throw new Error(\n            `Missing params ${match\n                .map((param) => `\"${param.substring(1)}\"`)\n                .join(', ')} for the script \"${options.script}\".`,\n        );\n    }\n\n    return { script };\n}\n","export async function getCurrentBlockchainHeight(): Promise<number> {\n    // TODO: Implement, value is hardcoded\n    return 0;\n}\n","import { ergo_wallet_address } from '../interfaces/stringTypes';\n\n/**\n * TODO: !!! Rename to valid and add ergo\n */\nexport async function isUserAddressCorrect(\n    userAddress: ergo_wallet_address,\n): Promise<boolean> {\n    // TODO: !!! Implement, value is hardcoded\n    return true;\n}\n","import { ERGO_ASSEMBLER_URL } from '../config';\nimport { ergo_wallet_address } from '../interfaces/stringTypes';\nimport { compileErgoScript } from './compileErgoScript';\nimport { createScript } from './createScript';\nimport { getCurrentBlockchainHeight } from './getCurrentBlockchainHeight';\nimport { isUserAddressCorrect } from './isUserAddressCorrect';\n\ninterface ICreateSigmaStampNft {\n    documentHashInBase64: string;\n    documentHashInHex: string;\n    userAddress: ergo_wallet_address;\n}\n\n/**\n *\n * TODO: !!! Split into more granular pieces\n */\nexport async function createSigmaStampNft({\n    userAddress,\n    documentHashInBase64,\n    documentHashInHex,\n}: ICreateSigmaStampNft) /*: Promise<{ amount: number; address: string }> */ {\n    if (!(await isUserAddressCorrect(userAddress))) {\n        throw new Error(`User address \"${userAddress}\" is not correct.`);\n    }\n\n    const mintingFee = 20000000; /* TODO: User settable */\n    const ergsSendTogetherWithNFT = 100000000; /* TODO: User settable */\n    const ergsFeeForSigmaStampService = 100000000; /* Our fee */\n    const sigmaStampProviderAddress =\n        '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV';\n    const assetTypeValue = 'Ad4=';\n    const returnTransactionFee = 10000000;\n\n    /**\n     * TODO: !!! unhardcode address\n     */\n    const sigmaStampAssemblerNodeAddr =\n        '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV';\n    const refundHeightThreshold = (await getCurrentBlockchainHeight()) + 10;\n\n    console.log(\n        JSON.stringify({\n            ergsSendTogetherWithNFT,\n            userAddress,\n            ergsFeeForSigmaStampService,\n            sigmaStampProviderAddress,\n            assetTypeValue,\n            documentHashInBase64,\n            returnTransactionFee,\n            sigmaStampAssemblerNodeAddr,\n            refundHeightThreshold,\n        }),\n    );\n\n    const { script } = await createScript({\n        script: '/scripts/sigmastamp-nft.scala',\n\n        // TODO: Better names for variabiles below (replace everywhere in scala script + here):\n        ergsSendTogetherWithNFT,\n        userAddress,\n        ergsFeeForSigmaStampService,\n        sigmaStampProviderAddress,\n        assetTypeValue,\n        documentHashInBase64,\n        returnTransactionFee,\n        sigmaStampAssemblerNodeAddr,\n        refundHeightThreshold,\n    });\n\n    // console.log(script);\n    const { address: compiledSmartContractAddress } = await compileErgoScript({\n        script,\n    });\n\n    const ergoAmountRequired =\n        ergsSendTogetherWithNFT + ergsFeeForSigmaStampService + mintingFee;\n    const documentHashInErgoFormat = `e20${documentHashInHex}`;\n    const verifyLinkInErgoFormat = `0e61${\n        // TODO: !!! unhardcode address\n        /* !!! Convert to hex */ `http://sigmastamp.ml/verify?hash=a16d5705c031866f5c5dd1ba39e43538193b45718af5a50a115e1c8d67c209cd`\n    }`;\n\n    // TODO: !!! Separate function for follow\n    const requestBody = {\n        address: compiledSmartContractAddress,\n        returnTo: userAddress,\n        startWhen: { erg: ergoAmountRequired },\n        txSpec: {\n            requests: [\n                {\n                    ergValue: ergsSendTogetherWithNFT,\n                    address: userAddress,\n                    name: 'SigmaStampNFT',\n                    amount: 1,\n                    decimals: 0,\n                    description:\n                        'Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.',\n                    registers: {\n                        R7: '0e0201de',\n                        R8: documentHashInErgoFormat,\n                        R9: verifyLinkInErgoFormat,\n                    },\n                },\n                {\n                    value: ergsFeeForSigmaStampService,\n                    address: sigmaStampProviderAddress,\n                },\n            ],\n            fee: mintingFee,\n            inputs: ['$userIns'],\n            dataInputs: [],\n        },\n    };\n\n    const followResponse = await fetch(`${ERGO_ASSEMBLER_URL.href}follow`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n    });\n\n    const followResponseBody = await followResponse.json();\n    const { id, dueTime } = followResponseBody;\n\n    return {\n        amount: ergoAmountRequired / 1000000000,\n        address: compiledSmartContractAddress,\n        dueTime,\n        async getStatus() {\n            // Loop\n            const watchResponse = fetch(\n                `${ERGO_ASSEMBLER_URL.href}result/${id}`,\n            );\n            const watchResponseBody = await followResponse.json();\n            const {\n                /*id,*/ tx,\n                detail /* pending, returning, mined, success, timeout, returnFailed */,\n            } = followResponseBody;\n\n            console.log({ watchResponse, watchResponseBody, tx });\n\n            if (detail === 'success') {\n                // !!! And now take tx and create big certificate\n\n                return true;\n            }\n\n            return false;\n        },\n    };\n}\n","import { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { AsyncContentComponent } from './components/AsyncContentComponent';\nimport { IPaymentGateProps, PaymentGate } from './components/PaymentGate';\nimport { PdfPage } from './components/PdfPage';\nimport { UploadZone } from './components/UploadZone';\nimport { blake2b256 } from './hash/blake2b256';\nimport { BitcoinOracle } from './oracles/BitcoinOracle';\nimport { DateOracle } from './oracles/DateOracle';\nimport { EthereumOracle } from './oracles/EthereumOracle';\nimport { LitecoinOracle } from './oracles/LitecoinOracle';\nimport { NytimesOracle } from './oracles/NytimesOracle';\nimport { createSigmaStampNft } from './smartcontracts/createSigmaStampNft';\n\nconst ORACLES = [\n    new BitcoinOracle(),\n    new EthereumOracle(),\n    new LitecoinOracle(),\n    new DateOracle(),\n    new NytimesOracle(),\n];\n\ninterface IAppState {\n    files: File[];\n}\n\nexport function App() {\n    const [state, setState] = useState<IAppState>({ files: [] });\n    const [payment, setPayment] = useState<null | IPaymentGateProps>(null);\n\n    if (!payment) {\n        return (\n            <AppDiv>\n                {/*\n        <button\n          onClick={() => { console.log('test'); createCertificate() }}\n        >\n          Create document\n        </button>\n            <h1>Sigmastamp</h1>*/}\n\n                {state.files.length === 0 ? (\n                    <UploadZone\n                        onFiles={async (files) => {\n                            setState({ files });\n                            /*\n                    const file = files[0];\n\n                    const hash = await blake2b256(file);\n\n                    console.log({ files, file, hash });\n\n                    const certificateFile = createCertificate({ certificateFilename: 'certificate.pdf', hash });\n\n                    const zip = new JSZip();\n                    zip.file(file.name, file);\n                    zip.file(certificateFile.name, certificateFile);\n\n                    const zipFile = await zip.generateAsync({ type: 'blob' });\n                    saveAs(zipFile, 'certificate.zip');\n                    */\n                        }}\n                        clickable\n                    >\n                        Upload your file(s) here!\n                    </UploadZone>\n                ) : (\n                    <PdfPage\n                        createUi={({ createPdf }) => {\n                            return (\n                                <button\n                                    onClick={async () => {\n                                        const certificateFile = new File(\n                                            [await createPdf()],\n                                            'certificate1.pdf' /* TODO: Maybe add current {lastModified: 1534584790000}*/,\n                                        );\n\n                                        //saveAs(certificateFile);\n\n                                        const zip = new JSZip();\n                                        for (const file of state.files) {\n                                            zip.file(file.name, file);\n                                        }\n                                        zip.file(\n                                            certificateFile.name,\n                                            certificateFile,\n                                        );\n\n                                        const zipBlob = await zip.generateAsync(\n                                            { type: 'blob' },\n                                        );\n\n                                        const zipHash = await blake2b256(\n                                            zipBlob,\n                                        );\n                                        saveAs(\n                                            zipBlob,\n                                            `certificate1.${zipHash.substring(\n                                                0,\n                                                5,\n                                            )}.zip`,\n                                        );\n\n                                        // TODO: !!! Nicer usir input than prompt\n                                        const userAddress = prompt(\n                                            'Please fill your Ergo address',\n                                            '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV' /* !!! Unhardocde */,\n                                        );\n                                        if (!userAddress) {\n                                            return;\n                                        }\n\n                                        setPayment(\n                                            await createSigmaStampNft({\n                                                userAddress,\n                                                documentHashInBase64: zipHash,\n                                                documentHashInHex: zipHash,\n                                            }),\n                                        );\n                                    }}\n                                >\n                                    Download 1st certificate\n                                </button>\n                            );\n                        }}\n                    >\n                        {state.files.map((file) => (\n                            <AsyncContentComponent\n                                key={file.name}\n                                content={async () => {\n                                    const hash = await blake2b256(file);\n                                    return (\n                                        <>\n                                            <b>Hash of {file.name}</b> is {hash}\n                                        </>\n                                    );\n                                }}\n                            />\n                        ))}\n\n                        {ORACLES.map((oracle) => (\n                            <div key={oracle.name}>\n                                <AsyncContentComponent\n                                    content={async () => {\n                                        const data = await oracle.getData();\n\n                                        return (\n                                            <>\n                                                {Object.entries(data).map(\n                                                    ([key, value]) => (\n                                                        <div key={key}>\n                                                            <b>\n                                                                {/* @ts-ignore: Object.entries is dummy and cannot pass propper index signature type */}\n                                                                {oracle.title}\n                                                                {\n                                                                    (\n                                                                        oracle as any\n                                                                    )\n                                                                        .dataTitles[\n                                                                        key\n                                                                    ]\n                                                                }\n                                                                :\n                                                            </b>\n                                                            {value}\n                                                        </div>\n                                                    ),\n                                                )}\n                                            </>\n                                        );\n                                    }}\n                                />\n                            </div>\n                        ))}\n                    </PdfPage>\n                )}\n\n                <Link to=\"/verify\" target={'_blank'}>\n                    Or verify your 1st certificate.\n                </Link>\n            </AppDiv>\n        );\n    } else {\n        return <PaymentGate {...payment} />;\n    }\n}\n\nconst AppDiv = styled.div`\n    a {\n        color: #555;\n        font-size: 0.7em;\n    }\n`;\n","import { blake2b256 } from '../hash/blake2b256';\n\nexport async function validateFirstCertificate(firstCertificate: File) {\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v0/assets/issuingBoxes`,\n    );\n    const body = await response.json();\n\n    const hash = await blake2b256(firstCertificate);\n\n    for (const item of body.items) {\n        if (item.additionalRegisters.R8 === `0e20${hash}`) {\n            return item;\n            // TODO: probbably last not first\n        }\n    }\n\n    return null;\n}\n\nexport async function getTransactionTime(txId: string) {\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v0/transactions/${txId}`,\n    );\n    const body = await response.json();\n    console.log('getTransactionTime', body);\n    const timestamp = body.summary.timestamp;\n    const tokenId = body.outputs[0].assets[0].tokenId;\n\n    return { timestamp, tokenId };\n}\n\nexport async function getAssetHolders(tokenId: string) {\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v0/addresses/assetHolders/${tokenId}`,\n    );\n    const body = await response.json();\n    console.log('getAssetHolders', body);\n    return body;\n}\n","import JSZip from 'jszip';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { PdfPage } from './components/PdfPage';\nimport { UploadZone } from './components/UploadZone';\nimport { blake2b256 } from './hash/blake2b256';\nimport {\n    getAssetHolders,\n    getTransactionTime,\n    validateFirstCertificate,\n} from './smartcontracts/validateFirstCertificate';\n\nexport function VerifyApp() {\n    const [files, setFiles] = useState<any>([]);\n    const [verification, setVerification] = useState<any>(null);\n\n    if (!verification) {\n        return (\n            <VerifyAppDiv>\n                <UploadZone\n                    onFiles={async (droppedFiles) => {\n                        const firstCertificate = droppedFiles[0];\n                        setFiles([droppedFiles[0]]);\n\n                        const droppedFileVerification = await validateFirstCertificate(\n                            firstCertificate,\n                        );\n\n                        if (!droppedFileVerification) {\n                            alert(\n                                `Your 1st certificate is still not validated through Ergo blockchain.`,\n                            );\n                        }\n\n                        const { txId } = droppedFileVerification;\n\n                        const { timestamp, tokenId } = await getTransactionTime(\n                            txId,\n                        );\n                        const hodlers = await getAssetHolders(tokenId);\n\n                        setVerification({\n                            ...droppedFileVerification,\n                            timestamp,\n                            tokenId,\n                            hodlers,\n                        });\n                        console.log(droppedFileVerification);\n                    }}\n                    clickable\n                >\n                    Upload your 1st certificate.\n                </UploadZone>\n                <Link to=\"/\" target={'_blank'}>\n                    Or create your 1st certificate.\n                </Link>\n            </VerifyAppDiv>\n        );\n    } else {\n        return (\n            <PdfPage\n                createUi={({ createPdf }) => {\n                    return (\n                        <button\n                            onClick={async () => {\n                                const certificateFile = new File(\n                                    [await createPdf()],\n                                    'certificate2.pdf' /* TODO: Maybe add current {lastModified: 1534584790000}*/,\n                                );\n\n                                //saveAs(certificateFile);\n\n                                const zip = new JSZip();\n                                for (const file of files) {\n                                    zip.file(file.name, file);\n                                }\n                                zip.file(certificateFile.name, certificateFile);\n\n                                const zipBlob = await zip.generateAsync({\n                                    type: 'blob',\n                                });\n\n                                const zipHash = await blake2b256(zipBlob);\n                                saveAs(\n                                    zipBlob,\n                                    `certificate2.${zipHash.substring(\n                                        0,\n                                        5,\n                                    )}.zip`,\n                                );\n                            }}\n                        >\n                            Download 2nd certificate\n                        </button>\n                    );\n                }}\n            >\n                <b>txId:</b> {verification.txId}\n                <br />\n                <b>timestamp:</b> {verification.timestamp}\n                <br />\n                <b>tokenId:</b> {verification.tokenId}\n                <br />\n                <b>hodlers:</b> {verification.hodlers.join(', ')}\n            </PdfPage>\n        );\n    }\n}\n\nconst VerifyAppDiv = styled.div`\n    a {\n        color: #555;\n        font-size: 0.7em;\n    }\n`;\n","import { createHashHistory } from 'history';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { App } from './App';\nimport { BUILD_DATE, BUILD_DETAILS_URL, VERSION } from './config';\nimport './index.css';\nimport { VerifyApp } from './VerifyApp';\n\nconsole.info(\n    `%c📜 Sigmastamp version ${VERSION}` +\n        (!BUILD_DATE ? `` : ` build at ${BUILD_DATE.toISOString()}`) +\n        (!BUILD_DETAILS_URL\n            ? ``\n            : ` view build details ${BUILD_DETAILS_URL.href}`),\n    `background: #009EDD; color: white; font-size: 1.1em; font-weight: bold; padding: 5px; border-radius: 3px;`,\n);\n\nconst history = createHashHistory();\n\nconst HeaderElement = styled.header`\n    h1 {\n        font-size: 1em;\n    }\n`;\n\nReactDOM.render(\n    <React.StrictMode>\n        <HeaderElement>\n            <h1>📜 Sigmastamp</h1>\n        </HeaderElement>\n        <Router {...{ history }}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <App />\n                </Route>\n                <Route exact path=\"/verify\">\n                    <VerifyApp />\n                </Route>\n            </Switch>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}