{"version":3,"sources":["components/UploadZone.tsx","utils/readFile.tsx","utils/getAsByteArray.tsx","pdf/createCertificate.ts","App.tsx","utils/uint8Array2hex.tsx","index.tsx"],"names":["UploadZone","state","fileInputField","uploadClick","this","props","children","onFile","onFiles","onFileOver","onFilesOver","clickable","onFileOverMaybe","isFileOver","UploadZoneDiv","onClick","onDragEnter","event","stopPropagation","preventDefault","onDragOver","onDragExit","onDragEnd","onDrop","files","Array","from","dataTransfer","type","ref","element","click","onChange","target","React","styled","div","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsArrayBuffer","getAsByteArray","a","Uint8Array","createCertificate","certificateFilename","hash","doc","jsPDF","text","save","blob","output","File","App","AppDiv","blake2s","BLAKE2s","update","uint8Array","digest","map","x","toString","padStart","join","console","log","certificateFile","zip","JSZip","name","generateAsync","then","content","saveAs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAYaA,EAAb,4MACIC,MAA0B,CAAEC,eAAgB,MADhD,4CAII,WACI,IAOIC,EAPJ,EAA0EC,KAAKC,MAAvEC,EAAR,EAAQA,SAAmBC,EAA3B,EAAkBC,QAA8BC,EAAhD,EAAmCC,YAAyBC,EAA5D,EAA4DA,UACtDC,EAAkB,SAACC,GACjBJ,GACAA,EAAWI,IAMnB,OACI,eAACC,EAAD,CACIC,QAAS,WACDJ,GACAR,KAGRa,YAAa,SAACC,GACVA,EAAMC,kBACND,EAAME,kBAEVC,WAAY,SAACH,GACTA,EAAMC,kBACND,EAAME,iBACNP,GAAgB,IAEpBS,WAAY,SAACJ,GACTA,EAAMC,kBACND,EAAME,iBACNP,GAAgB,IAEpBU,UAAW,SAACL,GACRA,EAAMC,kBACND,EAAME,kBAEVI,OAAQ,SAACN,GACLA,EAAME,iBACNF,EAAMC,kBACNN,GAAgB,GAEhB,IAAMY,EAAQC,MAAMC,KAAKT,EAAMU,aAAaH,OAC5CjB,EAAOiB,IA9Bf,UAiCI,uBACII,KAAK,OACLC,IAAK,SAACC,GACEA,IACA3B,EAAc,WACVS,GAAgB,GACfkB,EAA6BC,WAI1CC,SAAU,SAACf,GACFA,GAAUA,EAAMgB,QAAWhB,EAAMgB,OAAOT,OAC7CjB,EAAOkB,MAAMC,KAAKT,EAAMgB,OAAOT,WAItClB,SAhEjB,GAAgC4B,aAsE1BpB,EAAgBqB,IAAOC,IAAV,uJ,QClFZ,SAASC,EAASC,GACvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAIC,EAAS,IAAIC,WAGjBD,EAAOE,iBAAiB,WAAW,SAAA3B,GAAK,OAAIuB,EAAQvB,EAAMgB,OAAQY,WAClEH,EAAOE,iBAAiB,QAASH,GAGjCC,EAAOI,kBAAkBR,MCRtB,SAAeS,EAAtB,kC,4CAAO,WAA8BT,GAA9B,SAAAU,EAAA,kEACMC,WADN,SACuBZ,EAASC,GADhC,wG,8CCMA,SAASY,EAAT,GAAsF,IAAzDC,EAAwD,EAAxDA,oBAAqBC,EAAmC,EAAnCA,KAE/CC,EAAM,IAAIC,IAEhBD,EAAIE,KAAJ,sCAAwCH,GAAQ,GAAI,IAEpDC,EAAIG,KAAK,UAET,IAAMC,EAAOJ,EAAIK,OAAO,QAGxB,OAAO,IAAIC,KAAK,CAACF,GAAON,G,+BCPrB,SAASS,IACd,OACE,cAACC,EAAD,UASE,cAAC,EAAD,CAAYrD,QAAO,uCAAE,WAAOgB,GAAP,yBAAAwB,EAAA,6DAGbV,EAAOd,EAAM,GAGbsC,EAAU,IAAIC,UAND,KAOnBD,EAPmB,SAOEf,EAAeT,GAPjB,wBAOX0B,OAPW,gBCvBIC,EDiCKH,EAAQI,SAA9Bd,EChCL,YAAIa,GAAYE,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,IDmChEC,QAAQC,IAAI,CAAEjD,QAAOc,OAAMc,SAGrBsB,EAAkBxB,EAAkB,CAAEC,oBADtCA,EAAsB,kBACqCC,UAE7DuB,EAAM,IAAIC,KACVtC,KAAKA,EAAKuC,KAAMvC,GACpBqC,EAAIrC,KAAKa,EAAqBuB,GAG9BC,EAAIG,cAAc,CAAElD,KAAM,SACvBmD,MAAK,SAAUC,GACdC,iBAAOD,EAAS,sBAzBD,kCCvBpB,IAAwBf,IDuBJ,OAAF,sDA6BhBtD,WAAS,EA7BZ,yCAqCN,IAAMkD,EAAS1B,IAAOC,IAAV,kC,MEvDZ8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAD,MAEFyB,SAASC,eAAe,W","file":"static/js/main.4ab36070.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nexport type IUploadZoneProps = React.PropsWithChildren<{\n    clickable?: boolean;\n    onFilesOver?: (isFileOver: boolean) => void;\n    onFiles: (file: File[]) => void;\n}>;\n\nexport interface IUploadZoneState { }\n\n\nexport class UploadZone extends React.Component<IUploadZoneProps, IUploadZoneState> {\n    state: IUploadZoneState = { fileInputField: null };\n\n\n    render() {\n        const { children, onFiles: onFile, onFilesOver: onFileOver, clickable } = this.props;\n        const onFileOverMaybe = (isFileOver: boolean) => {\n            if (onFileOver) {\n                onFileOver(isFileOver);\n            }\n        };\n\n        let uploadClick: () => void;\n\n        return (\n            <UploadZoneDiv\n                onClick={() => {\n                    if (clickable) {\n                        uploadClick();\n                    }\n                }}\n                onDragEnter={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDragOver={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(true);\n                }}\n                onDragExit={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(false);\n                }}\n                onDragEnd={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDrop={(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    onFileOverMaybe(false);\n\n                    const files = Array.from(event.dataTransfer.files); // TODO: Maybe there should be event.dataTransfer.items handler\n                    onFile(files);\n                }}\n            >\n                <input\n                    type=\"file\"\n                    ref={(element) => {\n                        if (element) {\n                            uploadClick = () => {\n                                onFileOverMaybe(true);\n                                (element as HTMLInputElement).click();\n                            };\n                        }\n                    }}\n                    onChange={(event) => {\n                        if (!event || !event.target || !event.target.files) return;\n                        onFile(Array.from(event.target.files));\n                    }}\n                />\n\n                {children}\n            </UploadZoneDiv>\n        );\n    }\n}\n\nconst UploadZoneDiv = styled.div`\n\n    width: 200px;\n    height: 300px;\n    border: 5px dashed #009edf;\n\n\n    input{\n        display: none;\n    }\n\n`","export function readFile(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    // Create file reader\n    let reader = new FileReader();\n\n    // Register event listeners\n    reader.addEventListener(\"loadend\", event => resolve(event.target!.result as ArrayBuffer));\n    reader.addEventListener(\"error\", reject);\n\n    // Read file\n    reader.readAsArrayBuffer(file);\n  });\n}\n","import { readFile } from './readFile';\n\nexport async function getAsByteArray(file: File): Promise<Uint8Array> {\n  return new Uint8Array(await readFile(file));\n}\n","import { jsPDF } from \"jspdf\";\n\ninterface ICreateCertificateOptions {\n    certificateFilename: string;\n    hash: string;\n}\n\n// TODO: Should return file not download\nexport function createCertificate({ certificateFilename, hash }: ICreateCertificateOptions) {\n    // Default export is a4 paper, portrait, using millimeters for units\n    const doc = new jsPDF();\n\n    doc.text(`Your BLAKE2s file hash is:\\n${hash}`, 10, 10);\n\n    doc.save(\"a4.pdf\");\n\n    const blob = doc.output('blob');\n\n\n    return new File([blob], certificateFilename, /* TODO: Maybe add current {lastModified: 1534584790000}*/);\n\n}","import React from 'react';\nimport { UploadZone } from './components/UploadZone';\nimport styled from 'styled-components';\n//import sha256 from 'crypto-js/hmac-sha256';\nimport { BLAKE2s } from '@stablelib/blake2s';\nimport { getAsByteArray } from './utils/getAsByteArray';\nimport { uint8Array2hex } from './utils/uint8Array2hex';\nimport { createCertificate } from './pdf/createCertificate';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\n\nexport function App() {\n  return (\n    <AppDiv>\n\n      {/*\n        <button\n          onClick={() => { console.log('test'); createCertificate() }}\n        >\n          Create document\n        </button>*/}\n\n      <UploadZone onFiles={async (files) => {\n\n\n        const file = files[0];\n        //const sha256hmac = sha256('aaa', 'aaa');\n\n        const blake2s = new BLAKE2s();\n        blake2s.update(await getAsByteArray(file)/* new Uint8Array(2); */);\n\n\n        const hash = uint8Array2hex(blake2s.digest());\n\n\n        console.log({ files, file, hash });\n\n        const certificateFilename = 'certificate.pdf';\n        const certificateFile = createCertificate({ certificateFilename, hash });\n\n        var zip = new JSZip();\n        zip.file(file.name, file);\n        zip.file(certificateFilename, certificateFile);\n\n\n        zip.generateAsync({ type: \"blob\" })\n          .then(function (content) {\n            saveAs(content, \"certificate.zip\");\n          });\n\n\n      }} clickable>Upload your file(s) here!</UploadZone>\n\n    </AppDiv>\n  );\n}\n\n\n\nconst AppDiv = styled.div`\n\n\n\n`\n\n\n\n\n","export function uint8Array2hex(uint8Array: Uint8Array) {\n  return [...uint8Array].map(x => x.toString(16).padStart(2, '0')).join('');\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}