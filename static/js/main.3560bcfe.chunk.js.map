{"version":3,"sources":["components/UploadZone.tsx","pdf/createCertificate.ts","components/Loader.tsx","components/AsyncContentComponent.tsx","oracles/AbstractBlockcyptherOracle.ts","oracles/BitcoinOracle.ts","utils/readFile.tsx","utils/getAsByteArray.tsx","utils/uint8ArrayToHex.tsx","hash/blake2b256.ts","App.tsx","index.tsx"],"names":["UploadZone","state","fileInputField","uploadClick","this","props","children","onFile","onFiles","onFileOver","onFilesOver","clickable","onFileOverMaybe","isFileOver","UploadZoneDiv","onClick","onDragEnter","event","stopPropagation","preventDefault","onDragOver","onDragExit","onDragEnd","onDrop","files","Array","from","dataTransfer","type","ref","element","click","onChange","target","React","styled","div","createCertificate","certificateFilename","hash","doc","jsPDF","text","blob","output","File","Loader","className","AsyncContentComponent","loading","content","setState","a","factorable","BitcoinOracle","coinBlockcypther","fetch","response","console","log","json","currentBlock","readFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsArrayBuffer","getAsByteArray","Uint8Array","uint8ArrayToHex","uint8Array","map","x","toString","padStart","join","blake2b256","input","context","blake2bInit","blake2bUpdate","hashUint8Array","blake2bFinal","App","AppDiv","certificateFile","zip","JSZip","name","generateAsync","zipFile","saveAs","bitcoinOracle","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3560bcfe.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nexport type IUploadZoneProps = React.PropsWithChildren<{\n    clickable?: boolean;\n    onFilesOver?: (isFileOver: boolean) => void;\n    onFiles: (file: File[]) => void;\n}>;\n\nexport interface IUploadZoneState { }\n\n\nexport class UploadZone extends React.Component<IUploadZoneProps, IUploadZoneState> {\n    state: IUploadZoneState = { fileInputField: null };\n\n\n    render() {\n        const { children, onFiles: onFile, onFilesOver: onFileOver, clickable } = this.props;\n        const onFileOverMaybe = (isFileOver: boolean) => {\n            if (onFileOver) {\n                onFileOver(isFileOver);\n            }\n        };\n\n        let uploadClick: () => void;\n\n        return (\n            <UploadZoneDiv\n                onClick={() => {\n                    if (clickable) {\n                        uploadClick();\n                    }\n                }}\n                onDragEnter={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDragOver={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(true);\n                }}\n                onDragExit={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    onFileOverMaybe(false);\n                }}\n                onDragEnd={(event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }}\n                onDrop={(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    onFileOverMaybe(false);\n\n                    const files = Array.from(event.dataTransfer.files); // TODO: Maybe there should be event.dataTransfer.items handler\n                    onFile(files);\n                }}\n            >\n                <input\n                    type=\"file\"\n                    ref={(element) => {\n                        if (element) {\n                            uploadClick = () => {\n                                onFileOverMaybe(true);\n                                (element as HTMLInputElement).click();\n                            };\n                        }\n                    }}\n                    onChange={(event) => {\n                        if (!event || !event.target || !event.target.files) return;\n                        onFile(Array.from(event.target.files));\n                    }}\n                />\n\n                {children}\n            </UploadZoneDiv>\n        );\n    }\n}\n\nconst UploadZoneDiv = styled.div`\n\n    width: 200px;\n    height: 300px;\n    border: 5px dashed #009edf;\n\n\n    input{\n        display: none;\n    }\n\n`","import { jsPDF } from \"jspdf\";\n\ninterface ICreateCertificateOptions {\n    certificateFilename: string;\n    hash: string;\n}\n\n// TODO: Maybe should return Blob\nexport function createCertificate({ certificateFilename, hash }: ICreateCertificateOptions) {\n    // Default export is a4 paper, portrait, using millimeters for units\n    const doc = new jsPDF();\n\n    doc.text(`Your BLAKE2b file hash is:\\n${hash}`, 10, 10);\n\n\n    const blob = doc.output('blob');\n\n\n    return new File([blob], certificateFilename, /* TODO: Maybe add current {lastModified: 1534584790000}*/);\n\n}","import * as React from 'react';\n\nexport function Loader() {\n    return (\n        <div className=\"loading-overlay\">\n            {/* TODO: Please @roseckyj  loader that would cover only its area not the whole modal, */}\n            {/* TODO: Please @roseckyj make it universal to use it in every layout type - small icon, fullscreen, modal, etc,... */}\n            {/* TODO: Please @roseckyj untite with LoaderInline */}\n            <div className=\"spinner\"></div>\n        </div>\n    );\n}","import * as React from 'react';\nimport { Loader } from './Loader';\n\nexport type IAwaitable<T> = T | Promise<T>;\n\nexport type IFactory<T> = () => T;\n\nexport type IFactorable<T> = T | IFactory<T>;\n\n\nexport function factor<T>(factorable: IFactorable<T>): T {\n    if (typeof factorable === 'function') {\n        return (factorable as any)();\n    } else {\n        return factorable;\n    }\n}\n\ninterface IAsyncContentComponentProps {\n    /**\n     * Component to be rendered before the content is loaded\n     *\n     * If not set, default loading is used\n     */\n    loading?: JSX.Element;\n\n    /**\n     * The async content to be rendered\n     */\n    content: IFactorable<IAwaitable<JSX.Element>>;\n}\n\ninterface IAsyncContentComponentState {\n    content: JSX.Element;\n}\n\n/**\n * Utility for mounting RxJS observable content\n *\n * @collboard-modules-sdk\n */\nexport function AsyncContentComponent({ loading, content }: IAsyncContentComponentProps) {\n    const [state, setState] = React.useState<IAsyncContentComponentState>({ content: loading || <Loader /> });\n\n    React.useEffect(() => {\n        (async () => {\n            setState({ content: await factor(content) });\n        })();\n\n        return () => {\n            /* TODO: Can here be some reasonable teardown logic? */\n        };\n    }, [content]);\n\n    return <>{state.content}</>;\n}","import { IOracle } from \"./IOracle\";\n\nexport abstract class AbstractBlockcyptherOracle implements IOracle {\n\n    protected abstract coinBlockcypther: string;\n\n    async current() {\n\n        const response = await fetch(`https://api.blockcypher.com/v1/${this.coinBlockcypther}/main`/*`https://blockchain.info/latestblock`*/,\n            /*{ mode: 'no-cors' }*/);\n        console.log({ response });\n        const currentBlock = await response.json();\n\n        return currentBlock.hash;\n    }\n}","import { AbstractBlockcyptherOracle } from \"./AbstractBlockcyptherOracle\";\nimport { IOracle } from \"./IOracle\";\n\nexport class BitcoinOracle extends AbstractBlockcyptherOracle implements IOracle {\n    protected coinBlockcypther = 'btc';\n}","export function readFile(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    // Create file reader\n    let reader = new FileReader();\n\n    // Register event listeners\n    reader.addEventListener(\"loadend\", event => resolve(event.target!.result as ArrayBuffer));\n    reader.addEventListener(\"error\", reject);\n\n    // Read file\n    reader.readAsArrayBuffer(file);\n  });\n}\n","import { readFile } from './readFile';\n\nexport async function getAsByteArray(file: File): Promise<Uint8Array> {\n  return new Uint8Array(await readFile(file));\n}\n","export function uint8ArrayToHex(uint8Array: Uint8Array) {\n  return [...uint8Array].map(x => x.toString(16).padStart(2, '0')).join('');\n}\n","\n// @ts-ignore: no typings\nimport { blake2bInit, blake2bUpdate, blake2bFinal } from 'blakejs';\nimport { getAsByteArray } from '../utils/getAsByteArray';\nimport { uint8ArrayToHex } from '../utils/uint8ArrayToHex';\n\n\nexport async function blake2b256(input: File): Promise<string> {\n\n    const KEY = null // optional key\n    const OUTPUT_LENGTH = 32 // bytes\n    const context = blake2bInit(OUTPUT_LENGTH, KEY)\n\n    // each time you get a byte array from the stream:\n    blake2bUpdate(context, await getAsByteArray(input));\n\n    // finally, once the stream has been exhausted\n    const hashUint8Array = blake2bFinal(context)\n    // returns a 64-byte hash, as a Uint8Array\n\n    const hash = uint8ArrayToHex(hashUint8Array);\n\n    return hash;\n\n}","import React from 'react';\nimport { UploadZone } from './components/UploadZone';\nimport styled from 'styled-components';\n//import sha256 from 'crypto-js/hmac-sha256';\nimport { BLAKE2b } from '@stablelib/blake2b';\nimport { getAsByteArray } from './utils/getAsByteArray';\nimport { uint8ArrayToHex } from './utils/uint8ArrayToHex';\nimport { createCertificate } from './pdf/createCertificate';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport { AsyncContentComponent } from './components/AsyncContentComponent';\nimport { BitcoinOracle } from './oracles/BitcoinOracle';\nimport { blake2b256 } from './hash/blake2b256';\n\n\nexport function App() {\n  return (\n    <AppDiv>\n\n      {/*\n        <button\n          onClick={() => { console.log('test'); createCertificate() }}\n        >\n          Create document\n        </button>*/}\n      <h1>Sigmastamp</h1>\n\n      <UploadZone onFiles={async (files) => {\n\n\n        const file = files[0];\n\n\n        const hash = await blake2b256(file);\n\n\n        console.log({ files, file, hash });\n\n        const certificateFile = createCertificate({ certificateFilename: 'certificate.pdf', hash });\n\n        const zip = new JSZip();\n        zip.file(file.name, file);\n        zip.file(certificateFile.name, certificateFile);\n\n\n        const zipFile = await zip.generateAsync({ type: \"blob\" });\n        saveAs(zipFile, \"certificate.zip\");\n\n\n      }} clickable>Upload your file(s) here!</UploadZone>\n\n      <AsyncContentComponent content={async () => {\n\n\n        const bitcoinOracle = new BitcoinOracle();\n        return <>Curent BTC hash:{await bitcoinOracle.current()}</>;\n      }} />\n\n\n    </AppDiv>\n  );\n}\n\n\n\nconst AppDiv = styled.div`\n\n\n\n`\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}