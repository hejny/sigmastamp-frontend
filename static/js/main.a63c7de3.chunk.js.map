{"version":3,"sources":["filePreview/mimeTypes/audio/AudioFilePreview.tsx","utils/readFileAsDataUri.tsx","filePreview/mimeTypes/image/ImageFilePreview.tsx","filePreview/mimeTypes/misc/CodeFilePreview.tsx","filePreview/mimeTypes/misc/UnknownFilePreview.tsx","utils/fetchWithCache.ts","utils/shortenHexValue.ts","oracles/_AbstractBlockcyptherOracle.ts","config.ts","oracles/BitcoinOracle.ts","oracles/DateOracle.ts","oracles/EthereumOracle.ts","oracles/LitecoinOracle.ts","oracles/NytimesOracle.ts","globalStyle.ts","components/Center.tsx","components/Loader.tsx","components/ObservableContentComponent.tsx","components/QRCode.tsx","components/QRCodeLink.tsx","components/PaymentGate.tsx","components/UploadZone.tsx","components/LogoComponent.tsx","components/UploadZoneSigmastampContent.tsx","components/Button.tsx","components/ErrorComponent.tsx","components/Nl2br.tsx","utils/findDeepestChild.ts","pdf/createPdf.ts","components/PdfPage.tsx","components/AsyncContentComponent.tsx","filePreview/FilePreview.tsx","filePreview/FilesPreview.tsx","utils/readFileAsArrayBuffer.tsx","utils/readFileAsByteArray.tsx","utils/uint8ArrayToHex.tsx","hash/blake2b256.ts","oracles/FakeFileOracle.ts","smartcontracts/addressValidator.ts","smartcontracts/compileErgoScript.ts","smartcontracts/createScript.ts","smartcontracts/getCurrentBlockchainInfo.ts","smartcontracts/ergoFormat/hex/hexToErgoFormat.ts","smartcontracts/ergoFormat/url/urlToErgoFormat.ts","utils/convertToHex.ts","smartcontracts/sendFollowRequest.ts","smartcontracts/createSigmaStampNFT.ts","utils/promptAsync.ts","pages/10-FirstCertificate/FirstCertificatePdfPage.tsx","utils/hexToBase64.ts","pages/10-FirstCertificate/FirstCertificatePage.tsx","smartcontracts/validateFirstCertificate.ts","pages/20-SecondCertificate/SecondCertificatePage.tsx","pages/50-Blockchains/BlockchainsPage.tsx","pages/53-Oracles/OraclesPage.tsx","utils/fetchAsFile.tsx","pages/55-SampleCertificates/SampleCertificatesPage.tsx","pages/70-HowItWorks/HowItWorksPage.tsx","pages/75-Faq/FaqPage.tsx","pages/80-TechnicalStatus/TechnicalStatusPageBadges.tsx","pages/80-TechnicalStatus/TechnicalStatusPage.tsx","pages/90-About/AboutPage.tsx","pages/00-App/MenuComponent.tsx","pages/00-App/HeaderComponent.tsx","pages/00-App/App.tsx","index.tsx"],"names":["AudioFilePreview","file","test","type","src","alt","name","className","readFileAsDataUrl","a","Promise","resolve","reject","reader","FileReader","addEventListener","event","target","result","readAsDataURL","ImageFilePreview","fileData","CodeFilePreview","UnknownFilePreview","console","warn","cache","ObjectStorage","PrefixStorage","localStorage","fetchWithCache","url","ttl","getItem","href","cacheItem","validTo","Date","data","fetch","response","json","error","Error","setItem","now","toISOString","shortenHexValue","value","length","exec","groups","zeros","rest","substr","ROUTES","AbstractBlockcyptherOracle","titleOfCoin","apiUrl","URL","this","toLowerCase","hash","title","format","source","getShortenValue","message","BitcoinOracle","DateOracle","date","getUTCFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","EthereumOracle","LitecoinOracle","NytimesOracle","rssParser","RssParser","parseURL","feed","firstItem","items","link","VERSION","version","ORACLES","FILE_PREVIEWERS","PAGE_SIZE","Vector","config","ConfigChecker","from","process","ERGO_ASSEMBLER_URL","get","required","BUILD_DETAILS_URL","BUILD_DATE","GlobalStyle","createGlobalStyle","Center","children","isFlexed","CenterDiv","styled","div","Loader","LoaderDiv","ObservableContentComponent","loader","content","React","state","setState","subscription","subscribe","newContentAwaitable","newContent","unsubscribe","QRCode","props","text","ref","canvasElement","options","color","QRCodeGenerator","toCanvas","QRCodeLink","rel","PaymentGate","amount","address","dueDate","paymentStatus","PaymentGateDiv","pipe","map","checkedDate","isPayed","overtime","renderer","minutes","seconds","toUTCString","catchError","of","UploadZone","uploadClick","clickable","onFilesOver","onFiles","isFilesOver","setFilesOver","onFileOverWrapper","isFileOver","UploadZoneDiv","onClick","onMouseEnter","onMouseLeave","onDragEnter","stopPropagation","preventDefault","onDragOver","onDragExit","onDragEnd","onDragEndCapture","onDrop","files","Array","dataTransfer","element","click","onChange","LogoComponent","isWatermark","LogoElement","UploadZoneSigmastampContent","UploadZoneContentDiv","Button","button","ErrorComponent","Nl2br","lines","split","line","i","findDeepestChild","createPdf","containerElement","pdfDocument","jsPDF","toArray2D","forAllImagesInElement","html2canvas","scale","backgroundColor","allowTaint","ignoreElements","classList","contains","canvas","image","toDataURL","addImage","containerBoundingBox","getBoundingClientRect","originPosition","fromObject","containerSize","addFont","querySelectorAll","textElement","positionInPdf","subtract","divide","multiply","add","textElementDeepestChild","fontSize","parseFloat","window","getComputedStyle","getPropertyValue","fontWeight","fontStyle","fontSizeInPdf","y","setFontSize","setFont","innerText","baseline","output","PdfPage","pageRef","useRef","renderUi","current","pdfBlob","PdfPageDivPreview","x","AsyncContentComponent","loading","factorable","FilePreview","FilePreviewDiv","filePreviewer","isSupporting","render","FilesPreview","readFileAsArrayBuffer","readAsArrayBuffer","readFileAsByteArray","Uint8Array","uint8ArrayToHex","uint8Array","toString","padStart","join","blake2b256","input","context","blake2bInit","undefined","blake2bUpdate","hashUint8Array","blake2bFinal","FakeFileOracle","toUpperCase","isUserAddressValid","userAddress","Address","isValid","compileErgoScript","script","body","JSON","stringify","trim","method","headers","catch","compilerResponse","compilerResponseBody","success","detail","createScript","Object","entries","filter","key","scriptArray","match","param","substring","getCurrentBlockchainHeight","height","hexToErgoFormat","hex","urlToErgoFormat","str","charCodeAt","convertToHex","sendFollowRequest","compiledSmartContractAddress","sigmaStampProviderAddress","documentHashInHex","ergsSendTogetherWithNFT","ergsFeeForSigmaStampService","mintingFee","requestBody","returnTo","startWhen","erg","txSpec","requests","ergValue","decimals","description","registers","R7","R8","R9","fee","inputs","dataInputs","followResponse","followResponseBody","transactionId","id","dueTime","getTime","BehaviorSubject","forTimeSynced","complete","watchResponse","watchResponseBody","tx","log","next","createSigmaStampNFT","documentHashInBase64","assetTypeValue","returnTransactionFee","sigmaStampAssemblerNodeAddr","refundHeightThreshold","promptAsync","_default","forImmediate","prompt","FirstCertificatePdfPage","setPayment","useState","setData","errors","setErrors","useEffect","all","oracle","getData","then","dataAndErrors","e","to","Oracles","File","certificateFile","zip","JSZip","generateAsync","zipBlob","zipHash","btoa","String","fromCharCode","apply","replace","zipHashBase64","saveAs","PreviewWithLogo","Data","dataGroup","index","margin","dark","light","CARD_SIZE","CARD_PADDING","FirstCertificatePage","payment","SecondCertificate","validateFirstCertificate","firstCertificate","tokensResponse","tokensBody","item","emissionAmount","boxId","boxesResponse","boxesBody","additionalRegisters","renderedValue","getTransactionTime","txId","timestamp","tokenId","outputs","assets","getNFTHolderAddress","total","SecondCertificatePage","setFiles","verification","setVerification","currentHolder","SecondCertificatePageDiv","droppedFiles","droppedFileVerification","alert","FirstCertificate","BlockchainsPage","OraclesDiv","OraclesPage","constructor","fetchAsFile","blob","lookup","basename","path","reverse","SampleCertificatesPage","SampleCertificatesDiv","HowItWorksPage","FaqPage","TechnicalStatusPageBadges","TechnicalStatusPage","AboutPage","AboutPageDiv","MenuComponent","MenuElement","Blockchains","SampleCertificates","HowItWorks","TechnicalStatus","About","menu","HeaderComponent","HeaderElement","header","App","AppDiv","Faq","info","toLocaleString","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a63c7de3.chunk.js","sourcesContent":["import React from 'react';\nimport { IFilePreviewer } from '../../IFilePreviewerProps';\n\nexport class AudioFilePreview implements IFilePreviewer {\n    public isSupporting(file: File): boolean {\n        return /^audio\\/.*/.test(file.type);\n    }\n    public async render(file: File) {\n        return (\n            <img\n                src={'./non-image-previews/audio.jpg'}\n                alt={`Preview of ${file.name}`}\n                className={`file`}\n            />\n        );\n    }\n}\n","import { string_data_url } from '../interfaces/stringTypes';\n\nexport async function readFileAsDataUrl(\n    file: File | Blob,\n): Promise<string_data_url> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', (event) =>\n            resolve(event.target!.result as string_data_url),\n        );\n        reader.addEventListener('error', reject);\n\n        reader.readAsDataURL(file);\n    });\n}\n","import React from 'react';\nimport { readFileAsDataUrl } from '../../../utils/readFileAsDataUri';\nimport { IFilePreviewer } from '../../IFilePreviewerProps';\n\nexport class ImageFilePreview implements IFilePreviewer {\n    public isSupporting(file: File): boolean {\n        return /^image\\/.*/.test(file.type);\n    }\n    public async render(file: File) {\n        const fileData = await readFileAsDataUrl(file);\n        return (\n            <img\n                src={fileData}\n                alt={`Preview of ${file.name}`}\n                className={`file`}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport { IFilePreviewer } from '../../IFilePreviewerProps';\n\nexport class CodeFilePreview implements IFilePreviewer {\n    public isSupporting(file: File): boolean {\n        return /^(application|text)\\/.*/.test(file.type);\n    }\n    public async render(file: File) {\n        return (\n            <>\n                <img\n                    src={'./non-image-previews/code.jpg'}\n                    alt={`Preview of ${file.name}`}\n                    className={`file`}\n                />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { IFilePreviewer } from '../../IFilePreviewerProps';\n\nexport class UnknownFilePreview implements IFilePreviewer {\n    public isSupporting(file: File): boolean {\n        return true;\n    }\n    public async render(file: File) {\n        console.warn(`Unknown file type \"${file.type}\"`);\n        return (\n            <img\n                src={'./non-image-previews/unknown.jpg'}\n                alt={`Preview of ${file.name}`}\n                className={`file`}\n            />\n        );\n    }\n}\n","import { ObjectStorage, PrefixStorage } from 'everstorage';\nimport { string_date } from '../interfaces/stringTypes';\n\nconst cache = new ObjectStorage<{ validTo: string_date; data: any }>(\n    new PrefixStorage(localStorage, 'cache'),\n);\n\n/**\n *\n * @param url\n * @param ttl Time to live in seconds. When -1 provided, data will be valid until page is reloaded.\n * @returns\n */\nexport async function fetchWithCache<T>(\n    url: URL,\n    ttl: number = -1,\n): Promise<T> {\n    // TODO: Storage with validity to everstorage\n    const cacheItem = await cache.getItem(url.href);\n\n    if (cacheItem) {\n        if (cacheItem.validTo && new Date(cacheItem.validTo) > new Date()) {\n            return cacheItem.data as T;\n        }\n    }\n\n    const response = await fetch(\n        url.href,\n        /*{ mode: 'no-cors' }*/\n    );\n    // console.log({ response });\n    const data = await response.json();\n\n    if (data.error) {\n        throw new Error(data.error);\n    }\n\n    if (ttl !== -1) {\n        await cache.setItem(url.href, {\n            validTo: new Date(Date.now() + ttl * 1000).toISOString(),\n            data,\n        });\n    }\n\n    return data;\n}\n","import { string_hex } from '../interfaces/stringTypes';\n\nexport function shortenHexValue(value: string_hex, length: number): string {\n    const { zeros, rest } = /(?<zeros>0*)(?<rest>[0-9a-f]*)/i.exec(value)!\n        .groups!;\n\n    if (zeros.length === 0) {\n        return rest.substr(0, length - 3) + '…' + rest.substr(-2);\n    } else {\n        return '0…' + rest.substr(0, length - 5) + '…' + rest.substr(-2);\n    }\n}\n","import { fetchWithCache } from '../utils/fetchWithCache';\nimport { shortenHexValue } from '../utils/shortenHexValue';\nimport { IOracle } from './_IOracle';\n\nexport abstract class AbstractBlockcyptherOracle implements IOracle {\n    public abstract name: string;\n    protected abstract titleOfCoin: string;\n    protected abstract ttl: number;\n\n    public async getData() {\n        const apiUrl = new URL(\n            `https://api.blockcypher.com/v1/${this.name.toLowerCase()}/main`,\n            // TODO: !!! Wouldn't there be a problem with limits;= is referrer in the request?\n        );\n\n        try {\n            const { hash } = await fetchWithCache(\n                /*`https://blockchain.info/latestblock`*/\n                /*{ mode: 'no-cors' }*/\n                apiUrl,\n                this.ttl,\n            );\n\n            return [\n                {\n                    title: `${this.titleOfCoin}\\ncurrent block`,\n                    format: 'SHA256 Hash',\n                    value: hash,\n                    source: new URL(\n                        `https://live.blockcypher.com/${this.name.toLowerCase()}/block/${hash}`,\n                        // `https://www.blockchain.com/${this.name.toLowerCase()}/block/${hash}`,\n                    ),\n                    getShortenValue(length: number) {\n                        return shortenHexValue(hash, length);\n                    },\n                },\n            ];\n        } catch (error) {\n            if (error instanceof Error && error.message === 'Failed to fetch') {\n                throw new Error(`Failed to fetch ${apiUrl.href}`);\n            } else {\n                throw error;\n            }\n        }\n    }\n}\n","import { ConfigChecker } from 'configchecker';\nimport { Vector } from 'xyzt';\n///* tslint:disable:no-var-requires */\n//const packageJson = require('../package.json');\nimport { version } from '../package.json';\nimport { IFilePreviewer } from './filePreview/IFilePreviewerProps';\nimport { AudioFilePreview } from './filePreview/mimeTypes/audio/AudioFilePreview';\nimport { ImageFilePreview } from './filePreview/mimeTypes/image/ImageFilePreview';\nimport { CodeFilePreview } from './filePreview/mimeTypes/misc/CodeFilePreview';\nimport { UnknownFilePreview } from './filePreview/mimeTypes/misc/UnknownFilePreview';\nimport { BitcoinOracle } from './oracles/BitcoinOracle';\nimport { DateOracle } from './oracles/DateOracle';\nimport { EthereumOracle } from './oracles/EthereumOracle';\nimport { LitecoinOracle } from './oracles/LitecoinOracle';\nimport { NytimesOracle } from './oracles/NytimesOracle';\nimport { IOracle } from './oracles/_IOracle';\n\nexport const VERSION = version;\n\nexport enum ROUTES {\n    FirstCertificate = '/',\n    SecondCertificate = '/verify',\n    Blockchains = '/blockchains',\n    Oracles = '/oracles',\n    SampleCertificates = '/sample-certificates',\n    HowItWorks = '/manual',\n    Faq = '/faq',\n    TechnicalStatus = '/status',\n    About = '/about',\n}\n\nexport const ORACLES: IOracle[] = [\n    new BitcoinOracle(),\n    new EthereumOracle(),\n    new LitecoinOracle(),\n    new DateOracle(),\n    new NytimesOracle(),\n];\n\nexport const FILE_PREVIEWERS: IFilePreviewer[] = [\n    new ImageFilePreview(),\n    new AudioFilePreview(),\n    new CodeFilePreview(),\n    new UnknownFilePreview(),\n];\n\nexport const PAGE_DEBUG = false;\nexport const PAGE_MM_TO_PX_RATIO = 2;\nexport const PAGE_SIZE = new Vector(210, 297);\n// TODO: Maybe in second stage USA format of papers - Letter / B type\n\nconst config = ConfigChecker.from(process.env);\n\n// TODO @hejny - see comments bellow\n// TODO - add testnet/mainnet switch\n// TODO - add config for ergo explorer url and subdomains for testnet/mainnet variant\n\nexport const ERGO_ASSEMBLER_URL = config\n    .get(\n        'REACT_APP_ERGO_ASSEMBLER_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url()\n    // TODO: .checkHttps()\n    // TODO: .checkNativePort()\n    // TODO: universal .check() in configchecker\n    .required().value!;\n\nexport const BUILD_DETAILS_URL = config\n    .get(\n        'REACT_APP_BUILD_DETAILS_URL' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .url().value;\n\nexport const BUILD_DATE = config\n    .get(\n        'REACT_APP_BUILD_DATE' /* TODO: configchecker can ignore prefxes in ConfigChecker.from */,\n    )\n    .date().value;\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class BitcoinOracle extends AbstractBlockcyptherOracle {\n    public name = 'BTC';\n    protected titleOfCoin = 'Bitcoin';\n    protected ttl = 600;\n}\n","import { IOracle } from './_IOracle';\n\nexport class DateOracle implements IOracle {\n    public name = 'DATE';\n    public title = 'Current';\n    public ttl = 1;\n\n    public getData() {\n        const date =\n            new Date(/* TODO: Taking user date can be dangerous, use some remote time. */);\n\n        return [\n            {\n                title: 'Date',\n                format: 'YYYY-MM-DD',\n                value: `${date.getUTCFullYear()}-${(\n                    '0' + date.getUTCMonth()\n                ).slice(-2)}-${('0' + date.getUTCDate()).slice(-2)}`,\n            },\n            {\n                title: 'Time',\n                format: 'HH:MM',\n                value: `${('0' + date.getUTCHours()).slice(-2)}:${(\n                    '0' + date.getUTCMinutes()\n                ).slice(-2)}:${('0' + date.getUTCSeconds()).slice(-2)}`,\n            },\n        ];\n    }\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class EthereumOracle extends AbstractBlockcyptherOracle {\n    public name = 'ETH';\n    protected titleOfCoin = 'Ethereum';\n    protected ttl = 10 /* TODO: !!! Real duration of block */;\n}\n","import { AbstractBlockcyptherOracle } from './_AbstractBlockcyptherOracle';\n\nexport class LitecoinOracle extends AbstractBlockcyptherOracle {\n    public name = 'LTC';\n    protected titleOfCoin = 'Litecoin';\n    protected ttl = 10 /* TODO: !!! Real duration of block */;\n}\n","import RssParser from 'rss-parser';\nimport { IOracle } from './_IOracle';\n\nexport class NytimesOracle implements IOracle {\n    public name = 'NYTIMES';\n    public ttl = -1;\n\n    public async getData() {\n        const rssParser = new RssParser();\n        const feed = await rssParser.parseURL(\n            `https://rss.nytimes.com/services/xml/rss/nyt/World.xml`,\n        );\n\n        // console.log({ feed });\n\n        const firstItem = feed.items[0] as {\n            content: 'Chancellor Olaf Scholz and his new cabinet were sworn in, beginning a new chapter for Europe’s largest democracy. Angela Merkel wished him well and called the chancellorship “one of the most beautiful duties there are.”';\n            contentSnippet: 'Chancellor Olaf Scholz and his new cabinet were sworn in, beginning a new chapter for Europe’s largest democracy. Angela Merkel wished him well and called the chancellorship “one of the most beautiful duties there are.”';\n            creator: 'The New York Times';\n            'dc:creator': 'The New York Times';\n            guid: 'https://www.nytimes.com/live/2021/12/08/world/germany-scholz-merkel';\n            isoDate: '2021-12-08T18:38:54.000Z';\n            link: 'https://www.nytimes.com/live/2021/12/08/world/germany-scholz-merkel';\n            pubDate: 'Wed, 08 Dec 2021 18:38:54 +0000';\n            title: 'Germany’s Merkel Hands Over Chancellor’s Office to Scholz';\n        };\n\n        return [\n            {\n                title: 'The\\nNew York Times',\n                format: 'Front page title',\n                value: firstItem.title,\n                source: new URL(firstItem.link),\n                /*\n                TODO: Maybe implement this:\n                getShortenValue(length: number) {\n                    return firstTitle.substr(0, length);\n                },\n                */\n            },\n        ];\n    }\n}\n\n/**\n * TODO: More news sources\n * @see https://medium.com/rakuten-rapidapi/top-10-best-news-apis-google-news-bloomberg-bing-news-and-more-bbf3e6e46af6\n */\n","import { createGlobalStyle } from 'styled-components';\n\n// Note: Do not use this file for local components and all CSS logic put into styled components\n\nexport const GlobalStyle = createGlobalStyle`\n\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n            'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n            'Helvetica Neue', sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n\n        background-color: hsl(224,15%,20%);\n        color: white;\n\n        margin: 0;\n    }\n\n`;\n\n/**\n * TODO:\n * - Dark/light theme from system\n * - Dark/light theme toggle\n */\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nexport function Center({\n    children,\n    isFlexed,\n    className,\n}: React.PropsWithChildren<{ isFlexed?: boolean; className?: string }>) {\n    return (\n        <CenterDiv className={`outer ${className}`}>\n            {isFlexed ? (\n                children\n            ) : (\n                <div className={`inner ${className}`}>{children}</div>\n            )}\n        </CenterDiv>\n    );\n}\n\nconst CenterDiv = styled.div`\n    /*/\n\n    border: 1px dashed red;\n\n    & > * {\n        border: 1px dashed yellow;\n    }\n\n    /**/\n\n    position: flex;\n    flex-direction: column;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .inner {\n    }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nexport function Loader() {\n    return (\n        <LoaderDiv>\n            <div className=\"spinner\"></div>\n        </LoaderDiv>\n    );\n}\n\nconst LoaderDiv = styled.div``;\n","import * as React from 'react';\nimport { Observable } from 'rxjs';\nimport { Promisable } from 'type-fest';\nimport { Loader } from './Loader';\n/**\n * TODO: Make from this some microlibrary\n */\n\ninterface IObservableContentComponentProps {\n    /**\n     * Component to be rendered before the content is loaded\n     *\n     * If not set, default <Loader/> is used\n     */\n    loader?: JSX.Element;\n\n    /**\n     * You can put here any RxJS observable. For example BehaviorSubject.\n     */\n    content: Observable<Promisable<JSX.Element>>;\n}\n\ninterface IObservableContentComponentState {\n    content: JSX.Element;\n}\n\n/**\n * Utility for mounting RxJS observable content\n *\n * @collboard-modules-sdk\n */\nexport function ObservableContentComponent({\n    loader,\n    content,\n}: IObservableContentComponentProps) {\n    const [state, setState] = React.useState<IObservableContentComponentState>({\n        content: loader || <Loader />,\n    });\n\n    React.useEffect(() => {\n        const subscription = content.subscribe(async (newContentAwaitable) => {\n            const newContent = await newContentAwaitable;\n            setState({ content: newContent });\n        });\n\n        return () => subscription.unsubscribe();\n    }, [content]);\n\n    return <>{state.content}</>;\n}\n","import QRCodeGenerator, { QRCodeRenderersOptions } from 'qrcode';\nimport * as React from 'react';\n\ninterface IQRCodeProps extends QRCodeRenderersOptions {\n    text: string;\n}\n\nexport function QRCode(props: IQRCodeProps) {\n    const { text } = props;\n    return (\n        <canvas\n            className=\"qrcode\"\n            ref={(canvasElement) => {\n                if (!canvasElement) {\n                    return;\n                }\n\n                // Note: Making some manipulation (probbably) due to internal errors of qrcode library\n                const options: QRCodeRenderersOptions = { ...props };\n                delete (options as any).href;\n                options.color = options.color || {};\n\n                QRCodeGenerator.toCanvas(\n                    canvasElement,\n                    text,\n                    options,\n                    (error) => {\n                        if (error) {\n                            console.error(error);\n                        }\n                        // console.log('success!');\n                    },\n                );\n            }}\n        />\n    );\n}\n","import { QRCodeRenderersOptions } from 'qrcode';\nimport * as React from 'react';\nimport { QRCode } from './QRCode';\n\ninterface IQRCodeLinkProps extends QRCodeRenderersOptions {\n    link: URL;\n}\n\nexport function QRCodeLink(props: IQRCodeLinkProps) {\n    const href = props.link.href;\n\n    return (\n        <a {...{ href }} target=\"_blank\" rel=\"noopener noreferrer\">\n            <QRCode text={href} {...props} />\n        </a>\n    );\n}\n","import * as React from 'react';\nimport Countdown from 'react-countdown';\nimport { catchError, map, of } from 'rxjs';\nimport styled from 'styled-components';\nimport { IPaymentStatus } from '../interfaces/IPaymentStatus';\nimport { ergo_wallet_address, nanoerg } from '../interfaces/stringTypes';\nimport { Loader } from './Loader';\nimport { ObservableContentComponent } from './ObservableContentComponent';\nimport { QRCodeLink } from './QRCodeLink';\n\nexport interface IPaymentGateProps {\n    amount: nanoerg;\n    address: ergo_wallet_address;\n    dueDate: Date;\n    paymentStatus: IPaymentStatus;\n}\n\nexport function PaymentGate({\n    amount,\n    address,\n    dueDate,\n    paymentStatus,\n}: IPaymentGateProps) {\n    // TODO: !!! Deal up in design in superlong addreses like UegztxGAXchyKXtaZYFkGWxDnCpMD329qSNk4YVrc8wrwitM58WVocMT59rPSasNZJwezshytQ74pq9JF8uUGGYHJW64hbooxY54dDCRZnFVqFvXGcj1jUhkXpuYuVaDY1b6LcXq9zRCZCiXZ36Gswg2TqcgZRE1B5ZxUrKSd19XykEfsgx5eWW3k7MDiLxvisPqMxqpZtP8UHvgwucJxZ4Bg86xWC3v4kXVC6o9mkg7z64MqiQy1FrqHvY65mr7UgG1vK8q37mDcgZPkDc7BKmsKSLynXgDNsqT8yirvxmsCU9o5wMsF8BoFPxUnjPGLAp7yBwnqtvXowq3o4pYnc4h93irPEHqbTySBgLSEwFzgRgbVrXtE8FaL1q2LVyg7rbHJHzvjVfJMyQDSGQwecG6iWybNUv9sP7SKanHegS4wn8xKaBGrSmqTNk4aPpRXvGTr6rikYxmTYDmQru6tJSebRUf7mhsbtp3xTngEgFtPVCMQTnuuNtszbtHnMHGxfPntz8gEqfKFjHrM1LSCkWxuiYx92Nj7EHFY5vnM7\n\n    const link = new URL(\n        `https://explorer.ergoplatform.com/payment-request?address=${address}&amount=${\n            amount / 1000000000\n        }`,\n    );\n\n    return (\n        <PaymentGateDiv>\n            <ObservableContentComponent\n                content={paymentStatus\n                    .pipe(\n                        map(({ checkedDate, isPayed }) =>\n                            !isPayed ? (\n                                <>\n                                    <QRCodeLink {...{ link }} />\n                                    Pay {amount / 1000000000} ERG to address{' '}\n                                    <a\n                                        href={link.href}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                    >\n                                        {address}\n                                    </a>\n                                    <br />\n                                    In{' '}\n                                    <Countdown\n                                        date={dueDate}\n                                        overtime={false}\n                                        renderer={({ minutes, seconds }) => (\n                                            <>\n                                                {minutes}:{seconds}\n                                            </>\n                                        )}\n                                    />\n                                    <br />\n                                    until{' '}\n                                    {\n                                        dueDate.toUTCString() /* TODO: Some smarter component to show date and time - maybe use moment.js */\n                                    }\n                                    <hr />\n                                    <Loader /> Waiting for payment\n                                    <br />\n                                    Last checked at{' '}\n                                    {\n                                        checkedDate.toUTCString() /* TODO: Some smarter component to show date and time - maybe use moment.js */\n                                    }\n                                </>\n                            ) : (\n                                <>\n                                    Succesfully payed!\n                                    {/* TODO: !!! Place here a link or redirection */}\n                                </>\n                            ),\n                        ),\n                    )\n                    .pipe(\n                        catchError((error: Error) => of(<>{error.message}</>)),\n                    )}\n            />\n        </PaymentGateDiv>\n    );\n}\n\nconst PaymentGateDiv = styled.div`\n    font-size: 11px;\n    width: 500px;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { PAGE_MM_TO_PX_RATIO } from '../config';\nimport { Center } from './Center';\n\nexport type IUploadZoneProps = React.PropsWithChildren<{\n    clickable?: boolean;\n    onFilesOver?: (isFileOver: boolean) => void;\n    onFiles: (droppedFiles: File[]) => void;\n}>;\n\nexport function UploadZone({\n    children,\n    clickable,\n    onFilesOver,\n    onFiles,\n}: IUploadZoneProps) {\n    const [isFilesOver, setFilesOver] = React.useState(false);\n\n    const onFileOverWrapper = (isFileOver: boolean) => {\n        setFilesOver(isFileOver);\n\n        if (onFilesOver) {\n            onFilesOver(isFileOver);\n        }\n    };\n\n    let uploadClick: () => void;\n\n    return (\n        <UploadZoneDiv\n            className={isFilesOver ? 'files-over' : ''}\n            onClick={() => {\n                if (clickable) {\n                    uploadClick();\n                }\n            }}\n            onMouseEnter={() => {\n                onFileOverWrapper(true);\n            }}\n            onMouseLeave={() => {\n                onFileOverWrapper(false);\n            }}\n            onDragEnter={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n            }}\n            onDragOver={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                onFileOverWrapper(true);\n            }}\n            onDragExit={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                onFileOverWrapper(false);\n            }}\n            onDragEnd={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                onFileOverWrapper(false);\n            }}\n            onDragEndCapture={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                onFileOverWrapper(false);\n            }}\n            onDrop={(event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onFileOverWrapper(false);\n\n                const files = Array.from(event.dataTransfer.files); // TODO: Maybe there should be event.dataTransfer.items handler\n                onFiles(files);\n            }}\n        >\n            <input\n                type=\"file\"\n                ref={(element) => {\n                    if (element) {\n                        uploadClick = () => {\n                            onFileOverWrapper(true);\n                            (element as HTMLInputElement).click();\n                        };\n                    }\n                }}\n                onChange={(event) => {\n                    if (!event || !event.target || !event.target.files) return;\n                    onFiles(Array.from(event.target.files));\n                }}\n            />\n            <Center className={'upload-inner'}>{children}</Center>\n        </UploadZoneDiv>\n    );\n}\n\nconst PADDING = 100;\nconst UploadZoneDiv = styled.div`\n    width: ${210 * PAGE_MM_TO_PX_RATIO - 2 * PADDING}px;\n    height: ${297 * PAGE_MM_TO_PX_RATIO - 2 * PADDING}px;\n    padding: ${PADDING}px;\n    border: 5px dashed #cccccc;\n    border-radius: 5px;\n\n    input {\n        display: none;\n    }\n\n    transition: border-color 0.2s ease;\n    .upload-inner {\n        transition: transform 0.1s ease;\n    }\n\n    &.files-over {\n        border-color: #009edf;\n    }\n\n    &.files-over .upload-inner {\n        transform: scale(105%);\n    }\n`;\n\n/**\n * TODO: Probbably when there is only one UploadZone rendered on entire page, expand invisible dropzone to full page\n * TODO: Do not allow to drop placeholder of sigmastamp logo\n */\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface ILogoComponentProps {\n    isWatermark?: boolean;\n}\n\nexport function LogoComponent({ isWatermark }: ILogoComponentProps) {\n    return (\n        <LogoElement>\n            {/* TODO: !!! Logo should be ONLY vectorized SVG/PNG image */}\n            <img\n                className=\"logo\"\n                alt=\"sigmastamp logo\"\n                src=\"./sigmastamp-logo.white.svg\"\n            />\n\n            {!isWatermark && (\n                <div>\n                    <h1 className=\"name\">SigmaStamp</h1>\n                    <p className=\"claim\">Timestamp your documents</p>\n                </div>\n            )}\n        </LogoElement>\n    );\n}\nconst LogoElement = styled.div`\n    /*/\n    border: 1px dashed red; /**/\n\n    display: flex;\n    font-family: 'Oswald', sans-serif;\n    color: white;\n\n    img.logo {\n        width: 4rem;\n    }\n\n    h1.name {\n        display: block;\n        font-size: 1.5em;\n        margin: 0;\n    }\n\n    p.claim {\n        display: block;\n        font-size: 1em;\n        margin: 0;\n    }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Center } from './Center';\nimport { LogoComponent } from './LogoComponent';\n\nexport function UploadZoneSigmastampContent({\n    children,\n}: React.PropsWithChildren<{}>) {\n    return (\n        <UploadZoneContentDiv>\n            <Center isFlexed>\n                <LogoComponent isWatermark />\n                {children}\n            </Center>\n        </UploadZoneContentDiv>\n    );\n}\n\nconst UploadZoneContentDiv = styled.div`\n    font-size: 1.5em;\n    opacity: 0.5;\n    text-align: center;\n\n    img.logo {\n        display: block;\n        width: 230px;\n        transform: translateX(8%);\n    }\n`;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    border: solid 1.5px #009edf;\n    background-color: #009edf;\n    color: white;\n    border-radius: 5px;\n    padding: 7px 18px;\n    font-size: 0.9em;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    cursor: pointer;\n    display: inline-block;\n    text-decoration: none;\n\n    &:hover {\n        background-color: #8bbfd3;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const ErrorComponent = styled.div`\n    background-color: #bb2b2b;\n    color: white;\n    padding: 5px;\n\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    border-radius: 5px;\n`;\n","import * as React from 'react';\n\nexport function Nl2br(props: { children: string }) {\n    const lines = props.children.split('\\n');\n    return (\n        <span>\n            {lines.map((line, i) => (\n                <React.Fragment key={i}>\n                    {line}\n                    {i < lines.length - 1 && <br />}\n                </React.Fragment>\n            ))}\n        </span>\n    );\n}\n","export function findDeepestChild(element: HTMLElement): HTMLElement {\n    if (element.children.length === 0) {\n        return element;\n    } else {\n        return findDeepestChild(element.children[0] as HTMLElement);\n    }\n}\n","import html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\nimport { forAllImagesInElement, forEver } from 'waitasecond';\nimport { Vector } from 'xyzt';\nimport { PAGE_DEBUG, PAGE_MM_TO_PX_RATIO, PAGE_SIZE } from '../config';\nimport { findDeepestChild } from '../utils/findDeepestChild';\n\nexport async function createPdf(containerElement: HTMLElement): Promise<Blob> {\n    const pdfDocument = new jsPDF('p', 'mm', PAGE_SIZE.toArray2D());\n    // TODO: !!! Add metadata to PDF\n\n    await forAllImagesInElement(containerElement);\n\n    const canvas = await html2canvas(containerElement, {\n        scale: 3 /* TODO: What is the ideal quality */,\n        backgroundColor: 'trasparent',\n        allowTaint: true,\n        // removeContainer: true,\n        ignoreElements: (element) => {\n            if (PAGE_DEBUG) {\n                return false;\n            } else {\n                return element.classList.contains('render-as-text');\n            }\n        },\n    });\n\n    const image = canvas.toDataURL('image/png' /* TODO: Configure quality */);\n\n    if (PAGE_DEBUG) {\n        canvas.style.width = PAGE_SIZE.x * PAGE_MM_TO_PX_RATIO + 'px';\n        canvas.style.height = PAGE_SIZE.y * PAGE_MM_TO_PX_RATIO + 'px';\n        canvas.style.border = '1px solid red';\n        canvas.style.position = 'fixed';\n        canvas.style.bottom = '20px';\n        canvas.style.right = '20px';\n        document.body.appendChild(canvas);\n    }\n\n    pdfDocument.addImage(\n        // TODO: !!! Conpression and metadata\n        image,\n        'JPEG',\n        0,\n        0,\n        ...PAGE_SIZE.toArray2D(),\n    );\n\n    const containerBoundingBox = containerElement.getBoundingClientRect();\n    const originPosition = Vector.fromObject(containerBoundingBox, [\n        'left',\n        'top',\n    ]);\n    const containerSize = Vector.fromObject(containerBoundingBox, [\n        'width',\n        'height',\n    ]);\n\n    pdfDocument.addFont('Times New Roman', 'Times', 'serif');\n    // TODO: Remove unnessesary fonts from the document\n    //   console.log(pdfDocument.getFontList());\n\n    for (const textElement of Array.from(\n        containerElement.querySelectorAll('.render-as-text'),\n    ) as HTMLElement[]) {\n        const positionInPdf = Vector.fromObject(\n            textElement.getBoundingClientRect(),\n            ['left', 'top'],\n        )\n            .subtract(originPosition)\n            .divide(containerSize)\n            .multiply(PAGE_SIZE)\n            .add(new Vector(0, 0.5));\n\n        const textElementDeepestChild = findDeepestChild(textElement);\n\n        const fontSize = parseFloat(\n            window\n                .getComputedStyle(textElementDeepestChild, null)\n                .getPropertyValue('font-size'),\n        );\n\n        const fontWeight = parseFloat(\n            window\n                .getComputedStyle(textElementDeepestChild, null)\n                .getPropertyValue('font-weight'),\n        );\n\n        const fontStyle = fontWeight > 400 ? 'bold' : 'normal';\n\n        const fontSizeInPdf =\n            fontSize * (PAGE_SIZE.y / containerSize.y) * 2.83464566929;\n\n        pdfDocument.setFontSize(fontSizeInPdf);\n\n        pdfDocument.setFont('Times', fontStyle);\n        pdfDocument.text(textElement.innerText, ...positionInPdf.toArray2D(), {\n            baseline: 'top',\n        });\n\n        // console.log(textElement.innerText, ...positionInPdf.toArray2D());\n    }\n\n    // containerElement.style.display = 'none';\n\n    if (PAGE_DEBUG) {\n        pdfDocument.save('test.pdf');\n        // TODO: Maybe debug throught new tab> console.log(pdfDocument.output('datauri'));\n        await forEver();\n    }\n\n    return pdfDocument.output('blob');\n}\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { Promisable } from 'type-fest';\nimport { PAGE_MM_TO_PX_RATIO, PAGE_SIZE } from '../config';\nimport { createPdf } from '../pdf/createPdf';\n\ninterface IPdfPageProps extends React.PropsWithChildren<{}> {\n    renderUi: (options: {\n        createPdf: () => Promise<Blob>;\n    }) => Promisable<JSX.Element | JSX.Element[]>;\n}\n\nexport function PdfPage(props: IPdfPageProps) {\n    const pageRef = useRef<HTMLDivElement>(null);\n\n    return (\n        <div>\n            {props.renderUi({\n                createPdf: async () => {\n                    const containerElement = pageRef.current;\n\n                    if (!containerElement) {\n                        throw new Error('Problem with rendering to PDF.');\n                    }\n\n                    const pdfBlob = await createPdf(containerElement);\n\n                    return pdfBlob;\n                },\n            })}\n            <PdfPageDivPreview ref={pageRef}>\n                {props.children}\n            </PdfPageDivPreview>\n        </div>\n    );\n}\n\nconst PdfPageDivPreview = styled.div`\n    //overflow: hidden;\n    width: ${PAGE_SIZE.x * PAGE_MM_TO_PX_RATIO}px;\n    height: ${PAGE_SIZE.y * PAGE_MM_TO_PX_RATIO}px;\n    box-shadow: #5e97ccb7 0px 0px 50px;\n\n    background-color: white;\n    color: black;\n\n    // Note: !!!\n    font-family: 'Times New Roman', Times, serif;\n\n    img.logo {\n        width: 50px;\n        opacity: 0.5;\n    }\n`;\n","import * as React from 'react';\nimport { Promisable } from 'type-fest';\nimport { Loader } from './Loader';\n\nexport type IFactory<T> = () => T;\n\nexport type IFactorable<T> = T | IFactory<T>;\n\nexport function factor<T>(factorable: IFactorable<T>): T {\n    if (typeof factorable === 'function') {\n        return (factorable as any)();\n    } else {\n        return factorable;\n    }\n}\n\ninterface IAsyncContentComponentProps {\n    /**\n     * Component to be rendered before the content is loaded\n     *\n     * If not set, default loading is used\n     */\n    loading?: JSX.Element;\n\n    /**\n     * The async content to be rendered\n     */\n    content: IFactorable<Promisable<JSX.Element>>;\n}\n\ninterface IAsyncContentComponentState {\n    content: JSX.Element;\n}\n\n/**\n * Utility for mounting RxJS observable content\n *\n * @collboard-modules-sdk\n */\nexport function AsyncContentComponent({\n    loading,\n    content,\n}: IAsyncContentComponentProps) {\n    const [state, setState] = React.useState<IAsyncContentComponentState>({\n        content: loading || <Loader />,\n    });\n\n    React.useEffect(() => {\n        (async () => {\n            setState({ content: await factor(content) });\n        })();\n\n        return () => {\n            /* TODO: Can here be some reasonable teardown logic? */\n        };\n    }, [content]);\n\n    return <>{state.content}</>;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AsyncContentComponent } from '../components/AsyncContentComponent';\nimport { FILE_PREVIEWERS } from '../config';\n\ninterface FilePreviewProps {\n    file: File;\n}\n\nexport function FilePreview({ file }: FilePreviewProps) {\n    return (\n        <FilePreviewDiv>\n            <AsyncContentComponent\n                key={file.name}\n                content={async () => {\n                    for (const filePreviewer of FILE_PREVIEWERS) {\n                        if (filePreviewer.isSupporting(file)) {\n                            return await filePreviewer.render(file);\n                        }\n                    }\n\n                    // Note: This should never happen, because UnknownFilePreview will support everything\n                    return <>No preview available</>;\n                }}\n            />\n        </FilePreviewDiv>\n    );\n}\n\nconst FilePreviewDiv = styled.div`\n    img {\n        width: 100%;\n    }\n`;\n","import React from 'react';\nimport { FilePreview } from './FilePreview';\n\ninterface FilesPreviewProps {\n    files: File[];\n}\n\nexport function FilesPreview({ files }: FilesPreviewProps) {\n    const file = files[0];\n    // TODO: Now support only one file - make it to support multiple files and show multiple previews\n\n    return <FilePreview file={file} />;\n}\n","export function readFileAsArrayBuffer(file: File | Blob): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', (event) =>\n            resolve(event.target!.result as ArrayBuffer),\n        );\n        reader.addEventListener('error', reject);\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n","import { readFileAsArrayBuffer } from './readFileAsArrayBuffer';\n\nexport async function readFileAsByteArray(file: File | Blob): Promise<Uint8Array> {\n    return new Uint8Array(await readFileAsArrayBuffer(file));\n}\n","export function uint8ArrayToHex(uint8Array: Uint8Array) {\n    return [...uint8Array].map((x) => x.toString(16).padStart(2, '0')).join('');\n}\n","// @ts-ignore: no typings\nimport { blake2bFinal, blake2bInit, blake2bUpdate } from 'blakejs';\nimport { string_hex } from '../interfaces/stringTypes';\nimport { readFileAsByteArray } from '../utils/readFileAsByteArray';\nimport { uint8ArrayToHex } from '../utils/uint8ArrayToHex';\n\nexport async function blake2b256(input: File | Blob): Promise<string_hex> {\n    const KEY = null; // optional key\n    const OUTPUT_LENGTH = 32; // bytes\n    const context = blake2bInit(OUTPUT_LENGTH, KEY || undefined);\n\n    // each time you get a byte array from the stream:\n    blake2bUpdate(context, await readFileAsByteArray(input));\n\n    // finally, once the stream has been exhausted\n    const hashUint8Array = blake2bFinal(context);\n    // returns a 64-byte hash, as a Uint8Array\n\n    const hash = uint8ArrayToHex(hashUint8Array);\n\n    return hash;\n}\n","import { blake2b256 } from '../hash/blake2b256';\nimport { shortenHexValue } from '../utils/shortenHexValue';\nimport { IOracle } from './_IOracle';\n\nexport class FakeFileOracle implements IOracle {\n    public readonly name = `FILE${\n        this.file.name.toUpperCase() /* TODO: Normalize to uppercase */\n    }`;\n    public readonly ttl = -1;\n\n    constructor(private readonly file: File) {}\n\n    async getData() {\n        const hash = await blake2b256(this.file);\n\n        return [\n            {\n                title: this.file.name,\n                format: 'Blake2b256 hash',\n                value: hash,\n                getShortenValue(length: number) {\n                    return shortenHexValue(hash, length);\n                },\n            },\n        ];\n    }\n}\n","import { ergo_wallet_address } from '../interfaces/stringTypes';\nimport { Address } from \"@coinbarn/ergo-ts\";\n\nexport async function isUserAddressValid(\n    userAddress: ergo_wallet_address,\n): Promise<boolean> {\n    try {\n        return (new Address(userAddress).isValid())\n    } catch (_) {\n        return false;\n    }\n}\n\nexport async function isProxyContractAddressValid(\n    userAddress: ergo_wallet_address,\n): Promise<boolean> {\n    // TODO: !!! Implement, value is hardcoded\n    return true;\n}\n\n","import { ERGO_ASSEMBLER_URL } from '../config';\nimport {\n    ergo_scala_script,\n    ergo_script_address,\n} from '../interfaces/stringTypes';\n\n/**\n * Copiles source in scala to Ergo3 adress format\n * @param source in scala\n */\nexport async function compileErgoScript({\n    script,\n}: {\n    script: ergo_scala_script;\n}): Promise<{ address: ergo_script_address }> {\n    const body = JSON.stringify(script.trim())\n        // TODO: !!! Is this required\n        .split('^\\n')\n        .join('\\n')\n        .split('\\n\\n')\n        .join('\\n');\n\n    const url = `${ERGO_ASSEMBLER_URL.href}compile`;\n    const compilerResponse = await fetch(url, {\n        method: 'POST',\n        body,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }).catch(() => {\n        throw new Error(`Failed to fetch compile service on \"${url}\".`);\n    });\n\n    const compilerResponseBody = await compilerResponse.json();\n\n    if (compilerResponseBody.success === false) {\n        throw new Error(\n            `Failed to compile Ergo script:\\n${compilerResponseBody.detail}`,\n        );\n    }\n\n    return compilerResponseBody;\n}\n","import { ergo_scala_script, string_href } from '../interfaces/stringTypes';\n\nexport async function createScript<T extends { script: string_href }>(\n    options: T,\n): Promise<{ script: ergo_scala_script }> {\n    const response = await fetch(options.script);\n    let script = await response.text();\n\n    // console.log({ script });\n\n    for (const [key, value] of Object.entries(options).filter(\n        // tslint:disable-next-line:no-shadowed-variable\n        ([key]) => key !== 'script',\n    )) {\n        const scriptArray = script.split(`$${key}`);\n        if (scriptArray.length === 1) {\n            throw new Error(\n                `Could not find param \"${key}\" in the script \"${options.script}\"`,\n            );\n        }\n        script = scriptArray.join(value);\n    }\n\n    // TODO: Probbably extract function replaceParams\n\n    const match = script.match(/\\$[a-zA-Z0-9]+/g);\n    if (match) {\n        throw new Error(\n            `Missing params ${match\n                .map((param) => `\"${param.substring(1)}\"`)\n                .join(', ')} for the script \"${options.script}\".`,\n        );\n    }\n\n    return { script };\n}\n","export async function getCurrentBlockchainHeight(): Promise<number> {\n\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/info`,\n    );\n\n    const body = await response.json();\n\n    return body.height;\n}\n\n//TODO - probably return raw fee costs, so we can use them in different ways later on\nexport async function getCurrentBlockchainMinFeeRequired(): Promise<number> {\n\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/info`,\n    );\n\n    const body = await response.json();\n\n    const inputCost = body.params.inputCost;\n    const outputCost = body.params.outputCost;\n    const tokenAccessCost = body.params.tokenAccessCost;\n\n    //this should be true for token minting transaction using input from proxy smart contract address UTXO\n    return ((1 * inputCost) + (2 * outputCost) + (1 * tokenAccessCost));\n}\n","import { ergo_format, string_hex } from '../../../interfaces/stringTypes';\n\n/**\n *\n * @param hex string\n * @returns ergo format string used for example in R8\n */\nexport function hexToErgoFormat(hex: string_hex): ergo_format {\n    // TODO: !!! Unhardcode length of ergo format string\n    return `0e20${hex}`;\n}\n","import { ergo_format, string_url } from '../../../interfaces/stringTypes';\nimport { convertToHex } from '../../../utils/convertToHex';\n\n/**\n *\n * @param url string\n * @returns ergo format string used for example in R8\n */\nexport function urlToErgoFormat(url: string_url): ergo_format {\n    return `0e${url.length.toString(16)}${convertToHex(url)}`;\n}\n","import { string_hex } from \"../interfaces/stringTypes\";\n\nexport function convertToHex(str: string): string_hex {\n    let hex = '';\n    for (let i = 0; i < str.length; i++) {\n        hex += '' + str.charCodeAt(i).toString(16);\n    }\n    return hex;\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { forTimeSynced } from 'waitasecond';\nimport { ERGO_ASSEMBLER_URL } from '../config';\nimport { IPaymentStatus } from '../interfaces/IPaymentStatus';\nimport {\n    ergo_script_address,\n    ergo_wallet_address,\n    nanoerg,\n    string_hex,\n} from '../interfaces/stringTypes';\nimport { hexToErgoFormat } from './ergoFormat/hex/hexToErgoFormat';\nimport { urlToErgoFormat } from './ergoFormat/url/urlToErgoFormat';\n\n/**\n * TODO: !!! Probbably rename to something like followPaymentRequest\n */\nexport async function sendFollowRequest({\n    compiledSmartContractAddress,\n    userAddress,\n    sigmaStampProviderAddress,\n    documentHashInHex,\n    ergsSendTogetherWithNFT,\n    ergsFeeForSigmaStampService,\n    mintingFee,\n}: {\n    compiledSmartContractAddress: ergo_script_address;\n    userAddress: ergo_wallet_address;\n    /**\n     * TODO: !!! Is it ergo_script_address OR ergo_wallet_address\n     */\n    sigmaStampProviderAddress: ergo_script_address;\n    documentHashInHex: string_hex;\n    ergsSendTogetherWithNFT: nanoerg;\n    ergsFeeForSigmaStampService: nanoerg;\n    mintingFee: nanoerg;\n}): Promise<{\n    amount: nanoerg;\n\n    /**\n     * TODO: is it really in seconds?!\n     * TODO: Make it absolute by Date\n     */\n    dueDate: Date;\n    paymentStatus: IPaymentStatus;\n}> {\n    const amount: nanoerg =\n        ergsSendTogetherWithNFT + ergsFeeForSigmaStampService + mintingFee;\n\n    const requestBody = {\n        address: compiledSmartContractAddress,\n        returnTo: userAddress,\n        startWhen: { erg: amount },\n        txSpec: {\n            requests: [\n                {\n                    ergValue: ergsSendTogetherWithNFT,\n                    address: userAddress,\n                    name: 'SigmaStampNFT',\n                    amount: 1,\n                    decimals: 0,\n                    description:\n                        'Proof of existence of document with Blake2b-256 hash specified in R8 register during minting of this NFT token.',\n                    registers: {\n                        R7: '0e0201de',\n                        R8: hexToErgoFormat(documentHashInHex),\n                        R9: urlToErgoFormat(\n                            // TODO: decide about address format + move it into config ???\n                            // @hejny @nitram147 - decide about URL path to use\n                            `http://sigmastamp.ml/#/verify?hash=${documentHashInHex}`,\n                        ),\n                    },\n                },\n                {\n                    value: ergsFeeForSigmaStampService,\n                    address: sigmaStampProviderAddress,\n                },\n            ],\n            fee: mintingFee,\n            inputs: ['$userIns'],\n            dataInputs: [],\n        },\n    };\n\n    const followResponse = await fetch(`${ERGO_ASSEMBLER_URL.href}follow`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n    });\n\n    const followResponseBody = await followResponse.json();\n    const { id: transactionId, dueTime } = followResponseBody;\n\n    const dueDate = new Date(new Date().getTime() + dueTime * 1000);\n\n    // TODO: Probbably split creation of paymentStatus into new function\n    const paymentStatus = new BehaviorSubject({\n        checkedDate:\n            new Date(/* TODO: Taking user date can be dangerous, use some remote time. */),\n        isPayed: false,\n    }) as IPaymentStatus;\n\n    (async () => {\n        // TODO: Do this by a Destroyable Registration without [IIFE with side-effects]\n        while (true) {\n            await forTimeSynced(1000);\n\n            if (\n                new Date(/* TODO: Taking user date can be dangerous, use some remote time. */).getTime() >\n                dueDate.getTime()\n            ) {\n                paymentStatus.error(\n                    new Error(\n                        'Timeout' /* TODO: TimeoutError class + better message */,\n                    ),\n                );\n                paymentStatus.complete(/* TODO: Should be this there after error?! */);\n                return;\n            }\n\n            // Loop\n            const watchResponse = await fetch(\n                `${ERGO_ASSEMBLER_URL.href}result/${transactionId}`,\n            );\n            const watchResponseBody = await watchResponse.json();\n            const {\n                /*id, */tx,\n                detail /* \"pending\", \"returning\", \"mined\", \"success\", \"timeout\", \"return failed\" */,\n            } = watchResponseBody;\n\n            console.log({ watchResponse, watchResponseBody, tx, detail });\n\n            if (detail === 'success') {\n                // TODO: !!! And now take tx and create big certificate\n\n                paymentStatus.next({\n                    checkedDate:\n                        new Date(/* TODO: Taking user date can be dangerous, use some remote time. */),\n                    isPayed: true,\n                });\n                paymentStatus.complete();\n                return;\n            }\n\n            paymentStatus.next({\n                checkedDate:\n                    new Date(/* TODO: Taking user date can be dangerous, use some remote time. */),\n                isPayed: false,\n            });\n        }\n    })();\n\n    return {\n        amount,\n        dueDate,\n        paymentStatus,\n    };\n}\n\n/*\nTODO: Instructions from Martin how to fix a follow request\n\n\nR9 nema vyzera tak ako vyzera\nAni R8\n\n---\n\nMajme Blake2b-256 bitovy hash v HEX formate napriklad:\n4d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\n\nR8 bude obsahovat TYP_DAT---DLZKU_DAT_V_HEX---DATA_V_HEX (pricom miesto --- tam nie je nic, len to ide za sebou)\nTyp dat je 0e\nDlzka dat je 20 [hexa] (kedze to je 20hex == 32 dec -> 32 * 8 (pretoze 1byte = 8bit) = 256 a nas hash je prave 256bitovy)\nNo a samotne data budu ten hash cize: 4d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\n\nCize v R8 bude:\n\"R8\": \"0e204d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\"\nKedze je dlzka hashu stabilna a aj typ dat tak to mozes zobrat jednoducho tak ze pred hex prezentaciu hashu tj napr \"4d1a7eb6b84817769808c9a8a15ac240470d21b3b6f20e93795c2e2c6bae92be\" vlozis \"0e20\"\nCize to tam hardcodnes\n\n----\n\nR9 bude obsahovat rovnakym sposobom encodovane data v ktorych bude URL\nCize 0e na zaciatok ako typ\nPotom XY kde XY je hexa hodnota urcuju kolko bytov dat bude nasledovat\nA nasledne ascii znaky url prevedene na hexa\nNa to som si vtedy pre seba napisal jednoduchy skript s nazvom \"string_to_ergobytes.py\"\n\n```\n#!/usr/bin/env python3\n\nimport sys\nimport base58\nimport hashlib\n\ndef print_usage(binary_name):\n\tprint(\"python ./\" + binary_name + \" todo\")\n\tprint(\"\\tWhere todo\")\n\nif len(sys.argv) != 2:\n\tprint_usage(sys.argv[0])\n\tsys.exit(1)\n\ninput = sys.argv[1]\n\n\ninput_len = len(input)\n\nresult = \"0e\" + '{:02x}'.format(input_len) + input.encode(\"utf-8\").hex()\n\nprint(result)\n\nsys.exit(0)\n```\n\n\ntie includes na base58 a aj hashlib mozes vyhodit, tie mi tam ostali z ineho ergopython toolu, ktory som vyrabal...\n\na spustis to len ako\n\npython ./string_to_ergobytes.py \"https://www.sigmastamp.ml/verify/blabla...\"\n\nTym si odskusat ako ma ta url vyzerat encodovana aby si mohol napisal JS ekvivalent toho\n\nPotom by to uz vsetko malo ist :)\n\n*/\n","import { IPaymentStatus } from '../interfaces/IPaymentStatus';\nimport {\n    ergo_script_address,\n    ergo_wallet_address,\n    nanoerg\n} from '../interfaces/stringTypes';\nimport { isUserAddressValid } from './addressValidator';\nimport { compileErgoScript } from './compileErgoScript';\nimport { createScript } from './createScript';\nimport { getCurrentBlockchainHeight } from './getCurrentBlockchainInfo';\nimport { sendFollowRequest } from './sendFollowRequest';\n\ninterface ICreateSigmaStampNFT {\n    documentHashInBase64: string;\n    documentHashInHex: string;\n    userAddress: ergo_wallet_address;\n}\n\nexport async function createSigmaStampNFT({\n    userAddress,\n    documentHashInBase64,\n    documentHashInHex,\n}: ICreateSigmaStampNFT): Promise<{\n    amount: nanoerg;\n    address: ergo_script_address;\n    dueDate: Date;\n    paymentStatus: IPaymentStatus;\n}> {\n    if (!(await isUserAddressValid(userAddress))) {\n        throw new Error(`User address \"${userAddress}\" is not correct.`);\n    }\n\n    //TODO @nitram147 @hejny validate whether hash already exists in blockchain (same way as in the verification phase)\n    //if hash exists there, show user warning that this file was already stamped via sigmastamp and cannot be done more times\n    //[of couse somebody can stamp this file again on its own, however will we be taking into account only the first occurence of this hash in blockchain - so the guy who stamped it first is the original owner of the file]\n\n\n    //TODO use getCurrentBlockchainMinFeeRequired to get current min fee\n    //allow user to set multiples of this value to increase/decrease minting priority\n    //TODO @hejny - design custom form in which user will setup:\n    // 1.) user's address\n    // 2.) how fast he want to have his NFT to be minted (in multiples of minimum fee - see comment above)\n    // 3.) user could show hidden advanced setting which will include:\n    //     a.) setup of custom amount of ERG to send together with NFT token (so user will be able to transfer NFT in future ERG amount sent together with NFT will be used to cover transaction fees on ergo network)\n    //         there should be also tooltip (like question mark icon) which will include explanation text (which will explain what this ERG amount mean...)\n    //TODO @hejny @nitram147 - think about stamping service fee... (whether to make it stable or based on current erg price etc.)\n    const mintingFee = 20000000; /* TODO: User settable */\n    const ergsSendTogetherWithNFT = 100000000; /* TODO: User settable */\n    const ergsFeeForSigmaStampService = 100000000; /* Our fee */\n    //TODO @hejny - move harcoded values into some config file\n    const sigmaStampProviderAddress =\n        '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV';\n    const assetTypeValue = 'Ad4=';\n    //TODO @nitram147 - redesign this fee also to use getCurrentBlockchainMinFeeRequired function...\n    const returnTransactionFee = 10000000;\n\n    /**\n     * TODO: !!! unhardcode address\n     */\n    // TODO @hejny - move it also to some configuration...\n    const sigmaStampAssemblerNodeAddr =\n        '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV';\n    // TODO @hejny - same - move the value of \"10\" bellow to the config file\n    const refundHeightThreshold = (await getCurrentBlockchainHeight()) + 10;\n\n    console.log(\n        JSON.stringify({\n            ergsSendTogetherWithNFT,\n            userAddress,\n            ergsFeeForSigmaStampService,\n            sigmaStampProviderAddress,\n            assetTypeValue,\n            documentHashInBase64,\n            returnTransactionFee,\n            sigmaStampAssemblerNodeAddr,\n            refundHeightThreshold,\n        }),\n    );\n\n    const { script } = await createScript({\n        script: '/scripts/sigmastamp-nft.scala',\n\n        // TODO: Better names for variabiles below (replace everywhere in scala script + here):\n        ergsSendTogetherWithNFT,\n        userAddress,\n        ergsFeeForSigmaStampService,\n        sigmaStampProviderAddress,\n        assetTypeValue,\n        documentHashInBase64,\n        returnTransactionFee,\n        sigmaStampAssemblerNodeAddr,\n        refundHeightThreshold,\n    });\n\n    const { address: compiledSmartContractAddress } = await compileErgoScript({\n        script,\n    });\n\n    const { amount, dueDate, paymentStatus } = await sendFollowRequest({\n        compiledSmartContractAddress,\n        userAddress,\n        sigmaStampProviderAddress,\n        documentHashInHex,\n        ergsSendTogetherWithNFT,\n        ergsFeeForSigmaStampService,\n        mintingFee,\n    });\n\n    return {\n        amount,\n        address: compiledSmartContractAddress,\n        dueDate,\n        paymentStatus,\n    };\n}\n","import { forImmediate } from 'waitasecond';\n\nexport async function promptAsync(\n    message?: string,\n    _default?: string,\n): Promise<string | null> {\n    await forImmediate();\n    const result = prompt(message, _default);\n\n    return result;\n}\n\n// TODO: !!! Nicer user input than prompt","import { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Vector } from 'xyzt';\nimport { Button } from '../../components/Button';\nimport { ErrorComponent } from '../../components/ErrorComponent';\nimport { LogoComponent } from '../../components/LogoComponent';\nimport { Nl2br } from '../../components/Nl2br';\nimport { IPaymentGateProps } from '../../components/PaymentGate';\nimport { PdfPage } from '../../components/PdfPage';\nimport { QRCode } from '../../components/QRCode';\nimport { QRCodeLink } from '../../components/QRCodeLink';\nimport { ORACLES, PAGE_MM_TO_PX_RATIO, PAGE_SIZE, ROUTES } from '../../config';\nimport { FilesPreview } from '../../filePreview/FilesPreview';\nimport { blake2b256 } from '../../hash/blake2b256';\nimport { string_base64, string_hex } from '../../interfaces/stringTypes';\nimport { FakeFileOracle } from '../../oracles/FakeFileOracle';\nimport { IOracle, IOracleData } from '../../oracles/_IOracle';\nimport { createSigmaStampNFT } from '../../smartcontracts/createSigmaStampNFT';\nimport { hexToBase64 } from '../../utils/hexToBase64';\nimport { promptAsync } from '../../utils/promptAsync';\n\ninterface IFirstCertificatePdfPageProps {\n    files: File[];\n    setPayment: (v: IPaymentGateProps) => void;\n}\n\nexport function FirstCertificatePdfPage(props: IFirstCertificatePdfPageProps) {\n    const { files, setPayment } = props;\n    const [data, setData] = useState<IOracleData[][]>([]);\n    const [errors, setErrors] = useState<Error[]>([]);\n\n    useEffect(() => {\n        Promise.all(\n            (\n                [\n                    ...files.map((file) => new FakeFileOracle(file)),\n                    ...ORACLES,\n                ] as IOracle[]\n            ).map(async (oracle) => {\n                try {\n                    return {\n                        data: await oracle.getData(/* TODO: Auto refresh */),\n                        error: null,\n                    };\n                } catch (error) {\n                    if (error instanceof Error) {\n                        return { data: [], error };\n                    } else {\n                        throw error;\n                    }\n                }\n            }),\n        ).then((dataAndErrors) => {\n            // tslint:disable-next-line: no-shadowed-variable\n            setData(dataAndErrors.map(({ data }) => data));\n            setErrors(\n                dataAndErrors\n                    .map(({ error }) => error)\n                    .filter((e) => e !== null) as Error[],\n            );\n        });\n    }, [files]);\n\n    return (\n        <>\n            {errors.length > 0 && (\n                <ErrorComponent>\n                    There occured some errors in getting oracle data You can\n                    still download the certificate but some data from external\n                    world may be missing\n                    <br />\n                    See more details on{' '}\n                    <Link to={ROUTES.Oracles}>oracles page</Link>.\n                </ErrorComponent>\n            )}\n            <PdfPage\n                renderUi={({ createPdf }) => {\n                    return (\n                        <Button\n                            onClick={async () => {\n                                // TODO: !!! Download logic into separate util + setPayment should not be in IFirstCertificatePdfPageProps\n\n                                const certificateFile = new File(\n                                    [await createPdf()],\n                                    // TODO: Encorporate filename into certificate filename\n                                    'certificate1.pdf' /* TODO: Maybe add current {lastModified: 1534584790000}*/,\n                                );\n\n                                // TODO: !!! Add files into certificate\n\n                                //saveAs(certificateFile);\n                                const zip = new JSZip();\n                                for (const file of files) {\n                                    zip.file(file.name, file);\n                                }\n                                zip.file(certificateFile.name, certificateFile);\n\n                                const zipBlob = await zip.generateAsync({\n                                    type: 'blob',\n                                });\n\n                                const zipHash: string_hex = await blake2b256(\n                                    zipBlob,\n                                );\n\n                                const zipHashBase64: string_base64 =\n                                    await hexToBase64(zipHash);\n\n                                saveAs(\n                                    zipBlob,\n                                    // TODO: Encorporate filename into certificate filename\n                                    `certificate1.${zipHash.substring(\n                                        0,\n                                        5,\n                                    )}.zip`,\n                                );\n\n                                // TODO @hejny - replace this with custom form (details mentioned in createSigmaStampNFT.ts)\n                                // TODO @hejny - also move proof of today function away, so user will be able to decide whether he want to stamp file or he will make special version of file via proof of today page and then he will stamp this proof of today generated zip file (certificate)\n                                // but it should be always opt-in, not opt-out !!!\n                                const userAddress = await promptAsync(\n                                    'Please fill your Ergo address',\n                                    '3Ww7y6vi4NhFZ1ufsEF8vQNyGrvhNmeMmDWP9h3s4qSEFSMoGooV' /* !!! Unhardocde */,\n                                );\n                                if (!userAddress) {\n                                    return;\n                                }\n\n                                //TODO @hejny - include also page for \"return\" - this page will be used in case that ergo-assembler failed and users funds got stucked on proxy-smartcontract, see https://sigmausd.io/#/refund <-- we need to implement something like this or the exact \"clone\" of this...\n                                setPayment(\n                                    await createSigmaStampNFT({\n                                        userAddress,\n                                        documentHashInBase64: zipHashBase64,\n                                        documentHashInHex: zipHash,\n                                    }),\n                                );\n                            }}\n                        >\n                            Download 1st certificate\n                        </Button>\n                    );\n                }}\n            >\n                <PreviewWithLogo>\n                    <div className={`logo outer`}>\n                        <div className={`logo inner`}>\n                            <LogoComponent isWatermark />\n                        </div>\n                    </div>\n                    <FilesPreview {...{ files }} />\n                </PreviewWithLogo>\n                {/* TODO: Here is weird space between preview and data */}\n                <Data>\n                    {data.map((dataGroup, index) => (\n                        <div className=\"data-cell\" key={index}>\n                            {dataGroup.map(\n                                ({\n                                    title,\n                                    value,\n                                    format,\n                                    source,\n                                    getShortenValue,\n                                }) => (\n                                    <div\n                                        className=\"data-cell-group\"\n                                        key={title}\n                                        title={`${title} [${format}]`}\n                                    >\n                                        {source ? (\n                                            <QRCodeLink\n                                                link={source}\n                                                margin={0}\n                                                color={{\n                                                    dark: '#000000',\n                                                    light: '#ffffff00',\n                                                }}\n                                            />\n                                        ) : value.length < 16 ? (\n                                            <></>\n                                        ) : (\n                                            <QRCode\n                                                text={value}\n                                                margin={0}\n                                                color={{\n                                                    dark: '#000000',\n                                                    light: '#ffffff00',\n                                                }}\n                                            />\n                                        )}\n\n                                        <div className=\"key render-as-text\">\n                                            <Nl2br>{title}</Nl2br>\n                                        </div>\n                                        <div className=\"value render-as-text\">\n                                            {getShortenValue\n                                                ? getShortenValue(16)\n                                                : value}\n                                        </div>\n                                    </div>\n                                ),\n                            )}\n                        </div>\n                    ))}\n                </Data>\n            </PdfPage>\n        </>\n    );\n}\n\nconst PreviewWithLogo = styled.div`\n    .logo.outer {\n        position: absolute;\n    }\n\n    .logo.inner {\n        position: relative;\n    }\n\n    img.file {\n        max-width: 100%;\n        max-height: ${(PAGE_SIZE.y - 50 * 3) * PAGE_MM_TO_PX_RATIO}px;\n    }\n`;\n\nconst CARD_SIZE = new Vector(PAGE_SIZE.x / 4, 70);\nconst CARD_PADDING = 7;\n\nconst Data = styled.div`\n    /*/\n    border: 3px dotted #906090; /**/\n\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: stretch;\n    justify-content: flex-start;\n    align-content: stretch;\n\n    .data-cell {\n        /*/\n        border: 1px dotted red; /**/\n\n        //box-shadow: #5e97ccb7 0px 0px 50px;\n\n        /*/\n        &:nth-child(3n + 0) {\n            background-color: #5e97ccb7;\n        }\n\n        &:nth-child(3n + 1) {\n            background-color: #855eccb7;\n        }\n\n        &:nth-child(3n + 2) {\n            background-color: #5ecc9eb7;\n        }\n        /**/\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n\n        width: ${(CARD_SIZE.x - 2 * CARD_PADDING) * PAGE_MM_TO_PX_RATIO}px;\n\n        /*\n        height: ${(CARD_SIZE.y - 2 * CARD_PADDING) * PAGE_MM_TO_PX_RATIO}px;*/\n\n        padding: ${CARD_PADDING * PAGE_MM_TO_PX_RATIO}px;\n\n        .data-cell-group {\n            /*/\n            border: 1px dotted red; /**/\n        }\n\n        .key,\n        .value {\n            display: block;\n        }\n\n        .key {\n            font-weight: bold;\n            text-decoration: underline;\n            font-size: ${5 * PAGE_MM_TO_PX_RATIO}px;\n            // white-space: nowrap;\n\n            &::after {\n                content: ':';\n            }\n        }\n\n        .value {\n            font-size: ${4 * PAGE_MM_TO_PX_RATIO}px;\n        }\n\n        .qrcode {\n            width: 50px !important;\n            height: 50px !important;\n        }\n    }\n`;\n\n/**\n * TODO:\n * - Multiple file previews !!! Warn when more dropped\n */\n","import { string_base64, string_hex } from '../interfaces/stringTypes';\n\nexport function hexToBase64(str: string_hex): string_base64 {\n    return btoa(\n        String.fromCharCode.apply(\n            null,\n            // @ts-ignore:\n            str\n                .replace(/\\r|\\n/g, '')\n                .replace(/([\\da-fA-F]{2}) ?/g, '0x$1 ')\n                .replace(/ +$/, '')\n                .split(' '),\n        ),\n    );\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { IPaymentGateProps, PaymentGate } from '../../components/PaymentGate';\nimport { UploadZone } from '../../components/UploadZone';\nimport { UploadZoneSigmastampContent } from '../../components/UploadZoneSigmastampContent';\nimport { ROUTES } from '../../config';\nimport { FirstCertificatePdfPage } from './FirstCertificatePdfPage';\n\ninterface IAppState {\n    files: File[];\n}\n\nexport function FirstCertificatePage() {\n    const [state, setState] = useState<IAppState>({ files: [] });\n    const [payment, setPayment] = useState<null | IPaymentGateProps>(null);\n\n    if (!payment) {\n        return (\n            <>\n                {/*\n                <Button\n                onClick={() => { console.log('test'); createCertificate() }}\n                >\n                Create document\n                </Button>\n                    <h1>Sigmastamp</h1>*/}\n\n                {state.files.length === 0 ? (\n                    <UploadZone\n                        onFiles={async (files) => {\n                            setState({ files });\n                            /*\n                            const file = files[0];\n\n                            const hash = await blake2b256(file);\n\n                            console.log({ files, file, hash });\n\n                            const certificateFile = createCertificate({ certificateFilename: 'certificate.pdf', hash });\n\n                            const zip = new JSZip();\n                            zip.file(file.name, file);\n                            zip.file(certificateFile.name, certificateFile);\n\n                            const zipFile = await zip.generateAsync({ type: 'blob' });\n                            saveAs(zipFile, 'certificate.zip');\n                            */\n                        }}\n                        clickable\n                    >\n                        <UploadZoneSigmastampContent>\n                            Drop the files you want to timestamp here!\n                        </UploadZoneSigmastampContent>\n                    </UploadZone>\n                ) : (\n                    <FirstCertificatePdfPage\n                        files={state.files}\n                        setPayment={setPayment}\n                    />\n                )}\n\n                <Link to={ROUTES.SecondCertificate}>\n                    Or verify your 1st certificate.\n                </Link>\n            </>\n        );\n    } else {\n        return <PaymentGate {...payment} />;\n    }\n}\n\n/**\n * TODO: When the user is in the middle of the process, prevent unloading of the page (or the component) by \"unsubmitted form\" feature of the browser\n */\n","import { blake2b256 } from '../hash/blake2b256';\n\n//TODO rename function below\nexport async function validateFirstCertificate(firstCertificate: File) {\n\n    const hash = await blake2b256(firstCertificate);\n\n    const tokensResponse = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/tokens/search?query=SigmaStampNFT`,\n    );\n    const tokensBody = await tokensResponse.json();\n\n    for(const item of tokensBody.items){\n\n        //skip non-NFTs\n        if(item.emissionAmount !== 1) continue;\n\n        const boxId = item.boxId;\n\n        const boxesResponse = await fetch(\n            `https://api-testnet.ergoplatform.com/api/v1/boxes/${boxId}`,\n        );\n\n        const boxesBody = await boxesResponse.json();\n\n        //skip non-SigmaStampNFT types\n        //(0x01 specifies NFT category, 0xde specifies SigmaStampNFT subcategory)\n        //see (https://github.com/ergoplatform/eips/blob/master/eip-0004.md) for more info\n        if(boxesBody.additionalRegisters.R7.renderedValue !== `01de`) continue;\n\n        if(boxesBody.additionalRegisters.R8.renderedValue === `${hash}`){\n            return boxesBody;\n        }\n    }\n\n    return null;\n}\n\n//TODO @nitram147 - function to check whether is hash already in blockchain\n//it would be similar to validateFirstCertificate function\n//maybe it would be great to extract the core functionality into one function and then only make wrapper for it (so validateFirstCertificate will be only a wrapper)\n\nexport async function getTransactionTime(txId: string) {\n\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/transactions/${txId}`,\n    );\n    const body = await response.json();\n\n    console.log('getTransactionTime', body);\n\n    const timestamp = body.timestamp;\n    const tokenId = body.outputs[0].assets[0].tokenId;\n\n    return { timestamp, tokenId };\n}\n\nexport async function getNFTHolderAddress(tokenId: string) {\n\n    const response = await fetch(\n        `https://api-testnet.ergoplatform.com/api/v1/boxes/unspent/byTokenId/${tokenId}`,\n    );\n    const body = await response.json();\n\n    console.log('getNFTHolderAddress', body);\n\n    //check that there is only one holder (it means that it is NFT and also that it exists)\n    if(body.total !== 1) return null;\n\n    return body.items[0].address;\n}\n","import { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from '../../components/Button';\nimport { PdfPage } from '../../components/PdfPage';\nimport { UploadZone } from '../../components/UploadZone';\nimport { UploadZoneSigmastampContent } from '../../components/UploadZoneSigmastampContent';\nimport { ROUTES } from '../../config';\nimport { blake2b256 } from '../../hash/blake2b256';\nimport {\n    getNFTHolderAddress,\n    getTransactionTime,\n    validateFirstCertificate,\n} from '../../smartcontracts/validateFirstCertificate';\n\nexport function SecondCertificatePage() {\n    const [files, setFiles] = useState<any>([]);\n    const [verification, setVerification] = useState<any>(null);\n\n    if (!verification) {\n        return (\n            <SecondCertificatePageDiv>\n                <UploadZone\n                    onFiles={async (droppedFiles) => {\n                        const firstCertificate = droppedFiles[0];\n                        setFiles([droppedFiles[0]]);\n\n                        const droppedFileVerification =\n                            await validateFirstCertificate(firstCertificate);\n\n                        if (!droppedFileVerification) {\n                            alert(\n                                `Your 1st certificate is still not validated through Ergo blockchain.`,\n                            );\n                            // TODO @hejny - see comments bellow\n                            // TODO - consider skipping the rest because extraction of transactionId from null in\n                            // the following statements will result in error\n                        }\n\n                        const { transactionId } = droppedFileVerification;\n\n                        const { timestamp, tokenId } = await getTransactionTime(\n                            transactionId,\n                        );\n                        //TODO @hejny @nitram147 - handle null in case that there isn't asset holder\n                        //this could happen when somebody burned NFT token\n                        //(we know that the corresponding NFT has already existed based on validateFirstCertificate function)\n                        //(but we don't know whether it still exists...)\n                        const currentHolder = await getNFTHolderAddress(\n                            tokenId,\n                        );\n\n                        setVerification({\n                            ...droppedFileVerification,\n                            timestamp,\n                            tokenId,\n                            currentHolder,\n                        });\n                        console.log(droppedFileVerification);\n                    }}\n                    clickable\n                >\n                    <UploadZoneSigmastampContent>\n                        Drop your 1st certificate here!\n                    </UploadZoneSigmastampContent>\n                </UploadZone>\n                <Link to={ROUTES.FirstCertificate}>\n                    Or create your 1st certificate.\n                </Link>\n            </SecondCertificatePageDiv>\n        );\n    } else {\n        return (\n            <PdfPage\n                renderUi={({ createPdf }) => {\n                    return (\n                        <Button\n                            onClick={async () => {\n                                const certificateFile = new File(\n                                    [await createPdf()],\n                                    'certificate2.pdf' /* TODO: Maybe add current {lastModified: 1534584790000}*/,\n                                );\n\n                                //saveAs(certificateFile);\n\n                                //TODO @hejny @nitram147 - design output format of verify PDF\n                                // also show somehow to user what amount of GPUs will be required to remine the chain to make\n                                // false proofs - this will be based on the block difficulty since the NFT mining block up to today\n                                // TODO @nitram147 - ask on discord whether there's some function on full node to find this difficulty value...\n                                const zip = new JSZip();\n                                for (const file of files) {\n                                    zip.file(file.name, file);\n                                }\n                                zip.file(certificateFile.name, certificateFile);\n\n                                const zipBlob = await zip.generateAsync({\n                                    type: 'blob',\n                                });\n\n                                const zipHash = await blake2b256(zipBlob);\n                                saveAs(\n                                    zipBlob,\n                                    `certificate2.${zipHash.substring(\n                                        0,\n                                        5,\n                                    )}.zip`,\n                                );\n                            }}\n                        >\n                            Download 2nd certificate\n                        </Button>\n                    );\n                }}\n            >\n                <b>transactionId:</b> {verification.transactionId}\n                <br />\n                <b>timestamp:</b> {verification.timestamp}\n                <br />\n                <b>tokenId:</b> {verification.tokenId}\n                <br />\n                <b>current holder:</b> {verification.currentHolder}\n            </PdfPage>\n        );\n    }\n}\n\nconst SecondCertificatePageDiv = styled.div``;\n\n/**\n * TODO: When the user is in the middle of the process, prevent unloading of the page (or the component) by \"unsubmitted form\" feature of the browser\n */\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport function BlockchainsPage() {\n    return (\n        <OraclesDiv>\n            <h1>BlockchainsPage</h1>\n            <p>SigmaStamp is working on theese blockchains:</p>\n\n            <a href=\"https://ergoplatform.org/\">\n                <img\n                    className=\"logo\"\n                    alt=\"sigmastamp logo\"\n                    src=\"./blockchains/ergo.svg\"\n                />\n            </a>\n        </OraclesDiv>\n    );\n}\n\nconst OraclesDiv = styled.div``;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AsyncContentComponent } from '../../components/AsyncContentComponent';\nimport { ErrorComponent } from '../../components/ErrorComponent';\nimport { ORACLES } from '../../config';\n\nexport function OraclesPage() {\n    return (\n        <OraclesDiv>\n            <h1>Oracles</h1>\n            <p>\n                Theese are information from external world that will be\n                incorporated into your first certificate:\n            </p>\n            {ORACLES.map((oracle) => (\n                <div key={oracle.name}>\n                    <AsyncContentComponent\n                        content={async () => {\n                            try {\n                                const data =\n                                    await oracle.getData(/* TODO: Auto refresh */);\n\n                                return (\n                                    <>\n                                        {data.map(\n                                            ({\n                                                title,\n                                                value,\n                                                format,\n                                                source,\n                                            }) => (\n                                                <div\n                                                    key={title}\n                                                    title={`${title} [${format}]`}\n                                                >\n                                                    <b>{`${title}: `}</b>\n\n                                                    <a href={source?.href}>\n                                                        {value}\n                                                    </a>\n                                                </div>\n                                            ),\n                                        )}\n                                    </>\n                                );\n                            } catch (error) {\n                                if (error instanceof Error) {\n                                    return (\n                                        <ErrorComponent>\n                                            Error occured when getting data from{' '}\n                                            {oracle.constructor.name}:<br />\n                                            {error.message}\n                                            {/* TODO: !!! Link to GitHub */}\n                                        </ErrorComponent>\n                                    );\n                                } else {\n                                    throw error;\n                                }\n                            }\n                        }}\n                    />\n                </div>\n            ))}\n        </OraclesDiv>\n    );\n}\n\nconst OraclesDiv = styled.div``;\n\n/**\n * TODO:\n * - Information how to add oracles (link to github)\n */\n","import { lookup } from 'mime-types';\nimport { string_url } from '../interfaces/stringTypes';\n\nexport async function fetchAsFile(url: string_url): Promise<File> {\n    const response = await fetch(url);\n    const blob = await response.blob();\n    let type = lookup(url);\n\n    if (type === false) {\n        type = 'application/octet-stream';\n    }\n    return new File([blob], basename(url), { type });\n}\n\nfunction basename(path: string_url): string {\n    return path.split('/').reverse()[0];\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AsyncContentComponent } from '../../components/AsyncContentComponent';\nimport { fetchAsFile } from '../../utils/fetchAsFile';\nimport { FirstCertificatePdfPage } from '../10-FirstCertificate/FirstCertificatePdfPage';\n\nexport function SampleCertificatesPage() {\n    return (\n        <SampleCertificatesDiv>\n            <h1>Sample certificates</h1>\n            <p>Here are samples how will your certificates look like:</p>\n            <h2>First certificate with image</h2>\n            <AsyncContentComponent\n                content={async () => (\n                    <FirstCertificatePdfPage\n                        files={[\n                            await fetchAsFile(\n                                process.env.PUBLIC_URL +\n                                    '/samples-to-sign/sample1.jpg',\n                            ),\n                        ]}\n                        setPayment={() => {}}\n                    />\n                )}\n            />\n\n            <h2>First certificate with code</h2>\n            <AsyncContentComponent\n                content={async () => (\n                    <FirstCertificatePdfPage\n                        files={[\n                            await fetchAsFile(\n                                process.env.PUBLIC_URL +\n                                    '/samples-to-sign/sample1.c',\n                            ),\n                        ]}\n                        setPayment={() => {}}\n                    />\n                )}\n            />\n\n            <h2>First certificate with sound in mp3</h2>\n            <AsyncContentComponent\n                content={async () => (\n                    <FirstCertificatePdfPage\n                        files={[\n                            await fetchAsFile(\n                                process.env.PUBLIC_URL +\n                                    '/samples-to-sign/sample1.mp3',\n                            ),\n                        ]}\n                        setPayment={() => {}}\n                    />\n                )}\n            />\n\n            <h2>Multiple files</h2>\n            <AsyncContentComponent\n                content={async () => (\n                    <FirstCertificatePdfPage\n                        files={[\n                            await fetchAsFile(\n                                process.env.PUBLIC_URL +\n                                    '/samples-to-sign/sample1.jpg',\n                            ),\n                            await fetchAsFile(\n                                process.env.PUBLIC_URL +\n                                    '/samples-to-sign/sample1.mp3',\n                            ),\n                            await fetchAsFile(\n                                process.env.PUBLIC_URL +\n                                    '/samples-to-sign/sample1.mp3',\n                            ),\n                        ]}\n                        setPayment={() => {}}\n                    />\n                )}\n            />\n\n            {/* TODO: <h2>Second certificate</h2> */}\n            {/* TODO: !!! */}\n        </SampleCertificatesDiv>\n    );\n}\n\nconst SampleCertificatesDiv = styled.div``;\n","import React from 'react';\n\nexport function HowItWorksPage() {\n    return (\n        <>\n            <h1>About sigmastamp</h1>\n            <p>We are working on this page</p>\n        </>\n    );\n}\n\n/**\n * TODO: @nitram147 Please write a description how the sigmastamp works\n */\n","import React from 'react';\n\nexport function FaqPage() {\n    return (\n        <>\n            <h1>FAQ</h1>\n        </>\n    );\n}\n\n/**\n * Note: This page is prepared for the future.\n */\n","import React from 'react';\n\nexport function TechnicalStatusPageBadges() {\n    return (\n        <>\n            <a\n                href=\"https://raw.githubusercontent.com/sigmastamp/sigmastamp-frontend/master/LICENSE\"\n                rel=\"nofollow\"\n            >\n                <img\n                    src=\"https://camo.githubusercontent.com/09c911a390e8b97ab6b67abca28fa25089552380b7bd3266805698dd4f68664c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7369676d617374616d702f7369676d617374616d702d66726f6e74656e642e7376673f7374796c653d666c6174\"\n                    alt=\"License\"\n                    data-canonical-src=\"https://img.shields.io/github/license/sigmastamp/sigmastamp-frontend.svg?style=flat\"\n                />\n            </a>\n            <a href=\"https://github.com/sigmastamp/sigmastamp-frontend/actions/workflows/test.yml\">\n                <img\n                    src=\"https://github.com/sigmastamp/sigmastamp-frontend/actions/workflows/test.yml/badge.svg\"\n                    alt=\"Test\"\n                />\n            </a>\n            <a href=\"https://github.com/sigmastamp/sigmastamp-frontend/actions/workflows/lint.yml\">\n                <img\n                    src=\"https://github.com/sigmastamp/sigmastamp-frontend/actions/workflows/lint.yml/badge.svg\"\n                    alt=\"Lint\"\n                />\n            </a>\n            <a\n                href=\"https://snyk.io/test/github/sigmastamp/sigmastamp-frontend\"\n                rel=\"nofollow\"\n            >\n                <img\n                    src=\"https://camo.githubusercontent.com/2df9dc47f5366c33c81e3381b1679660e543aac075fddd7f309a0834a2293767/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f7369676d617374616d702f7369676d617374616d702d66726f6e74656e642f62616467652e737667\"\n                    alt=\"Known Vulnerabilities\"\n                    data-canonical-src=\"https://snyk.io/test/github/sigmastamp/sigmastamp-frontend/badge.svg\"\n                />\n            </a>\n            <a href=\"https://github.com/sigmastamp/sigmastamp-frontend/issues\">\n                <img\n                    src=\"https://camo.githubusercontent.com/0474e5b937ce5602e0fabe656fd946f62fd8201d7de737048c7a12b8c17a18b8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676d617374616d702f7369676d617374616d702d66726f6e74656e642e7376673f7374796c653d666c6174\"\n                    alt=\"Issues\"\n                    data-canonical-src=\"https://img.shields.io/github/issues/sigmastamp/sigmastamp-frontend.svg?style=flat\"\n                />\n            </a>\n        </>\n    );\n}\n","import React from 'react';\nimport { TechnicalStatusPageBadges } from './TechnicalStatusPageBadges';\n\nexport function TechnicalStatusPage() {\n    return (\n        <>\n            <h1>Technical status</h1>\n\n            <TechnicalStatusPageBadges />\n        </>\n    );\n}\n\n/**\n *\n * TODO: version and the build (leading to the more detailed information as in the console - make it to some sharable util + pass it into the Collboard)\n * TODO: Link to source code\n * TODO: @nitram147 There should be some way how to determine if the server is workinh;\n *       Server + services status (+ !!! do not allow to send payment if the server is not synced)\n * TODO: Status badges should be also part of the repository readme\n */\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport function AboutPage() {\n    return (\n        <AboutPageDiv>\n            <h1>About sigmastamp</h1>\n            <p>Verify the time origin of your documents</p>\n\n            <h2>How it started</h2>\n\n            <h2>Who is behing SigmaStamp</h2>\n\n            {/* TODO: @nitram147 Please write basic information about yourself */}\n\n            <a href=\"https://www.pavolhejny.com/\">\n                <img\n                    className=\"author\"\n                    alt=\"Pavol Hejný\"\n                    src=\"./team/pavol-hejny.png\"\n                />\n            </a>\n\n            <h2>Logo</h2>\n            <img\n                className=\"logo\"\n                alt=\"sigmastamp logo\"\n                src=\"./sigmastamp-logo.white.svg\"\n            />\n            <img\n                className=\"logo\"\n                alt=\"sigmastamp logo\"\n                src=\"./sigmastamp-logo.black.svg\"\n            />\n        </AboutPageDiv>\n    );\n}\n\nconst AboutPageDiv = styled.div`\n    /*/\n    border: 1px dashed red; /**/\n\n    img.author {\n        width: 300px;\n    }\n\n    img.logo {\n        width: 200px;\n    }\n`;\n\n/**\n * TODO: @nitram147 Please write basic information about the sigmastamp\n * TODO: This info should be also part of repository readme\n */\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { ROUTES } from '../../config';\n\nexport function MenuComponent() {\n    return (\n        <MenuElement>\n            <ul>\n                <li>\n                    <NavLink to={ROUTES.FirstCertificate}>\n                        First certificate\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={ROUTES.SecondCertificate}>\n                        Second certificate\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={ROUTES.Blockchains}>Blockchains</NavLink>\n                </li>\n                <li>\n                    <NavLink to={ROUTES.Oracles}>Oracles</NavLink>\n                </li>\n                <li>\n                    <NavLink to={ROUTES.SampleCertificates}>\n                        Sample certificates\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={ROUTES.HowItWorks}>How it works?</NavLink>\n                </li>\n                {/* Note: This page is prepared for the future.\n                <li>\n                    <NavLink to={ROUTES.Faq}>FAQ</NavLink>\n                </li> */}\n                <li>\n                    <NavLink to={ROUTES.TechnicalStatus}>\n                        Technical status\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={ROUTES.About}>About</NavLink>\n                </li>\n            </ul>\n        </MenuElement>\n    );\n}\nconst MenuElement = styled.menu`\n    /*/\n    border: 1px dashed red; /**/\n\n    padding-left: 0px;\n    padding-left: 10px;\n\n    ul {\n        list-style: none;\n        padding: 0;\n    }\n\n    li {\n        margin: 0;\n        font-size: 1.5em;\n    }\n\n    a {\n        color: #7e7d7d;\n        font-size: 0.7em;\n        text-decoration: none;\n    }\n\n    a.active {\n        color: #d3d3d3;\n        font-size: 0.7em;\n    }\n\n    @media (max-width: 850px) {\n    }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LogoComponent } from '../../components/LogoComponent';\nimport { MenuComponent } from './MenuComponent';\n\nexport function HeaderComponent() {\n    return (\n        <HeaderElement>\n            <LogoComponent />\n            <MenuComponent />\n        </HeaderElement>\n    );\n}\nconst HeaderElement = styled.header`\n    /*/\n    border: 1px dashed red; /**/\n\n    @media (max-width: 850px) {\n        display: flex;\n        align-items: flex-start;\n        align-content: flex-start;\n\n        & > * {\n            border: 1px dashed transparent;\n        }\n\n        ul {\n            margin: 0;\n            display: flex;\n        }\n\n        ul li {\n            border-right: 1px solid #ccc;\n            padding: 10px;\n        }\n    }\n`;\n","import React from 'react';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Center } from '../../components/Center';\nimport { ROUTES } from '../../config';\nimport { FirstCertificatePage } from '../10-FirstCertificate/FirstCertificatePage';\nimport { SecondCertificatePage } from '../20-SecondCertificate/SecondCertificatePage';\nimport { BlockchainsPage } from '../50-Blockchains/BlockchainsPage';\nimport { OraclesPage } from '../53-Oracles/OraclesPage';\nimport { SampleCertificatesPage } from '../55-SampleCertificates/SampleCertificatesPage';\nimport { HowItWorksPage } from '../70-HowItWorks/HowItWorksPage';\nimport { FaqPage } from '../75-Faq/FaqPage';\nimport { TechnicalStatusPage } from '../80-TechnicalStatus/TechnicalStatusPage';\nimport { AboutPage } from '../90-About/AboutPage';\nimport { HeaderComponent } from './HeaderComponent';\n\nexport function App() {\n    return (\n        <AppDiv>\n            <HashRouter>\n                <div className=\"menu-column\">\n                    <HeaderComponent />\n                </div>\n\n                <div className=\"content-column\">\n                    <main>\n                        <Center>\n                            <Routes>\n                                <Route\n                                    path={ROUTES.FirstCertificate}\n                                    element={<FirstCertificatePage />}\n                                />\n                                <Route\n                                    path={ROUTES.SecondCertificate}\n                                    element={<SecondCertificatePage />}\n                                />\n\n                                <Route\n                                    path={ROUTES.Blockchains}\n                                    element={<BlockchainsPage />}\n                                />\n                                <Route\n                                    path={ROUTES.Oracles}\n                                    element={<OraclesPage />}\n                                />\n                                <Route\n                                    path={ROUTES.SampleCertificates}\n                                    element={<SampleCertificatesPage />}\n                                />\n                                <Route\n                                    path={ROUTES.HowItWorks}\n                                    element={<HowItWorksPage />}\n                                />\n                                <Route\n                                    path={ROUTES.Faq}\n                                    element={<FaqPage />}\n                                />\n                                <Route\n                                    path={ROUTES.TechnicalStatus}\n                                    element={<TechnicalStatusPage />}\n                                />\n\n                                <Route\n                                    path={ROUTES.About}\n                                    element={<AboutPage />}\n                                />\n                            </Routes>\n                        </Center>\n                    </main>\n                </div>\n            </HashRouter>\n        </AppDiv>\n    );\n}\n\nconst AppDiv = styled.div`\n    --menu-width: calc(20vw + 100px);\n\n    /*/\n    border: 1px dashed green; /**/\n\n    .menu-column {\n        /*/\n        border: 1px dashed red; /**/\n\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        width: calc(var(--menu-width) - 20px - 20px);\n        padding: 20px;\n\n        background-color: hsl(224, 15%, 15%);\n        box-shadow: #00000047 0px 0px 10px;\n        overflow: hidden;\n    }\n\n    .content-column {\n        /*/\n        border: 1px dashed red; /**/\n\n        min-height: 100vh;\n\n        margin-left: var(--menu-width);\n        margin-bottom: 100px;\n        padding: 20px;\n        padding-left: 50px;\n    }\n\n    /* TODO: Maybe put somewhere else */\n    a {\n        color: #555;\n        font-size: 0.7em;\n    }\n\n    @media (max-width: 850px) {\n        .menu-column {\n            position: block;\n            z-index: 1;\n\n            width: 100%;\n            height: 100px;\n            padding: 20px;\n        }\n\n        .content-column {\n            position: block;\n            margin-left: 0;\n            padding-top: 200px;\n        }\n    }\n`;\n\n/**\n * TODO: !!! Is mobile design layout needed in the first stage ?\n * TODO: Document title should be set according to current page\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BUILD_DATE, BUILD_DETAILS_URL, VERSION } from './config';\nimport { GlobalStyle } from './globalStyle';\nimport { App } from './pages/00-App/App';\n\nconsole.info(\n    `%c📜 Sigmastamp version ${VERSION}` +\n        (!BUILD_DATE ? `` : `\\nBuild at ${BUILD_DATE.toLocaleString()}`) +\n        (!BUILD_DETAILS_URL\n            ? ``\n            : `\\nView build details ${BUILD_DETAILS_URL.href}`),\n    `background: #009EDD; color: white; font-size: 1.1em; font-weight: bold; padding: 5px; border-radius: 3px;`,\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}